! This file contains macros used in the chemstation_controller.py module

Name modify_and_run_method
  ! This macro modifies and runs the selected method. The method is executed from the modified TemporaryRegisterMethod register.
  ! Parameters:
  !   VialNumber - Position number in the carousel
  !   SampleName$ - Name of the sample
  !   method_name$ - Name of the method to be executed
  !   SampleComment$ - Comment for the sample
  !   data_subdirectory$ - Subdirectory for data storage

  parameter VialNumber, SampleName$, method_name$, SampleComment$, data_subdirectory$
  local a, method$

  ! Delete existing legacy sample register if it exists
  If (RegSize(TemporaryRegisterMethod) > 0) Then 
    delReg TemporaryRegisterMethod
  EndIf
  
  ! Create new register with analysis details
  NewObj TemporaryRegisterMethod[1], 1, 0, 0
  NewSampleInfo "TemporaryRegisterMethod[1]", "SampleInfo"
  
  ! Create method path - if no method specified, use current method
  If (Len(method_name$) = 0) Then
    method$ = _methfile$
  ELSE
    method$ = method_name$ + ".M"
  EndIf
  
  ! If no subdirectory specified, use current data subdirectory
  IF (Len(data_subdirectory$) = 0) Then
    data_subdirectory$ = _DATASUBDIR$
  EndIf
  
  LoadMethod _methpath$, method$

  ! Set path parameters
  SetTabHdrText TemporaryRegisterMethod[1], "SampleInfo", "DataPath", _DATAPATH$
  SetTabHdrText TemporaryRegisterMethod[1], "SampleInfo", "SubDirectory", data_subdirectory$
  SetTabHdrText TemporaryRegisterMethod[1], "SampleInfo", "Method", _methpath$ + method$

  ! Set sample parameters in the table
  SetTabVal TemporaryRegisterMethod[1], "SampleInfo", 1, "VialNumber", VialNumber
  SetTabText TemporaryRegisterMethod[1], "SampleInfo", 1, "SampleName", SampleName$
  SetTabText TemporaryRegisterMethod[1], "SampleInfo", 1, "FileNamePattern", "<Date>_<Time>_<SampleN>"
  SetTabText TemporaryRegisterMethod[1], "SampleInfo", 1, "SampleComment", TabText$(_Config[1], "SampleInfo", 1, "SampleComment") !SampleComment$
  
  ! Run the modified method
  a = RunMethodFct(, "TemporaryRegisterMethod", 1, "SampleInfo", 1)
  
endMacro

Name modify_row_sequence
  ! This macro loads a sequence, modifies parameters in the specified row and saves the sequence.
  ! To add more modifiable parameters, study the _SEQUENCE[1] register's SeqTable1 table.
  ! For better register visualization, use the register_reader.mac macro
  ! Parameters:
  !   seq_name$ - Name of the sequence to modify
  !   row - Row number in the sequence to modify
  !   VialNumber - New vial position number
  !   SampleName$ - New sample name
  !   method_name$ - New method name
  !   Sample_Info$ - New sample information
  !   FilePath$ - New file path for data storage
  
  parameter row, VialNumber, SampleName$, method_name$, Sample_Info$ !, FilePath$

  !LoadSequence seq_name$ ! Load the sequence

  ! Modify parameters if they are provided (not empty)
  If (Len(VialNumber) = 0) Then
      ! do nothing
  Else
      SetTabVal _SEQUENCE[1], "SeqTable1", row, "Vial", VialNumber
  EndIf

  If (Len(SampleName$) = 0) Then

  Else
      SetTabText _SEQUENCE[1], "SeqTable1", row, "SampleName", SampleName$
  EndIf
  
  If (Len(method_name$) = 0) Then

  Else
      SetTabText _SEQUENCE[1], "SeqTable1", row, "Method", method_name$
  EndIf

  If (Len(Sample_Info$) = 0) Then

  Else
      SetTabText _SEQUENCE[1], "SeqTable1", row, "SampleInfo", Sample_Info$
  EndIf

  ! If (Len(SampleName$) = 0) Then

  ! Else
  !     SetTabText _SEQUENCE[1], "SeqTable1", row, "DataFileName", FilePath$
  ! EndIf

  ! SaveSequence seq_name$ ! Save the modified sequence
  
endMacro

Name modify_seq_table_by_excel
  Local row, VialNumber$, SampleName$, SampleInfo$, Method$, DataFilename$, InjVial$
  parameter numrows

  Clean_and_prepraration_Seqtable1 numrows

  on Error CloseDDE

  Chan = DDEInitiate("EXCEL", "Sheet1")

  For row = 1 to numrows
      DDERequest chan, "R" + Val$(row) + "C1", VialNumber$
      DDERequest chan, "R" + Val$(row) + "C2", Method$
      DDERequest chan, "R" + Val$(row) + "C3", SampleInfo$
      DDERequest chan, "R" + Val$(row) + "C4", Samplename$
      DDERequest chan, "R" + Val$(row) + "C5", DataFilename$
      DDERequest chan, "R" + Val$(row) + "C6", InjVial$

      If (Len(VialNumber$) = 0) Then
          ! do nothing
      Else
          SetTabVal _SEQUENCE[1], "SeqTable1", row, "Vial", Val(VialNumber$)
      EndIf

      If (Len(SampleName$) = 0) Then
      Else
          SetTabText _SEQUENCE[1], "SeqTable1", row, "Method", Method$
      EndIf
      
      If (Len(SampleInfo$) = 0) Then
      Else
          SetTabText _SEQUENCE[1], "SeqTable1", row, "SampleInfo", SampleInfo$
      EndIf

      If (Len(Samplename$) = 0) Then
      Else
          SetTabText _SEQUENCE[1], "SeqTable1", row, "SampleName", SampleName$
      EndIf

      ! If (Len(DataFilename$) = 0) Then
      ! Else
      !     SetTabText _SEQUENCE[1], "SeqTable1", row, "DataFileName", Filename$
      ! EndIf

      If (Len(InjVial) = 0) Then
      Else
          SetTabVal _SEQUENCE[1], "SeqTable1", row, "InjVial", Val(InjVial$)
      EndIf
    
  Next row

  DDETerminate Chan
  
  SetTabHdrText _SEQUENCE[1], "SeqParm", "DataNamePattern1","<Date>-<Time>-<SampleName>"
  SetTabHdrText _SEQUENCE[1], "SeqParm", "DataSeqSubdir", "RM_SIA"
  SetTabHdrText _SEQUENCE[1], "SeqParm", "SeqResName", "DBS_80%_MeOH"

  ! SaveSequence _SEQFILE$


EndMacro


Name CloseDDE
  Local Button
  DDETerminate Chan
  Return
EndMacro

Name vialtable_export$
  ! This macro exports the carousel vial occupancy status
  ! It checks all 48 positions in the carousel and returns their status
  ! Return format: "position:status, position:status, ... , "
  ! Status values: 
  !   0 - Empty position
  !   1 - Vial in carousel
  !   2 - Vial loads in inlet
  !   3 - Vial loads in outlet
  !   4 - Vial loads in replenishment
  local vials$, occupied$, sep_position, get_vial_state$

  vials$ = "" ! Initialize output string

  For Vial = 1 to 48
      ! Get vial status information from carousel
      occupied$ = SendModule$("CE1", "TRAY:GETVIALSTATE? " + Val$(Vial))
      sep_position = InStr(occupied$, ",")
      get_vial_state$ = occupied$[(sep_position + 1)] ! Extract vial status from response

      ! Add position and status to output string
      vials$ = vials$ + Val$(Vial) + ":" + get_vial_state$ + ", "
  Next Vial

  return vials$

endMacro


Name Clean_and_prepraration_Seqtable1
  local ErrFlag
  parameter num_rows

  ErrFlag = 0

  While (ErrFlag = 0)
    On Error ErrFlag = 1 
    DelTabRow _SEQUENCE[1], "SeqTable1", 1
  EndWhile

  InsTabRow _SEQUENCE[1], "SeqTable1", 1:num_rows