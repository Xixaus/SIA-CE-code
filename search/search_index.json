{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SIA-CE Integration Package","text":""},{"location":"#automated-capillary-electrophoresis-with-sequential-injection-analysis","title":"Automated Capillary Electrophoresis with Sequential Injection Analysis","text":"<p>Welcome to the SIA-CE Integration documentation. This package provides a unified Python interface for controlling Agilent ChemStation CE systems and Sequential Injection Analysis (SIA) hardware, enabling fully automated analytical workflows.</p> <p>Project Status</p> <p>This project is actively developed. ChemStation API is fully functional, while SIA integration is in advanced development stage.</p>"},{"location":"#what-is-sia-ce","title":"What is SIA-CE?","text":"<p>SIA-CE combines two powerful analytical techniques:</p> <ul> <li>Capillary Electrophoresis (CE): High-resolution separation technique for analyzing charged molecules</li> <li>Sequential Injection Analysis (SIA): Automated sample preparation and liquid handling system</li> </ul> <p>Together, they enable:</p> <ul> <li>\u2705 Fully automated sample preparation and analysis</li> <li>\u2705 Reduced manual intervention and human error</li> <li>\u2705 Increased throughput and reproducibility</li> <li>\u2705 Complex analytical workflows with minimal supervision</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#chemstation-api","title":"ChemStation API","text":"<ul> <li>Universal ChemStation Control: Compatible with any instrument controlled by ChemStation software</li> <li>CE-Optimized Functions: While universally applicable, functions are specifically designed and optimized for capillary electrophoresis operations</li> <li>Direct Command Processor Access: Commands sent directly to ChemStation command line for maximum flexibility</li> <li>Robust Communication Protocol: Simple and reliable file-based communication system</li> <li>Comprehensive Method Management: Complete CE method and sequence handling with advanced parameter control</li> <li>Real-time Instrument Monitoring: Live status and progress tracking with detailed analytics</li> <li>Easy Customization: Simple to extend or modify for specific applications and instrument configurations</li> <li>Ready-to-Use Control Functions: Pre-programmed operations for common CE tasks and workflows</li> </ul>"},{"location":"#sia-api","title":"SIA API","text":"<ul> <li>Precise Syringe Pump Control: Full automation of Cavro XP and Hamilton MVP series pumps with microliter precision</li> <li>Multi-Position Valve Automation: Complete control of VICI and compatible valve selectors for fluid routing</li> <li>Advanced Liquid Handling: Sophisticated aspiration, dispensing, and mixing operations with customizable parameters</li> <li>Pre-Built Analytical Workflows: Ready-to-use methods for sample preparation, dilution, and homogenization</li> <li>Volume Tracking &amp; Safety: Automatic volume monitoring with overflow protection and error recovery</li> <li>Flexible Configuration: Customizable port assignments and operational parameters for different laboratory setups</li> </ul>"},{"location":"#integration-benefits","title":"Integration Benefits","text":"<ul> <li>Seamless coordination between sample preparation and analysis</li> <li>One unified Python interface for complete workflow control</li> <li>Reduced analysis time through parallel operations</li> <li>Consistent and reproducible analytical procedures</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.methods import PreparedSIAMethods\nfrom SIA_API.devices import SyringeController, ValveSelector\n\n# Initialize systems\nchemstation = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)  # Cavro XP or Hamilton MVP\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n\nsia = PreparedSIAMethods(chemstation, syringe, valve)\n\n# Automated workflow\nsia.system_initialization_and_cleaning()\nsia.prepare_batch_flow()\n\nsia.batch_fill(vial=15, volume=500, solvent_port=5)\nsia.homogenize_sample(vial=15, speed=2000, homogenization_time=30)\n\nchemstation.method.execution_method_with_parameters(\n    vial=15, \n    method_name=\"Protein_Analysis\",\n    sample_name=\"BSA_Standard\"\n)\n</code></pre>"},{"location":"#documentation-overview","title":"Documentation Overview","text":"<p>This documentation is organized to help you quickly find what you need:</p> <ul> <li>Getting Started: Installation and first steps</li> <li>ChemStation API: Control your CE system</li> <li>SIA API: Automate sample preparation</li> <li>Tutorials: Step-by-step guides</li> <li>API Reference: Complete function documentation</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":""},{"location":"#hardware","title":"Hardware","text":"<ul> <li>Agilent 7100 Capillary Electrophoresis System (or other ChemStation-compatible instruments)</li> <li>Cavro XP or Hamilton MVP series syringe pump</li> <li>VICI or compatible valve selector</li> <li>Windows PC with available COM ports or USB-to-RS232 adapters</li> </ul>"},{"location":"#software","title":"Software","text":"<ul> <li>Windows 7 or higher</li> <li>Agilent OpenLab CDS ChemStation Edition</li> <li>Python 3.7+</li> <li>Required Python packages (see Getting Started)</li> </ul>"},{"location":"#support-and-contributing","title":"Support and Contributing","text":"<ul> <li>Issues: Report bugs on GitHub Issues</li> <li>Discussions: Join our community discussions</li> <li>Contributing: See our contribution guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Ready to start?</p> <p>Head to Getting Started to install the package and run your first automated analysis!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you install the SIA-CE package and configure your system for automated CE analysis.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher with pip package manager</li> <li>Visual Studio Code (recommended for Jupyter notebook support)</li> <li>Agilent ChemStation software running</li> </ul>"},{"location":"getting-started/#package-installation","title":"Package Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourusername/SIA-CE.git\ncd SIA-CE\n\n# Install dependencies\npip install pyserial pandas pywin32 tqdm openpyxl\n\n# Configure ChemStation communication paths\npython SIA-CE/ChemstationAPI/utils/macro_updater.py\n</code></pre> <p>The <code>macro_updater.py</code> script configures the correct file paths for ChemStation communication.</p>"},{"location":"getting-started/#system-configuration","title":"System Configuration","text":""},{"location":"getting-started/#1-chemstation-setup","title":"1. ChemStation Setup","text":"<ol> <li> <p>Open ChemStation and ensure it's fully loaded</p> </li> <li> <p>Find the command line at the bottom of the interface</p> </li> </ol> <p>!!! tip \"Command line missing?\"        Enable it from: <code>View \u2192 Command Line</code></p> <ol> <li>Start the communication macro:    <pre><code>macro \"C:\\path\\to\\SIA-CE\\ChemstationAPI\\core\\ChemPyConnect.mac\"; Python_Run\n</code></pre></li> </ol> <p>!!! warning \"Update the path\"        Replace with your actual installation path (shown by macro_updater)</p> <ol> <li>Verify success - look for \"Start Python communication\" message</li> </ol>"},{"location":"getting-started/#2-hardware-setup","title":"2. Hardware Setup","text":"<p>Find COM ports in Device Manager (<code>devmgmt.msc</code>) under \"Ports (COM &amp; LPT)\" or:</p> <pre><code>import serial.tools.list_ports\nfor port in serial.tools.list_ports.comports():\n    print(f\"{port.device}: {port.description}\")\n</code></pre>"},{"location":"getting-started/#system-test","title":"System Test","text":"<p>Run this complete test to verify everything works:</p> <pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\ndef system_test():\n    \"\"\"Test all components.\"\"\"\n    print(\"=== SIA-CE System Test ===\")\n\n    # ChemStation\n    try:\n        ce_api = ChemstationAPI()\n        status = ce_api.system.status()\n        print(f\"\u2713 ChemStation connected (Status: {status})\")\n    except Exception as e:\n        print(f\"\u2717 ChemStation failed: {e}\")\n        return False\n\n    # SIA devices\n    try:\n        syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n        valve = ValveSelector(port=\"COM4\", num_positions=8)\n\n        syringe.initialize()\n        valve.position(1)\n        print(\"\u2713 SIA devices connected\")\n    except Exception as e:\n        print(f\"\u2717 SIA devices failed: {e}\")\n        return False\n\n# Run the test\nsystem_test()\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>ChemStation Connection Failed - Ensure ChemStation is running - Execute the macro command (exact command shown in error message) - Check communication file paths</p> <p>COM Port Access Denied - Verify correct COM port numbers in Device Manager - Close other programs using the ports - Run Python as Administrator - Check device power and cables</p> <p>Device Not Responding - Check power connections - Verify cable connections (USB/RS232) - Try different COM ports</p> <p>Missing Dependencies <pre><code>pip install pyserial pandas pywin32 tqdm openpyxl\n</code></pre></p>"},{"location":"getting-started/#development-tips","title":"Development Tips","text":"<p>Use Jupyter Notebooks for interactive development: - Step-by-step execution - Real-time variable inspection - Easy debugging - Available in VS Code or Jupyter Lab</p> <p>Basic workflow template: <pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize\nce_api = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)  \nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n# Your code here\n</code></pre></p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>ChemStation File Protocol - Understand the communication</li> <li>Basic CE Operations - Learn core functions</li> <li>First Analysis Tutorial - Complete walkthrough</li> <li>SIA Workflows - Advanced automation</li> </ol> <p>Ready to go!</p> <p>Your SIA-CE system is configured. Start with the First Analysis Tutorial for hands-on learning.</p>"},{"location":"readme/","title":"SIA-CE Documentation","text":"<p>This directory contains the MkDocs documentation for the SIA-CE integration package.</p>"},{"location":"readme/#building-the-documentation","title":"Building the Documentation","text":""},{"location":"readme/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Python 3.7+</li> <li>Install documentation dependencies:    <pre><code>pip install -r docs/requirements.txt\n</code></pre></li> </ol>"},{"location":"readme/#local-development","title":"Local Development","text":"<ol> <li> <p>Start the development server: <pre><code>mkdocs serve\n</code></pre>    The documentation will be available at <code>http://127.0.0.1:8000/</code></p> </li> <li> <p>Live reload:    The development server automatically reloads when you make changes to the documentation files.</p> </li> </ol>"},{"location":"readme/#building-for-production","title":"Building for Production","text":"<ol> <li> <p>Build the static site: <pre><code>mkdocs build\n</code></pre>    This creates a <code>site/</code> directory with the static HTML files.</p> </li> <li> <p>Test the build: <pre><code>python -m http.server 8000 --directory site/\n</code></pre></p> </li> </ol>"},{"location":"readme/#deployment-options","title":"Deployment Options","text":""},{"location":"readme/#github-pages","title":"GitHub Pages","text":"<ol> <li> <p>Automatic deployment: <pre><code>mkdocs gh-deploy\n</code></pre>    This builds and pushes to the <code>gh-pages</code> branch.</p> </li> <li> <p>Manual deployment:</p> </li> <li>Build the site: <code>mkdocs build</code></li> <li>Push the <code>site/</code> directory to <code>gh-pages</code> branch</li> </ol>"},{"location":"readme/#other-platforms","title":"Other Platforms","text":"<ul> <li>Read the Docs: Add <code>.readthedocs.yml</code> configuration</li> <li>Netlify: Deploy the <code>site/</code> directory</li> <li>GitLab Pages: Use CI/CD pipeline</li> </ul>"},{"location":"readme/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Home page\n\u251c\u2500\u2500 getting-started.md          # Installation guide\n\u251c\u2500\u2500 chemstation-api/            # ChemStation documentation\n\u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u251c\u2500\u2500 file-protocol.md\n\u2502   \u251c\u2500\u2500 basic-operations.md\n\u2502   \u251c\u2500\u2500 methods-sequences.md\n\u2502   \u2514\u2500\u2500 troubleshooting.md\n\u251c\u2500\u2500 sia-api/                    # SIA documentation\n\u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u251c\u2500\u2500 basic-operations.md\n\u2502   \u251c\u2500\u2500 workflows.md\n\u2502   \u2514\u2500\u2500 port-configuration.md\n\u251c\u2500\u2500 tutorials/                  # Step-by-step guides\n\u2502   \u251c\u2500\u2500 first-analysis.md\n\u2502   \u251c\u2500\u2500 batch-processing.md\n\u2502   \u2514\u2500\u2500 sia-ce-integration.md\n\u251c\u2500\u2500 api-reference/              # API documentation\n\u2502   \u251c\u2500\u2500 chemstation.md\n\u2502   \u251c\u2500\u2500 sia.md\n\u2502   \u2514\u2500\u2500 error-handling.md\n\u2514\u2500\u2500 appendix/                   # Additional resources\n    \u251c\u2500\u2500 hardware-setup.md\n    \u2514\u2500\u2500 faq.md\n</code></pre>"},{"location":"readme/#writing-documentation","title":"Writing Documentation","text":""},{"location":"readme/#style-guide","title":"Style Guide","text":"<ol> <li>Headers: Use ATX-style headers (<code>#</code>, <code>##</code>, etc.)</li> <li>Code blocks: Use triple backticks with language identifier</li> <li>Links: Relative links for internal pages</li> <li>Admonitions: Use for tips, warnings, and notes</li> </ol>"},{"location":"readme/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create a new <code>.md</code> file in the appropriate directory</li> <li>Add the page to <code>nav</code> section in <code>mkdocs.yml</code></li> <li>Link to the new page from related pages</li> </ol>"},{"location":"readme/#code-examples","title":"Code Examples","text":"<p>Always test code examples before including them:</p> <pre><code># Good example - complete and runnable\nfrom ChemstationAPI import ChemstationAPI\n\napi = ChemstationAPI()\napi.ce.load_vial_to_position(15, \"inlet\")\n</code></pre>"},{"location":"readme/#using-admonitions","title":"Using Admonitions","text":"<pre><code>!!! tip \"Best Practice\"\n    Always validate before operations.\n\n!!! warning \"Important\"\n    This operation cannot be undone.\n\n!!! note\n    Additional information for advanced users.\n</code></pre>"},{"location":"readme/#maintenance","title":"Maintenance","text":""},{"location":"readme/#regular-updates","title":"Regular Updates","text":"<ol> <li>API changes: Update reference documentation</li> <li>New features: Add tutorials and examples</li> <li>Bug fixes: Update troubleshooting guides</li> <li>User feedback: Improve FAQ section</li> </ol>"},{"location":"readme/#version-management","title":"Version Management","text":"<ul> <li>Tag documentation versions with releases</li> <li>Maintain compatibility notes</li> <li>Update changelog</li> </ul>"},{"location":"readme/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make documentation changes</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Submit pull request</li> </ol>"},{"location":"readme/#support","title":"Support","text":"<p>For documentation issues: - Open an issue on GitHub - Tag with <code>documentation</code> - Provide specific page and section</p>"},{"location":"readme/#license","title":"License","text":"<p>Documentation is licensed under the same terms as the main project (MIT License).</p>"},{"location":"api-reference/chemstation/","title":"ChemStation API Reference","text":"<p>Complete API documentation for the ChemStation control interface.</p>"},{"location":"api-reference/chemstation/#chemstationapi","title":"ChemstationAPI","text":"<p>Main API controller class providing unified access to all ChemStation functionality.</p>"},{"location":"api-reference/chemstation/#constructor","title":"Constructor","text":"<pre><code>ChemstationAPI(config: Optional[CommunicationConfig] = None)\n</code></pre> <p>Parameters: - <code>config</code>: Communication configuration settings. If None, uses default configuration.</p> <p>Raises: - <code>ConfigurationError</code>: If communication setup fails - <code>ConnectionError</code>: If ChemStation connection test fails</p> <p>Example: <pre><code>from ChemstationAPI import ChemstationAPI\n\n# Default configuration\napi = ChemstationAPI()\n\n# Custom configuration\nfrom ChemstationAPI.core.communication_config import CommunicationConfig\nconfig = CommunicationConfig(verbose=True, timeout=10.0)\napi = ChemstationAPI(config)\n</code></pre></p>"},{"location":"api-reference/chemstation/#attributes","title":"Attributes","text":"<ul> <li><code>ce</code>: CE module for instrument control</li> <li><code>method</code>: Methods module for method management</li> <li><code>sequence</code>: Sequence module for batch operations</li> <li><code>system</code>: System module for status monitoring</li> <li><code>validation</code>: Validation module for checks</li> </ul>"},{"location":"api-reference/chemstation/#core-method","title":"Core Method","text":""},{"location":"api-reference/chemstation/#send","title":"send()","text":"<p>Send command directly to ChemStation Command Processor.</p> <pre><code>send(command: str, timeout: float = 5.0) -&gt; Optional[str]\n</code></pre> <p>Parameters: - <code>command</code>: ChemStation CP command string - <code>timeout</code>: Maximum wait time in seconds</p> <p>Returns: - Response string if command starts with \"response$ = \", otherwise None</p> <p>Example: <pre><code># Get value\nvoltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))')\n\n# Execute command\napi.send('LoadMethod _METHPATH$, \"MyMethod.M\"')\n</code></pre></p>"},{"location":"api-reference/chemstation/#ce-module","title":"CE Module","text":"<p>Capillary Electrophoresis instrument control.</p>"},{"location":"api-reference/chemstation/#methods","title":"Methods","text":""},{"location":"api-reference/chemstation/#load_vial_to_position","title":"load_vial_to_position()","text":"<p>Load vial from carousel to lift position.</p> <pre><code>ce.load_vial_to_position(vial: int, position: str = \"replenishment\") -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Carousel position (1-49) - <code>position</code>: Target position (\"inlet\", \"outlet\", \"replenishment\")</p> <p>Raises: - <code>VialError</code>: If vial not present - <code>ValueError</code>: If invalid position</p> <p>Example: <pre><code>api.ce.load_vial_to_position(15, \"inlet\")\n</code></pre></p>"},{"location":"api-reference/chemstation/#unload_vial_from_position","title":"unload_vial_from_position()","text":"<p>Return vial from lift position to carousel.</p> <pre><code>ce.unload_vial_from_position(position: str = \"replenishment\") -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: Lift position to unload from</p>"},{"location":"api-reference/chemstation/#get_vial_state","title":"get_vial_state()","text":"<p>Get current vial location.</p> <pre><code>ce.get_vial_state(vial: int) -&gt; str\n</code></pre> <p>Returns: - \"carousel\", \"inlet\", \"outlet\", \"replenishment\", or \"out_system\"</p>"},{"location":"api-reference/chemstation/#flush_capillary","title":"flush_capillary()","text":"<p>Perform high-pressure capillary flush.</p> <pre><code>ce.flush_capillary(time_flush: float, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>time_flush</code>: Flush duration in seconds - <code>wait</code>: Block until complete</p>"},{"location":"api-reference/chemstation/#apply_pressure_to_capillary","title":"apply_pressure_to_capillary()","text":"<p>Apply specific pressure for injection or conditioning.</p> <pre><code>ce.apply_pressure_to_capillary(pressure: float, time_pressure: float, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>pressure</code>: Pressure in mbar (-100 to +100) - <code>time_pressure</code>: Duration in seconds - <code>wait</code>: Block until complete</p>"},{"location":"api-reference/chemstation/#methods-module","title":"Methods Module","text":"<p>CE method management and execution.</p>"},{"location":"api-reference/chemstation/#methods_1","title":"Methods","text":""},{"location":"api-reference/chemstation/#load","title":"load()","text":"<p>Load CE method from file.</p> <pre><code>method.load(method_name: str, method_path: str = \"_METHPATH$\") -&gt; None\n</code></pre> <p>Parameters: - <code>method_name</code>: Method filename without .M extension - <code>method_path</code>: Directory path (default: ChemStation method directory)</p> <p>Raises: - <code>MethodError</code>: If method cannot be loaded - <code>ValidationError</code>: If method doesn't exist</p>"},{"location":"api-reference/chemstation/#save","title":"save()","text":"<p>Save current method.</p> <pre><code>method.save(method_name: str = \"_METHFILE$\", method_path: str = \"_METHPATH$\", \n           comment: str = \"\\\" \\\"\") -&gt; None\n</code></pre> <p>Parameters: - <code>method_name</code>: Filename for saved method - <code>method_path</code>: Save directory - <code>comment</code>: Optional method comment</p>"},{"location":"api-reference/chemstation/#run","title":"run()","text":"<p>Execute current method.</p> <pre><code>method.run(data_name: str, data_dir: str = \"_DATAPATH$\") -&gt; None\n</code></pre> <p>Parameters: - <code>data_name</code>: Name for data file - <code>data_dir</code>: Data storage directory</p>"},{"location":"api-reference/chemstation/#execution_method_with_parameters","title":"execution_method_with_parameters()","text":"<p>Execute method with custom parameters.</p> <pre><code>method.execution_method_with_parameters(\n    vial: int, \n    method_name: str,\n    sample_name: str = \"\", \n    comment: str = \"\",\n    subdirectory_name: str = \"\"\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Sample vial position - <code>method_name</code>: Method to execute - <code>sample_name</code>: Sample identifier - <code>comment</code>: Analysis comment - <code>subdirectory_name</code>: Data subdirectory</p>"},{"location":"api-reference/chemstation/#sequence-module","title":"Sequence Module","text":"<p>Batch analysis management.</p>"},{"location":"api-reference/chemstation/#methods_2","title":"Methods","text":""},{"location":"api-reference/chemstation/#load_sequence","title":"load_sequence()","text":"<p>Load sequence from file.</p> <pre><code>sequence.load_sequence(seq_name: str, seq_dir: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#save_sequence","title":"save_sequence()","text":"<p>Save current sequence.</p> <pre><code>sequence.save_sequence(seq_name: str = \"_SEQFILE$\", seq_dir: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#modify_sequence_row","title":"modify_sequence_row()","text":"<p>Modify sequence table row.</p> <pre><code>sequence.modify_sequence_row(\n    row: int,\n    vial_sample: str = \"\",\n    method: str = \"\",\n    sample_name: str = \"\",\n    sample_info: str = \"\",\n    data_file_name: str = \"\"\n) -&gt; None\n</code></pre> <p>Parameters: - <code>row</code>: Row number (1-based) - Other parameters: Optional updates (empty = no change)</p>"},{"location":"api-reference/chemstation/#prepare_sequence_table","title":"prepare_sequence_table()","text":"<p>Import sequence from Excel.</p> <pre><code>sequence.prepare_sequence_table(\n    excel_file_path: str,\n    sequence_name: str = None,\n    sheet_name: int = 0,\n    vial_column: str = None,\n    method_column: str = None,\n    sample_name_column: str = None,\n    sample_info_column: str = None,\n    filename_column: str = None,\n    replicate_column: str = None\n) -&gt; None\n</code></pre> <p>Parameters: - <code>excel_file_path</code>: Path to Excel file - <code>sequence_name</code>: Sequence to load first - <code>sheet_name</code>: Worksheet index - Column parameters: Excel column names</p>"},{"location":"api-reference/chemstation/#sequence-control","title":"Sequence Control","text":"<pre><code>sequence.start() -&gt; None     # Start sequence execution\nsequence.pause() -&gt; None     # Pause after current sample\nsequence.resume() -&gt; None    # Resume paused sequence\n</code></pre>"},{"location":"api-reference/chemstation/#system-module","title":"System Module","text":"<p>System status monitoring and control.</p>"},{"location":"api-reference/chemstation/#methods_3","title":"Methods","text":""},{"location":"api-reference/chemstation/#method_on","title":"method_on()","text":"<p>Check if method is running.</p> <pre><code>system.method_on() -&gt; bool\n</code></pre> <p>Returns: - True if method executing, False if idle</p>"},{"location":"api-reference/chemstation/#status","title":"status()","text":"<p>Get acquisition status.</p> <pre><code>system.status() -&gt; str\n</code></pre> <p>Returns: - \"STANDBY\", \"PRERUN\", \"RUN\", \"POSTRUN\", \"ERROR\", \"ABORT\"</p>"},{"location":"api-reference/chemstation/#rc_status","title":"RC_status()","text":"<p>Get RC module status.</p> <pre><code>system.RC_status(module: str = \"CE1\") -&gt; str\n</code></pre> <p>Returns: - \"Idle\", \"Run\", \"NotReady\", \"Error\", \"Maintenance\"</p>"},{"location":"api-reference/chemstation/#wait_for_ready","title":"wait_for_ready()","text":"<p>Wait for system ready state.</p> <pre><code>system.wait_for_ready(timeout: int = 60) -&gt; bool\n</code></pre> <p>Parameters: - <code>timeout</code>: Maximum wait time in seconds</p> <p>Returns: - True if ready within timeout, False otherwise</p>"},{"location":"api-reference/chemstation/#time-monitoring","title":"Time Monitoring","text":"<pre><code>system.get_elapsed_analysis_time() -&gt; float    # Minutes elapsed\nsystem.get_analysis_time() -&gt; float             # Total expected minutes\nsystem.get_remaining_analysis_time() -&gt; float   # Minutes remaining\n</code></pre>"},{"location":"api-reference/chemstation/#abort_run","title":"abort_run()","text":"<p>Emergency stop current operation.</p> <pre><code>system.abort_run() -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#add_register_reader","title":"add_register_reader()","text":"<p>Add register inspection tool to ChemStation menu.</p> <pre><code>system.add_register_reader(register_reader_macro: str = \"...\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#validation-module","title":"Validation Module","text":"<p>Input validation and system checks.</p>"},{"location":"api-reference/chemstation/#methods_4","title":"Methods","text":""},{"location":"api-reference/chemstation/#validate_method_name","title":"validate_method_name()","text":"<p>Check method file exists.</p> <pre><code>validation.validate_method_name(method: str, dir_path: str = \"_METHPATH$\") -&gt; None\n</code></pre> <p>Raises: - <code>ValidationError</code>: If method not found</p>"},{"location":"api-reference/chemstation/#validate_sequence_name","title":"validate_sequence_name()","text":"<p>Check sequence file exists.</p> <pre><code>validation.validate_sequence_name(sequence: str, dir_path: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#validate_vial_in_system","title":"validate_vial_in_system()","text":"<p>Check vial presence.</p> <pre><code>validation.validate_vial_in_system(vial: int) -&gt; None\n</code></pre> <p>Raises: - <code>VialError</code>: If vial not detected</p>"},{"location":"api-reference/chemstation/#vial_in_position","title":"vial_in_position()","text":"<p>Check vial at lift position.</p> <pre><code>validation.vial_in_position(position: str) -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: \"inlet\", \"outlet\", or \"replenishment\"</p>"},{"location":"api-reference/chemstation/#validate_use_carousel","title":"validate_use_carousel()","text":"<p>Check carousel availability.</p> <pre><code>validation.validate_use_carousel() -&gt; None\n</code></pre> <p>Raises: - <code>SystemError</code>: If carousel not available</p>"},{"location":"api-reference/chemstation/#validate_method_run","title":"validate_method_run()","text":"<p>Check method started successfully.</p> <pre><code>validation.validate_method_run() -&gt; None\n</code></pre> <p>Raises: - <code>MethodError</code>: If method not running</p>"},{"location":"api-reference/chemstation/#get_vialtable","title":"get_vialtable()","text":"<p>Get all vial positions status.</p> <pre><code>validation.get_vialtable() -&gt; Dict[int, bool]\n</code></pre> <p>Returns: - Dictionary mapping position (1-48) to presence (True/False)</p>"},{"location":"api-reference/chemstation/#list_vial_validation","title":"list_vial_validation()","text":"<p>Validate multiple vials.</p> <pre><code>validation.list_vial_validation(vials: list) -&gt; None\n</code></pre> <p>Raises: - <code>VialError</code>: Lists all missing vials</p>"},{"location":"api-reference/chemstation/#configuration","title":"Configuration","text":""},{"location":"api-reference/chemstation/#communicationconfig","title":"CommunicationConfig","text":"<p>Configuration class for ChemStation communication.</p> <pre><code>@dataclass\nclass CommunicationConfig:\n    comm_dir: str = \"core/communication_files\"\n    command_filename: str = \"command\"\n    response_filename: str = \"response\"\n    max_command_number: int = 256\n    default_timeout: float = 5.0\n    retry_delay: float = 0.1\n    max_retries: int = 10\n    test_on_init: bool = True\n    verbose: bool = False\n</code></pre> <p>Example: <pre><code>config = CommunicationConfig(\n    verbose=True,\n    default_timeout=10.0,\n    test_on_init=False\n)\napi = ChemstationAPI(config)\n</code></pre></p>"},{"location":"api-reference/chemstation/#common-patterns","title":"Common Patterns","text":""},{"location":"api-reference/chemstation/#complete-analysis","title":"Complete Analysis","text":"<pre><code># Standard analysis workflow\ndef analyze_sample(vial, method, name):\n    # Validate\n    api.validation.validate_vial_in_system(vial)\n    api.validation.validate_method_name(method)\n\n    # Load vials\n    api.ce.load_vial_to_position(vial, \"inlet\")\n    api.ce.load_vial_to_position(48, \"outlet\")\n\n    # Condition\n    api.ce.flush_capillary(60)\n\n    # Run\n    api.method.load(method)\n    api.method.run(name)\n\n    # Monitor\n    while api.system.method_on():\n        print(f\"{api.system.get_remaining_analysis_time():.1f} min remaining\")\n        time.sleep(30)\n\n    # Cleanup\n    api.ce.unload_vial_from_position(\"inlet\")\n    api.ce.unload_vial_from_position(\"outlet\")\n</code></pre>"},{"location":"api-reference/chemstation/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept VialError:\n    print(\"Vial not found - check carousel\")\nexcept SystemError:\n    print(\"System busy - wait and retry\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n    api.system.abort_run()\n</code></pre>"},{"location":"api-reference/chemstation/#sequence-creation","title":"Sequence Creation","text":"<pre><code># Create sequence from data\nsamples = [\n    (10, \"Method1\", \"Sample1\"),\n    (11, \"Method2\", \"Sample2\"),\n    (12, \"Method1\", \"Sample3\")\n]\n\nfor row, (vial, method, name) in enumerate(samples, 1):\n    api.sequence.modify_sequence_row(\n        row=row,\n        vial_sample=str(vial),\n        method=method,\n        sample_name=name\n    )\n\napi.sequence.save_sequence(\"MySequence\")\napi.sequence.start()\n</code></pre>"},{"location":"api-reference/error-handling/","title":"Error Handling Reference","text":"<p>Comprehensive guide to exception types and error handling strategies in SIA-CE.</p>"},{"location":"api-reference/error-handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>ChemstationError (base)\n\u251c\u2500\u2500 CommunicationError\n\u251c\u2500\u2500 CommandError\n\u251c\u2500\u2500 FileOperationError\n\u251c\u2500\u2500 SequenceError\n\u251c\u2500\u2500 MethodError\n\u251c\u2500\u2500 VialError\n\u251c\u2500\u2500 ConfigurationError\n\u251c\u2500\u2500 ValidationError\n\u2514\u2500\u2500 TimeoutError\n</code></pre>"},{"location":"api-reference/error-handling/#exception-types","title":"Exception Types","text":""},{"location":"api-reference/error-handling/#chemstationerror","title":"ChemstationError","text":"<p>Base exception for all ChemStation-related errors.</p> <pre><code>try:\n    # Any ChemStation operation\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept ChemstationError as e:\n    print(f\"ChemStation error: {e}\")\n    # Catches any ChemStation-related exception\n</code></pre>"},{"location":"api-reference/error-handling/#communicationerror","title":"CommunicationError","text":"<p>File-based communication system failures.</p> <p>Common Causes: - ChemStation macro not running - Communication files not accessible - Protocol synchronization errors</p> <p>Example: <pre><code>try:\n    api = ChemstationAPI()\nexcept CommunicationError as e:\n    print(\"Failed to connect to ChemStation\")\n    print(\"Check that macro is running\")\n    # Start macro: macro \"path\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p>"},{"location":"api-reference/error-handling/#commanderror","title":"CommandError","text":"<p>ChemStation command execution failures.</p> <p>Common Causes: - Invalid command syntax - Wrong parameter values - Instrument state conflicts</p> <p>Example: <pre><code>try:\n    api.send(\"InvalidCommand parameter\")\nexcept CommandError as e:\n    print(f\"Command rejected: {e}\")\n    # Check command syntax in ChemStation documentation\n</code></pre></p>"},{"location":"api-reference/error-handling/#fileoperationerror","title":"FileOperationError","text":"<p>File system operation failures.</p> <p>Common Causes: - Insufficient permissions - Disk space issues - File locked by another process</p> <p>Example: <pre><code>try:\n    api.method.save(\"NewMethod\")\nexcept FileOperationError as e:\n    print(f\"Cannot save file: {e}\")\n    # Check disk space and permissions\n</code></pre></p>"},{"location":"api-reference/error-handling/#sequenceerror","title":"SequenceError","text":"<p>Sequence management failures.</p> <p>Common Causes: - Sequence file not found - Invalid sequence parameters - Excel import issues</p> <p>Example: <pre><code>try:\n    api.sequence.prepare_sequence_table(\"samples.xlsx\")\nexcept SequenceError as e:\n    print(f\"Sequence error: {e}\")\n    # Check Excel file format and accessibility\n</code></pre></p>"},{"location":"api-reference/error-handling/#methoderror","title":"MethodError","text":"<p>CE method operation failures.</p> <p>Common Causes: - Method file not found - Method execution startup failure - Invalid method parameters</p> <p>Example: <pre><code>try:\n    api.method.run(\"Sample001\")\nexcept MethodError as e:\n    print(f\"Method failed: {e}\")\n    # Check instrument status and method parameters\n</code></pre></p>"},{"location":"api-reference/error-handling/#vialerror","title":"VialError","text":"<p>Vial handling failures.</p> <p>Common Causes: - Vial not present in carousel - Mechanical loading failure - Position out of range</p> <p>Example: <pre><code>try:\n    api.ce.load_vial_to_position(99, \"inlet\")\nexcept VialError as e:\n    print(f\"Vial error: {e}\")\n    # Check vial presence and position\n</code></pre></p>"},{"location":"api-reference/error-handling/#configurationerror","title":"ConfigurationError","text":"<p>System configuration failures.</p> <p>Common Causes: - Invalid configuration parameters - Directory creation failure - Missing required files</p> <p>Example: <pre><code>try:\n    config = CommunicationConfig(comm_dir=\"/invalid/path\")\n    api = ChemstationAPI(config)\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n    # Check paths and permissions\n</code></pre></p>"},{"location":"api-reference/error-handling/#validationerror","title":"ValidationError","text":"<p>Input validation failures.</p> <p>Common Causes: - File not found - Invalid parameter values - System not ready</p> <p>Example: <pre><code>try:\n    api.validation.validate_method_name(\"NonexistentMethod\")\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n    # Check file existence and naming\n</code></pre></p>"},{"location":"api-reference/error-handling/#timeouterror","title":"TimeoutError","text":"<p>Operation timeout failures.</p> <p>Common Causes: - ChemStation not responding - Long operations exceeding timeout - Communication delays</p> <p>Example: <pre><code>try:\n    response = api.send(\"LongCommand\", timeout=5.0)\nexcept TimeoutError as e:\n    print(f\"Timeout: {e}\")\n    # Increase timeout or check ChemStation status\n</code></pre></p>"},{"location":"api-reference/error-handling/#error-handling-strategies","title":"Error Handling Strategies","text":""},{"location":"api-reference/error-handling/#1-defensive-programming","title":"1. Defensive Programming","text":"<p>Always validate before operations:</p> <pre><code>def safe_vial_load(api, vial, position):\n    \"\"\"Load vial with validation.\"\"\"\n    try:\n        # Validate first\n        api.validation.validate_vial_in_system(vial)\n        api.validation.validate_use_carousel()\n\n        # Then execute\n        api.ce.load_vial_to_position(vial, position)\n        return True\n\n    except VialError as e:\n        print(f\"Vial {vial} not available: {e}\")\n        return False\n    except SystemError as e:\n        print(f\"System not ready: {e}\")\n        return False\n</code></pre>"},{"location":"api-reference/error-handling/#2-retry-logic","title":"2. Retry Logic","text":"<p>Implement retry for transient failures:</p> <pre><code>def retry_operation(func, max_attempts=3, delay=5):\n    \"\"\"Retry operation with exponential backoff.\"\"\"\n    for attempt in range(max_attempts):\n        try:\n            return func()\n        except (TimeoutError, CommunicationError) as e:\n            if attempt == max_attempts - 1:\n                raise\n            wait_time = delay * (2 ** attempt)\n            print(f\"Attempt {attempt + 1} failed, waiting {wait_time}s\")\n            time.sleep(wait_time)\n\n# Usage\nresult = retry_operation(lambda: api.send(\"response$ = _METHPATH$\"))\n</code></pre>"},{"location":"api-reference/error-handling/#3-context-managers","title":"3. Context Managers","text":"<p>Use context managers for cleanup:</p> <pre><code>class VialLoader:\n    \"\"\"Context manager for vial operations.\"\"\"\n\n    def __init__(self, api, vial, position):\n        self.api = api\n        self.vial = vial\n        self.position = position\n\n    def __enter__(self):\n        self.api.ce.load_vial_to_position(self.vial, self.position)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        # Always unload, even if error occurred\n        try:\n            self.api.ce.unload_vial_from_position(self.position)\n        except:\n            pass  # Best effort cleanup\n\n# Usage\nwith VialLoader(api, 15, \"inlet\") as loader:\n    # Vial operations\n    api.ce.flush_capillary(60)\n# Vial automatically unloaded\n</code></pre>"},{"location":"api-reference/error-handling/#4-error-recovery","title":"4. Error Recovery","text":"<p>Implement recovery procedures:</p> <pre><code>class AnalysisRunner:\n    \"\"\"Run analysis with error recovery.\"\"\"\n\n    def __init__(self, api):\n        self.api = api\n        self.recovery_actions = {\n            VialError: self.recover_from_vial_error,\n            MethodError: self.recover_from_method_error,\n            TimeoutError: self.recover_from_timeout\n        }\n\n    def run_analysis(self, vial, method, sample):\n        try:\n            self.api.method.execution_method_with_parameters(\n                vial=vial,\n                method_name=method,\n                sample_name=sample\n            )\n        except tuple(self.recovery_actions.keys()) as e:\n            # Try recovery\n            recovery_func = self.recovery_actions[type(e)]\n            if recovery_func(e):\n                # Retry after recovery\n                return self.run_analysis(vial, method, sample)\n            else:\n                raise\n\n    def recover_from_vial_error(self, error):\n        print(\"Attempting vial recovery...\")\n        # Check vial presence\n        # Try reloading\n        # Return True if recovered\n        return False\n\n    def recover_from_method_error(self, error):\n        print(\"Attempting method recovery...\")\n        self.api.system.abort_run()\n        time.sleep(30)\n        return True\n\n    def recover_from_timeout(self, error):\n        print(\"Attempting timeout recovery...\")\n        # Check system status\n        # Wait for ready\n        return self.api.system.wait_for_ready(60)\n</code></pre>"},{"location":"api-reference/error-handling/#5-logging-errors","title":"5. Logging Errors","text":"<p>Comprehensive error logging:</p> <pre><code>import logging\nfrom datetime import datetime\n\n# Configure logging\nlogging.basicConfig(\n    filename=f'sia_ce_{datetime.now().strftime(\"%Y%m%d\")}.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\ndef logged_operation(func):\n    \"\"\"Decorator for error logging.\"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            result = func(*args, **kwargs)\n            logging.info(f\"{func.__name__} completed successfully\")\n            return result\n        except Exception as e:\n            logging.error(f\"{func.__name__} failed: {type(e).__name__}: {e}\")\n            raise\n    return wrapper\n\n@logged_operation\ndef critical_analysis(api, vial, method):\n    api.method.execution_method_with_parameters(\n        vial=vial,\n        method_name=method,\n        sample_name=\"Critical_Sample\"\n    )\n</code></pre>"},{"location":"api-reference/error-handling/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"api-reference/error-handling/#scenario-1-chemstation-not-responding","title":"Scenario 1: ChemStation Not Responding","text":"<pre><code>def handle_chemstation_timeout():\n    try:\n        api = ChemstationAPI()\n    except (ConnectionError, TimeoutError):\n        print(\"ChemStation not responding\")\n        print(\"1. Check ChemStation is running\")\n        print(\"2. Execute macro command:\")\n        print('   macro \"path\\\\ChemPyConnect.mac\"; Python_Run')\n        print(\"3. Check communication files accessible\")\n        return None\n    return api\n</code></pre>"},{"location":"api-reference/error-handling/#scenario-2-batch-processing-with-failures","title":"Scenario 2: Batch Processing with Failures","text":"<pre><code>def robust_batch_processing(api, samples):\n    \"\"\"Process batch with failure tracking.\"\"\"\n    results = {\n        'success': [],\n        'failed': [],\n        'errors': []\n    }\n\n    for sample in samples:\n        try:\n            # Process sample\n            api.method.execution_method_with_parameters(**sample)\n            results['success'].append(sample['sample_name'])\n\n        except VialError as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Vial error: {e}\")\n\n        except MethodError as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Method error: {e}\")\n            # Try to recover for next sample\n            api.system.abort_run()\n            time.sleep(60)\n\n        except Exception as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Unexpected: {e}\")\n\n    return results\n</code></pre>"},{"location":"api-reference/error-handling/#scenario-3-sia-volume-overflow","title":"Scenario 3: SIA Volume Overflow","text":"<pre><code>def safe_volume_operations(syringe, operations):\n    \"\"\"Execute volume operations with overflow protection.\"\"\"\n\n    for op_type, volume in operations:\n        try:\n            if op_type == 'aspirate':\n                # Check before aspirating\n                if syringe.volume_counter + volume &gt; syringe.syringe_size:\n                    # Dispense first\n                    syringe.dispense()\n                syringe.aspirate(volume)\n\n            elif op_type == 'dispense':\n                if volume &gt; syringe.volume_counter:\n                    raise ValueError(f\"Insufficient volume: {syringe.volume_counter} \u00b5L available\")\n                syringe.dispense(volume)\n\n        except ValueError as e:\n            print(f\"Volume error: {e}\")\n            # Handle based on operation requirements\n            raise\n</code></pre>"},{"location":"api-reference/error-handling/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Specific Exception Handling <pre><code># Good - Specific handling\ntry:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept VialError:\n    # Handle missing vial\nexcept SystemError:\n    # Handle busy system\n\n# Bad - Too broad\ntry:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept Exception:\n    # Don't know what went wrong\n</code></pre></p> </li> <li> <p>Always Clean Up <pre><code>try:\n    # Operations\nfinally:\n    # Cleanup always executes\n    api.ce.unload_vial_from_position(\"inlet\")\n</code></pre></p> </li> <li> <p>Fail Fast <pre><code># Validate everything first\napi.validation.validate_vial_in_system(vial)\napi.validation.validate_method_name(method)\napi.validation.validate_use_carousel()\n\n# Then execute\n# ...\n</code></pre></p> </li> <li> <p>Informative Error Messages <pre><code>if not vial_present:\n    raise VialError(\n        f\"Vial {vial} not found in carousel. \"\n        f\"Check position {vial} is occupied.\"\n    )\n</code></pre></p> </li> <li> <p>Document Expected Exceptions <pre><code>def load_vial(vial: int, position: str) -&gt; None:\n    \"\"\"Load vial to position.\n\n    Raises:\n        VialError: If vial not present\n        SystemError: If carousel busy\n        ValueError: If invalid position\n    \"\"\"\n</code></pre></p> </li> </ol>"},{"location":"api-reference/sia/","title":"SIA API Reference","text":"<p>Complete API documentation for Sequential Injection Analysis control.</p>"},{"location":"api-reference/sia/#syringecontroller","title":"SyringeController","text":"<p>Syringe pump control for precise liquid handling.</p>"},{"location":"api-reference/sia/#constructor","title":"Constructor","text":"<pre><code>SyringeController(\n    port: str,\n    syringe_size: int,\n    address: str = \"/1\",\n    prefix: str = \"\",\n    baudrate: int = 9600,\n    print_info: bool = True\n)\n</code></pre> <p>Parameters: - <code>port</code>: COM port (e.g., \"COM3\") - <code>syringe_size</code>: Volume in microliters (100-5000) - <code>address</code>: Device address (default: \"/1\") - <code>prefix</code>: Command prefix for protocols - <code>baudrate</code>: Serial speed (default: 9600) - <code>print_info</code>: Display specifications on init</p> <p>Example: <pre><code>from SIA_API.devices import SyringeController\n\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\n</code></pre></p>"},{"location":"api-reference/sia/#attributes","title":"Attributes","text":"<ul> <li><code>syringe_size</code>: Syringe capacity in \u00b5L</li> <li><code>volume_counter</code>: Current volume in syringe</li> <li><code>VALVE_TYPES_DICT</code>: Supported valve configurations</li> </ul>"},{"location":"api-reference/sia/#methods","title":"Methods","text":""},{"location":"api-reference/sia/#initialize","title":"initialize()","text":"<p>Initialize syringe to home position.</p> <pre><code>syringe.initialize() -&gt; None\n</code></pre> <p>Effects: - Moves to absolute zero position - Resets volume counter to 0 - Uses Z/Z1/Z2 command based on size</p>"},{"location":"api-reference/sia/#aspirate","title":"aspirate()","text":"<p>Draw fluid into syringe.</p> <pre><code>syringe.aspirate(volume: Optional[float] = None, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>volume</code>: Volume in \u00b5L (None = fill completely) - <code>wait</code>: Block until complete</p> <p>Raises: - <code>ValueError</code>: If volume exceeds capacity</p> <p>Example: <pre><code>syringe.aspirate(500)    # Draw 500 \u00b5L\nsyringe.aspirate()       # Fill entire syringe\n</code></pre></p>"},{"location":"api-reference/sia/#dispense","title":"dispense()","text":"<p>Expel fluid from syringe.</p> <pre><code>syringe.dispense(volume: Optional[float] = None, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>volume</code>: Volume in \u00b5L (None = empty completely) - <code>wait</code>: Block until complete</p> <p>Raises: - <code>ValueError</code>: If volume exceeds current content</p>"},{"location":"api-reference/sia/#set_speed_ul_min","title":"set_speed_uL_min()","text":"<p>Set flow rate.</p> <pre><code>syringe.set_speed_uL_min(speed: float) -&gt; None\n</code></pre> <p>Parameters: - <code>speed</code>: Flow rate in \u00b5L/min</p> <p>Limits: - Minimum: 0.05 \u00d7 syringe_size - Maximum: 60 \u00d7 syringe_size</p>"},{"location":"api-reference/sia/#configuration_valve_type","title":"configuration_valve_type()","text":"<p>Configure attached valve type.</p> <pre><code>syringe.configuration_valve_type(valve_type: str) -&gt; None\n</code></pre> <p>Parameters: - <code>valve_type</code>: Type from VALVE_TYPES_DICT</p> <p>Options: - 'No', '3-Port', '4-Port', '6-Port distribution', etc.</p>"},{"location":"api-reference/sia/#valve-control","title":"Valve Control","text":"<pre><code>syringe.valve_in() -&gt; None    # Switch to input\nsyringe.valve_out() -&gt; None   # Switch to output  \nsyringe.valve_up() -&gt; None    # Switch to up/bypass\n</code></pre>"},{"location":"api-reference/sia/#utility-methods","title":"Utility Methods","text":"<pre><code>syringe.wait_for_syringe()           # Wait for operation\nsyringe.print_volume_in_syringe()    # Display current volume\n</code></pre>"},{"location":"api-reference/sia/#valveselector","title":"ValveSelector","text":"<p>Multi-position valve control for fluid routing.</p>"},{"location":"api-reference/sia/#constructor_1","title":"Constructor","text":"<pre><code>ValveSelector(\n    port: str,\n    num_positions: int = 8,\n    prefix: str = \"/Z\",\n    address: str = \"\",\n    baudrate: int = 9600\n)\n</code></pre> <p>Parameters: - <code>port</code>: COM port (e.g., \"COM4\") - <code>num_positions</code>: Number of valve positions - <code>prefix</code>: Command prefix (default: \"/Z\") - <code>address</code>: Device address (usually empty) - <code>baudrate</code>: Serial speed</p> <p>Example: <pre><code>from SIA_API.devices import ValveSelector\n\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n</code></pre></p>"},{"location":"api-reference/sia/#methods_1","title":"Methods","text":""},{"location":"api-reference/sia/#position","title":"position()","text":"<p>Move valve to position.</p> <pre><code>valve.position(position: int, num_attempts: int = 3) -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: Target position (1 to num_positions) - <code>num_attempts</code>: Retry attempts for reliability</p> <p>Raises: - <code>ValueError</code>: If position out of range</p>"},{"location":"api-reference/sia/#preparedsiamethods","title":"PreparedSIAMethods","text":"<p>High-level workflows for automated procedures.</p>"},{"location":"api-reference/sia/#constructor_2","title":"Constructor","text":"<pre><code>PreparedSIAMethods(\n    chemstation_controller,\n    syringe_device: SyringeController,\n    valve_device: ValveSelector,\n    ports_config: Optional[PortConfig] = None\n)\n</code></pre> <p>Parameters: - <code>chemstation_controller</code>: ChemStation API instance - <code>syringe_device</code>: Initialized syringe controller - <code>valve_device</code>: Initialized valve selector - <code>ports_config</code>: Port configuration (default if None)</p> <p>Example: <pre><code>from SIA_API.methods import PreparedSIAMethods\n\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\n</code></pre></p>"},{"location":"api-reference/sia/#system-methods","title":"System Methods","text":""},{"location":"api-reference/sia/#system_initialization_and_cleaning","title":"system_initialization_and_cleaning()","text":"<p>Complete system initialization.</p> <pre><code>workflow.system_initialization_and_cleaning(\n    waste_vial: int = 50,\n    bubble: int = 20,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>waste_vial</code>: Vial for waste collection - <code>bubble</code>: Separating bubble size (\u00b5L) - <code>**port_overrides</code>: Override default ports</p> <p>Process: 1. Syringe initialization 2. Loop flushing 3. Methanol cleaning 4. DI water rinse 5. Transfer line conditioning</p>"},{"location":"api-reference/sia/#continuous-flow-methods","title":"Continuous Flow Methods","text":""},{"location":"api-reference/sia/#prepare_continuous_flow","title":"prepare_continuous_flow()","text":"<p>Setup for continuous dispensing.</p> <pre><code>workflow.prepare_continuous_flow(\n    solvent_port: int,\n    waste_vial: int = 50,\n    bubble_volume: int = 10,\n    solvent_holding_coil_volume: int = 10,\n    transfer_coil_flush: int = 500,\n    holding_coil_flush: int = 1000,\n    speed: int = 1500,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>solvent_port</code>: Port with solvent - <code>waste_vial</code>: Waste collection vial - <code>bubble_volume</code>: Air bubble size - <code>solvent_holding_coil_volume</code>: Solvent at coil end - <code>transfer_coil_flush</code>: Transfer line flush volume - <code>holding_coil_flush</code>: Holding coil flush volume - <code>speed</code>: Flow rate (\u00b5L/min)</p>"},{"location":"api-reference/sia/#continuous_fill","title":"continuous_fill()","text":"<p>Execute continuous filling.</p> <pre><code>workflow.continuous_fill(\n    vial: int,\n    volume: int,\n    solvent_port: int,\n    flush_needle: Optional[int] = None,\n    wash_vial: int = 48,\n    speed: int = 2000,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Target vial (1-50) - <code>volume</code>: Dispensing volume (\u00b5L) - <code>solvent_port</code>: Solvent source port - <code>flush_needle</code>: Needle wash volume - <code>wash_vial</code>: Vial for washing - <code>speed</code>: Dispensing speed</p>"},{"location":"api-reference/sia/#batch-flow-methods","title":"Batch Flow Methods","text":""},{"location":"api-reference/sia/#prepare_batch_flow","title":"prepare_batch_flow()","text":"<p>Setup for batch dispensing.</p> <pre><code>workflow.prepare_batch_flow(\n    solvent_port: int,\n    waste_vial: int = 50,\n    bubble_volume: int = 10,\n    transfer_coil_volume: int = 300,\n    coil_flush: int = 150,\n    speed: int = 1500,\n    **port_overrides\n) -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#batch_fill","title":"batch_fill()","text":"<p>Execute batch filling.</p> <pre><code>workflow.batch_fill(\n    vial: int,\n    volume: int,\n    solvent_port: int,\n    transfer_line_volume: int = 300,\n    bubble_volume: int = 10,\n    flush_needle: Optional[int] = None,\n    speed: int = 2000,\n    unload: bool = True,\n    wait: Optional[int] = None,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Additional Parameters: - <code>transfer_line_volume</code>: Volume of transfer line - <code>unload</code>: Return vial after filling - <code>wait</code>: Wait time after dispensing (seconds)</p>"},{"location":"api-reference/sia/#sample-processing","title":"Sample Processing","text":""},{"location":"api-reference/sia/#homogenize_sample","title":"homogenize_sample()","text":"<p>Mix sample using pneumatic agitation.</p> <pre><code>workflow.homogenize_sample(\n    vial: int,\n    speed: int,\n    homogenization_time: float,\n    flush_needle: Optional[int] = None,\n    unload: bool = True,\n    air_speed: int = 5000,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Target vial - <code>speed</code>: Bubbling speed (\u00b5L/min) - <code>homogenization_time</code>: Duration (seconds) - <code>flush_needle</code>: Needle wash volume - <code>unload</code>: Return vial when done - <code>air_speed</code>: Air aspiration speed</p>"},{"location":"api-reference/sia/#clean_needle","title":"clean_needle()","text":"<p>Clean dispensing needle.</p> <pre><code>workflow.clean_needle(\n    volume_flush: float,\n    wash_vial: int = 48\n) -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#utility-methods_1","title":"Utility Methods","text":"<pre><code>workflow.load_to_replenishment(vial_number: int) -&gt; None\nworkflow.unload_from_replenishment() -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#configuration","title":"Configuration","text":""},{"location":"api-reference/sia/#portconfig","title":"PortConfig","text":"<p>Port assignment configuration.</p> <pre><code>from SIA_API.methods import PortConfig\n\n@dataclass\nclass PortConfig:\n    waste_port: int = 1\n    air_port: int = 2  \n    di_port: int = 3\n    transfer_port: int = 4\n    meoh_port: int = 5\n</code></pre>"},{"location":"api-reference/sia/#create_custom_config","title":"create_custom_config()","text":"<p>Create custom port configuration.</p> <pre><code>from SIA_API.methods import create_custom_config\n\nconfig = create_custom_config(\n    waste_port=8,\n    air_port=1,\n    di_port=2,\n    transfer_port=3,\n    meoh_port=4\n)\n</code></pre>"},{"location":"api-reference/sia/#commandsender","title":"CommandSender","text":"<p>Base class for serial communication.</p>"},{"location":"api-reference/sia/#constructor_3","title":"Constructor","text":"<pre><code>CommandSender(\n    port: str,\n    prefix: str = \"\",\n    address: str = \"\",\n    baudrate: int = 9600\n)\n</code></pre>"},{"location":"api-reference/sia/#methods_2","title":"Methods","text":""},{"location":"api-reference/sia/#send_command","title":"send_command()","text":"<p>Send command with optional response.</p> <pre><code>send_command(\n    command: str,\n    wait_for_completion: callable = None,\n    get_response: bool = False,\n    response_timeout: float = 3\n) -&gt; Optional[str]\n</code></pre> <p>Parameters: - <code>command</code>: Command string - <code>wait_for_completion</code>: Function to call while waiting - <code>get_response</code>: Capture device response - <code>response_timeout</code>: Response wait time</p>"},{"location":"api-reference/sia/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api-reference/sia/#basic-liquid-transfer","title":"Basic Liquid Transfer","text":"<pre><code># Simple transfer\ndef transfer(source, dest, volume):\n    valve.position(source)\n    syringe.aspirate(volume)\n    valve.position(dest)\n    syringe.dispense(volume)\n\ntransfer(3, 6, 500)  # 500 \u00b5L from port 3 to 6\n</code></pre>"},{"location":"api-reference/sia/#dilution-series","title":"Dilution Series","text":"<pre><code># Create 1:2 dilution series\ndef dilution_series(stock_port, vials, diluent_port=3):\n    for i, vial in enumerate(vials):\n        # Add diluent\n        workflow.batch_fill(\n            vial=vial,\n            volume=500,\n            solvent_port=diluent_port\n        )\n\n        # Add stock (manual or automated)\n        if i == 0:\n            # First vial - add from stock\n            stock_volume = 500\n        else:\n            # Serial dilution from previous\n            stock_volume = 500\n            # Transfer from vials[i-1]\n</code></pre>"},{"location":"api-reference/sia/#multi-solvent-preparation","title":"Multi-Solvent Preparation","text":"<pre><code># Different solvents for different samples\npreparations = [\n    (10, 3, 1000),  # Vial 10: 1000 \u00b5L water\n    (11, 5, 750),   # Vial 11: 750 \u00b5L methanol\n    (12, 6, 500),   # Vial 12: 500 \u00b5L buffer\n]\n\nfor vial, port, volume in preparations:\n    workflow.prepare_batch_flow(solvent_port=port)\n    workflow.batch_fill(vial=vial, volume=volume, solvent_port=port)\n</code></pre>"},{"location":"api-reference/sia/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    syringe.aspirate(1500)  # Too much!\nexcept ValueError as e:\n    print(f\"Volume error: {e}\")\n    # Handle overflow\n\ntry:\n    valve.position(15)  # Invalid position\nexcept ValueError as e:\n    print(f\"Position error: {e}\")\n</code></pre>"},{"location":"api-reference/sia/#system-state-management","title":"System State Management","text":"<pre><code>class SIASystem:\n    def __init__(self):\n        self.syringe = SyringeController(\"COM3\", 1000)\n        self.valve = ValveSelector(\"COM4\", 8)\n        self.current_solvent = None\n\n    def switch_solvent(self, new_solvent_port):\n        if self.current_solvent != new_solvent_port:\n            # Flush system\n            self.flush_line()\n            self.current_solvent = new_solvent_port\n</code></pre>"},{"location":"api-reference/sia/#performance-tips","title":"Performance Tips","text":"<ol> <li>Speed Optimization</li> <li>Air: 5000 \u00b5L/min</li> <li>Water: 3500 \u00b5L/min</li> <li>Organic: 2500 \u00b5L/min</li> <li> <p>Viscous: 1000 \u00b5L/min</p> </li> <li> <p>Volume Efficiency</p> </li> <li>Minimize dead volumes</li> <li>Use air gaps for separation</li> <li> <p>Plan aspiration order</p> </li> <li> <p>Error Prevention</p> </li> <li>Always initialize first</li> <li>Track volume state</li> <li> <p>Validate before operations</p> </li> <li> <p>Maintenance</p> </li> <li>Regular system flush</li> <li>Clean after viscous samples</li> <li>Check for air bubbles</li> </ol>"},{"location":"appendix/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and solutions for SIA-CE integration.</p>"},{"location":"appendix/faq/#general-questions","title":"General Questions","text":""},{"location":"appendix/faq/#what-is-sia-ce","title":"What is SIA-CE?","text":"<p>SIA-CE is a Python package that integrates Sequential Injection Analysis (SIA) with Capillary Electrophoresis (CE) through Agilent ChemStation. It enables: - Automated sample preparation - CE instrument control - Batch analysis workflows - Complete analytical automation</p>"},{"location":"appendix/faq/#which-hardware-is-supported","title":"Which hardware is supported?","text":"<p>CE Systems: - Agilent 7100 Capillary Electrophoresis System - Other ChemStation-compatible CE instruments</p> <p>SIA Components: - Hamilton MVP series syringe pumps - VICI/Valco valve selectors - Compatible third-party devices with similar command sets</p>"},{"location":"appendix/faq/#do-i-need-programming-experience","title":"Do I need programming experience?","text":"<p>Basic Python knowledge is helpful but not required. The package provides: - High-level workflow methods - Pre-built analytical procedures - Copy-paste examples - Comprehensive documentation</p>"},{"location":"appendix/faq/#installation-issues","title":"Installation Issues","text":""},{"location":"appendix/faq/#q-chemstation-connection-fails-on-startup","title":"Q: ChemStation connection fails on startup","text":"<p>A: Check these items in order:</p> <ol> <li> <p>Is ChemStation running? <pre><code>ChemStation must be open before connecting\n</code></pre></p> </li> <li> <p>Is the macro loaded? <pre><code>In ChemStation command line:\nmacro \"C:\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p> </li> <li> <p>Are paths correct? <pre><code># Check communication directory exists\nimport os\ncomm_dir = r\"C:\\...\\ChemstationAPI\\core\\communication_files\"\nprint(os.path.exists(comm_dir))\n</code></pre></p> </li> </ol>"},{"location":"appendix/faq/#q-modulenotfounderror-when-importing","title":"Q: ModuleNotFoundError when importing","text":"<p>A: Install missing dependencies:</p> <pre><code># Install all required packages\npip install pyserial pandas pywin32 tqdm\n\n# Or reinstall the complete package\npip install --upgrade sia-ce\n</code></pre>"},{"location":"appendix/faq/#q-com-port-access-denied","title":"Q: COM port access denied","text":"<p>A: Common solutions:</p> <ol> <li>Run as Administrator</li> <li>Right-click Python/IDE</li> <li> <p>Select \"Run as administrator\"</p> </li> <li> <p>Close conflicting programs</p> </li> <li>HyperTerminal</li> <li>Other serial monitors</li> <li> <p>Device manufacturer software</p> </li> <li> <p>Check Windows permissions <pre><code># List available ports\nimport serial.tools.list_ports\nfor port in serial.tools.list_ports.comports():\n    print(port.device, port.description)\n</code></pre></p> </li> </ol>"},{"location":"appendix/faq/#chemstation-communication","title":"ChemStation Communication","text":""},{"location":"appendix/faq/#q-commands-timeout-frequently","title":"Q: Commands timeout frequently","text":"<p>A: Adjust timeout settings:</p> <pre><code>from ChemstationAPI.core.communication_config import CommunicationConfig\n\n# Increase timeouts\nconfig = CommunicationConfig(\n    default_timeout=10.0,  # 10 seconds\n    retry_delay=0.2,       # 200ms between retries\n    max_retries=15         # More retries\n)\n\napi = ChemstationAPI(config)\n</code></pre>"},{"location":"appendix/faq/#q-how-do-i-monitor-communication","title":"Q: How do I monitor communication?","text":"<p>A: Enable verbose mode:</p> <pre><code># See all commands and responses\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# Or monitor files directly (PowerShell)\nGet-Content \"communication_files\\command\" -Wait\n</code></pre>"},{"location":"appendix/faq/#q-can-i-send-custom-chemstation-commands","title":"Q: Can I send custom ChemStation commands?","text":"<p>A: Yes, use the send() method:</p> <pre><code># Any valid ChemStation command\nresponse = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Temperature_actual\"))')\nprint(f\"Current temperature: {response}\u00b0C\")\n</code></pre>"},{"location":"appendix/faq/#ce-operations","title":"CE Operations","text":""},{"location":"appendix/faq/#q-vial-loading-fails-intermittently","title":"Q: Vial loading fails intermittently","text":"<p>A: Common causes and solutions:</p> <ol> <li> <p>Vial not properly seated <pre><code># Validate before loading\napi.validation.validate_vial_in_system(vial)\napi.ce.load_vial_to_position(vial, \"inlet\")\n</code></pre></p> </li> <li> <p>Carousel busy <pre><code># Wait for ready state\napi.validation.validate_use_carousel()\n</code></pre></p> </li> <li> <p>Previous vial not unloaded <pre><code># Always unload first\ntry:\n    api.ce.unload_vial_from_position(\"inlet\")\nexcept:\n    pass  # Ignore if already unloaded\napi.ce.load_vial_to_position(new_vial, \"inlet\")\n</code></pre></p> </li> </ol>"},{"location":"appendix/faq/#q-how-do-i-handle-different-vial-types","title":"Q: How do I handle different vial types?","text":"<p>A: The system supports multiple vial types:</p> <ul> <li>100 \u00b5L microvials: Best for precious samples</li> <li>1 mL polypropylene: Standard operations</li> <li>2 mL glass: Large volume or organic solvents</li> </ul> <p>Use consistent vial type throughout analysis for best results.</p>"},{"location":"appendix/faq/#q-method-execution-fails-to-start","title":"Q: Method execution fails to start","text":"<p>A: Check these items:</p> <pre><code># 1. Validate method exists\napi.validation.validate_method_name(\"MethodName\")\n\n# 2. Check system is ready\nif api.system.status() != \"STANDBY\":\n    api.system.wait_for_ready(60)\n\n# 3. Verify vials are loaded\napi.validation.vial_in_position(\"inlet\")\napi.validation.vial_in_position(\"outlet\")\n\n# 4. Then run method\napi.method.run(\"SampleName\")\n</code></pre>"},{"location":"appendix/faq/#sia-operations","title":"SIA Operations","text":""},{"location":"appendix/faq/#q-syringe-volume-errors","title":"Q: Syringe volume errors","text":"<p>A: The API tracks volume automatically:</p> <pre><code># Check current volume\nsyringe.print_volume_in_syringe()\n\n# Reset if needed\nsyringe.dispense()  # Empty completely\nsyringe.volume_counter = 0  # Reset counter\n\n# Or reinitialize\nsyringe.initialize()\n</code></pre>"},{"location":"appendix/faq/#q-valve-doesnt-switch-reliably","title":"Q: Valve doesn't switch reliably","text":"<p>A: Use multiple attempts:</p> <pre><code># Increase attempts for reliability\nvalve.position(5, num_attempts=5)\n\n# Or implement custom retry\ndef reliable_valve_switch(position, max_tries=5):\n    for attempt in range(max_tries):\n        valve.position(position)\n        time.sleep(0.5)  # Allow settling\n        # Could add position verification here\n    return True\n</code></pre>"},{"location":"appendix/faq/#q-how-to-prevent-cross-contamination","title":"Q: How to prevent cross-contamination?","text":"<p>A: Follow these practices:</p> <pre><code># 1. Wash between different samples\nworkflow.clean_needle(volume_flush=100)\n\n# 2. Use air gaps\nvalve.position(air_port)\nsyringe.aspirate(20)  # Air gap\nvalve.position(sample_port)\nsyringe.aspirate(sample_volume)\n\n# 3. Flush lines between solvents\nworkflow.prepare_batch_flow(new_solvent_port)\n</code></pre>"},{"location":"appendix/faq/#workflow-questions","title":"Workflow Questions","text":""},{"location":"appendix/faq/#q-continuous-vs-batch-flow-when-to-use-which","title":"Q: Continuous vs Batch flow - when to use which?","text":"<p>A: Use continuous flow when: - Multiple vials with same solvent - Speed is priority - Minimal contamination risk</p> <p>Use batch flow when: - Different solvents per vial - Single vial operations - Maximum contamination prevention</p>"},{"location":"appendix/faq/#q-how-to-optimize-for-speed","title":"Q: How to optimize for speed?","text":"<p>A: Speed optimization strategies:</p> <pre><code># 1. Prepare next sample during CE run\ndef parallel_preparation():\n    # Start CE\n    ce_api.method.run(\"Current_Sample\")\n\n    # While running, prepare next\n    while ce_api.system.method_on():\n        if ce_api.system.get_remaining_analysis_time() &lt; 5:\n            workflow.batch_fill(next_vial, volume, port)\n            break\n        time.sleep(30)\n\n# 2. Use appropriate flow rates\nsyringe.set_speed_uL_min(5000)  # Air - fast\nsyringe.set_speed_uL_min(3500)  # Water - medium\nsyringe.set_speed_uL_min(1000)  # Viscous - slow\n\n# 3. Minimize valve switches\n# Group operations by port\n</code></pre>"},{"location":"appendix/faq/#q-how-to-handle-errors-in-batch-processing","title":"Q: How to handle errors in batch processing?","text":"<p>A: Implement error recovery:</p> <pre><code>def robust_batch_analysis(samples):\n    failed = []\n\n    for sample in samples:\n        try:\n            # Process sample\n            analyze_sample(sample)\n        except VialError:\n            failed.append(sample)\n            continue  # Skip this sample\n        except MethodError:\n            # Try recovery\n            api.system.abort_run()\n            time.sleep(60)\n            # Retry once\n            try:\n                analyze_sample(sample)\n            except:\n                failed.append(sample)\n        except KeyboardInterrupt:\n            # Allow user to stop\n            print(\"Batch interrupted by user\")\n            break\n\n    return failed\n</code></pre>"},{"location":"appendix/faq/#data-management","title":"Data Management","text":""},{"location":"appendix/faq/#q-where-are-data-files-stored","title":"Q: Where are data files stored?","text":"<p>A: Default locations:</p> <pre><code># Get current paths\ndata_path = api.send(\"response$ = _DATAPATH$\")\nmethod_path = api.send(\"response$ = _METHPATH$\")\nsequence_path = api.send(\"response$ = _SEQPATH$\")\n\n# Set custom subdirectory\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"Method\",\n    sample_name=\"Sample\",\n    subdirectory_name=\"Project_X_2024\"\n)\n</code></pre>"},{"location":"appendix/faq/#q-how-to-organize-data-from-large-studies","title":"Q: How to organize data from large studies?","text":"<p>A: Use structured naming:</p> <pre><code>from datetime import datetime\n\n# Create organized structure\nproject = \"ProteinStability\"\ndate = datetime.now().strftime(\"%Y%m%d\")\ncondition = \"pH7_25C\"\n\nsample_name = f\"{project}_{date}_{condition}_Rep1\"\nsubdirectory = f\"{project}_{date}\"\n\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein\",\n    sample_name=sample_name,\n    subdirectory_name=subdirectory\n)\n</code></pre>"},{"location":"appendix/faq/#performance-issues","title":"Performance Issues","text":""},{"location":"appendix/faq/#q-analysis-takes-too-long","title":"Q: Analysis takes too long","text":"<p>A: Optimization strategies:</p> <ol> <li>Parallel operations - Prepare during CE run</li> <li>Continuous flow - For same solvent</li> <li>Optimized methods - Shorter CE runtime</li> <li>Batch operations - Minimize overhead</li> </ol>"},{"location":"appendix/faq/#q-system-becomes-unresponsive","title":"Q: System becomes unresponsive","text":"<p>A: Recovery procedures:</p> <pre><code># 1. Emergency stop\napi.system.abort_run()\n\n# 2. Reset communication\napi = ChemstationAPI()  # Reconnect\n\n# 3. Reinitialize hardware\nsyringe.initialize()\nvalve.position(1)\n\n# 4. Check system state\nprint(api.system.status())\nprint(api.system.RC_status())\n</code></pre>"},{"location":"appendix/faq/#advanced-topics","title":"Advanced Topics","text":""},{"location":"appendix/faq/#q-can-i-modify-the-communication-protocol","title":"Q: Can I modify the communication protocol?","text":"<p>A: Yes, but be careful:</p> <pre><code># Custom configuration\nconfig = CommunicationConfig(\n    comm_dir=\"custom/path\",\n    max_command_number=1000,  # Larger command buffer\n    command_filename=\"my_commands\",\n    response_filename=\"my_responses\"\n)\n</code></pre>"},{"location":"appendix/faq/#q-how-to-integrate-with-lims","title":"Q: How to integrate with LIMS?","text":"<p>A: Example LIMS integration:</p> <pre><code>class LIMSIntegration:\n    def __init__(self, api):\n        self.api = api\n        self.lims_connection = None  # Your LIMS API\n\n    def get_worklist(self):\n        # Fetch from LIMS\n        return self.lims_connection.get_pending_samples()\n\n    def process_worklist(self):\n        samples = self.get_worklist()\n\n        for sample in samples:\n            # Update LIMS status\n            self.lims_connection.update_status(sample.id, \"Processing\")\n\n            # Run analysis\n            result = self.analyze_sample(sample)\n\n            # Report back\n            self.lims_connection.report_result(sample.id, result)\n</code></pre>"},{"location":"appendix/faq/#q-can-i-extend-the-api","title":"Q: Can I extend the API?","text":"<p>A: Yes, create custom modules:</p> <pre><code>class CustomWorkflow(PreparedSIAMethods):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def my_special_preparation(self, sample_info):\n        \"\"\"Custom sample preparation.\"\"\"\n        # Your implementation\n        pass\n\n# Use custom workflow\nworkflow = CustomWorkflow(ce_api, syringe, valve)\nworkflow.my_special_preparation(sample_info)\n</code></pre>"},{"location":"appendix/faq/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":""},{"location":"appendix/faq/#when-things-dont-work","title":"When things don't work:","text":"<ol> <li>Check connections</li> <li>Power on all devices</li> <li>Verify COM ports</li> <li> <p>Test communication</p> </li> <li> <p>Validate prerequisites</p> </li> <li>ChemStation running</li> <li>Macro loaded</li> <li>Vials present</li> <li> <p>Methods exist</p> </li> <li> <p>Review error messages</p> </li> <li>Check specific exception type</li> <li>Look for error patterns</li> <li> <p>Enable verbose mode</p> </li> <li> <p>Test components individually <pre><code># Test each component\nsyringe.send_command(\"?\", get_response=True)\nvalve.position(1)\napi.send(\"response$ = _METHPATH$\")\n</code></pre></p> </li> <li> <p>Check the logs</p> </li> <li>ChemStation logbook</li> <li>Windows Event Viewer</li> <li>Python console output</li> </ol>"},{"location":"appendix/faq/#getting-help","title":"Getting Help","text":""},{"location":"appendix/faq/#resources","title":"Resources:","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Documentation: Check all sections</li> <li>Examples: Review tutorial code</li> <li>Community: Discussion forums</li> </ul>"},{"location":"appendix/faq/#when-reporting-issues-include","title":"When reporting issues, include:","text":"<ul> <li>Python version</li> <li>Package version</li> <li>Hardware details</li> <li>Error messages</li> <li>Minimal code example</li> </ul> <p>Still stuck?</p> <p>Most issues are related to: 1. ChemStation macro not running 2. Incorrect COM ports 3. Missing vials or methods 4. Timeout settings too short</p> <p>Check these first!</p>"},{"location":"appendix/hardware-setup/","title":"Hardware Setup Guide","text":"<p>Complete guide for setting up and configuring SIA-CE hardware components.</p>"},{"location":"appendix/hardware-setup/#system-requirements","title":"System Requirements","text":""},{"location":"appendix/hardware-setup/#computer-requirements","title":"Computer Requirements","text":"<p>Minimum: - Windows 7 SP1 (64-bit) - 4 GB RAM - 2.0 GHz processor - 10 GB free disk space - 2 available USB/Serial ports</p> <p>Recommended: - Windows 10/11 (64-bit) - 8 GB RAM or more - 3.0 GHz multi-core processor - 50 GB free disk space - Dedicated USB ports (not hub)</p>"},{"location":"appendix/hardware-setup/#software-requirements","title":"Software Requirements","text":"<ul> <li>Agilent ChemStation (version B.04.03 or higher)</li> <li>Python 3.7+ (64-bit recommended)</li> <li>Required Python packages (see installation guide)</li> </ul>"},{"location":"appendix/hardware-setup/#ce-system-setup","title":"CE System Setup","text":""},{"location":"appendix/hardware-setup/#agilent-7100-ce-system","title":"Agilent 7100 CE System","text":""},{"location":"appendix/hardware-setup/#initial-setup","title":"Initial Setup","text":"<ol> <li>Power Connection</li> <li>Connect to appropriate voltage (100-240V)</li> <li>Use surge protector</li> <li> <p>Ensure proper grounding</p> </li> <li> <p>Communication</p> </li> <li>Connect USB cable to PC</li> <li>Install ChemStation drivers</li> <li> <p>Configure in ChemStation</p> </li> <li> <p>Capillary Installation</p> </li> <li>Use proper capillary cutting tool</li> <li>Check window alignment</li> <li>Verify detection path</li> </ol>"},{"location":"appendix/hardware-setup/#configuration-in-chemstation","title":"Configuration in ChemStation","text":"<pre><code>1. Open ChemStation\n2. Go to Instrument \u2192 Configure\n3. Select CE instrument\n4. Set communication parameters:\n   - Connection: USB\n   - Timeout: 30 seconds\n5. Test connection\n</code></pre>"},{"location":"appendix/hardware-setup/#carousel-setup","title":"Carousel Setup","text":"<p>Vial Positions: - Positions 1-48: Sample vials - Position 49: Replenishment parking - Position 50: Often used for waste</p> <p>Vial Types: - 100 \u00b5L microvials (recommended for small volumes) - 1 mL polypropylene vials - 2 mL glass vials</p> <p>Best Practices: - Use same vial type throughout analysis - Check vial seating in carousel - Replace damaged carousel positions</p>"},{"location":"appendix/hardware-setup/#sia-system-setup","title":"SIA System Setup","text":""},{"location":"appendix/hardware-setup/#syringe-pump-installation","title":"Syringe Pump Installation","text":""},{"location":"appendix/hardware-setup/#hamilton-mvp-series","title":"Hamilton MVP Series","text":"<ol> <li> <p>Physical Setup <pre><code>- Mount on stable surface\n- Level the pump\n- Install syringe (finger-tight only)\n- Connect valve assembly\n</code></pre></p> </li> <li> <p>Electrical Connection <pre><code>- Connect power supply (12-24V DC)\n- Connect RS-232 cable to PC\n- Set DIP switches if required\n</code></pre></p> </li> <li> <p>Communication Settings <pre><code>Port: COM3 (typical)\nBaud: 9600\nData bits: 8\nStop bits: 1\nParity: None\nFlow control: None\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#syringe-selection","title":"Syringe Selection","text":"Volume Range Syringe Size Resolution Best For 10-100 \u00b5L 100 \u00b5L 0.03 \u00b5L Precise small volumes 50-500 \u00b5L 500 \u00b5L 0.17 \u00b5L General use 100-1000 \u00b5L 1000 \u00b5L 0.33 \u00b5L Standard operations 500-5000 \u00b5L 5000 \u00b5L 1.67 \u00b5L Large volume prep"},{"location":"appendix/hardware-setup/#valve-selector-installation","title":"Valve Selector Installation","text":""},{"location":"appendix/hardware-setup/#vicivalco-setup","title":"VICI/Valco Setup","text":"<ol> <li> <p>Mounting <pre><code>- Secure to stable platform\n- Align ports horizontally\n- Minimize tubing lengths\n</code></pre></p> </li> <li> <p>Port Connections <pre><code>Port 1: Waste\nPort 2: Air/Gas\nPort 3: DI Water\nPort 4: Transfer to CE\nPort 5-8: Reagents/Solvents\n</code></pre></p> </li> <li> <p>Communication <pre><code>Port: COM4 (typical)\nBaud: 9600\nProtocol: VICI standard\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#tubing-and-connections","title":"Tubing and Connections","text":""},{"location":"appendix/hardware-setup/#tubing-selection","title":"Tubing Selection","text":"Application ID (mm) Material Length Syringe-Valve 0.8 PTFE &lt; 10 cm Valve-Ports 0.5 PEEK &lt; 30 cm To CE 0.25 Fused Silica &lt; 50 cm Waste 1.6 PTFE As needed"},{"location":"appendix/hardware-setup/#connection-best-practices","title":"Connection Best Practices","text":"<ol> <li>Cutting Tubing</li> <li>Use sharp blade</li> <li>Cut perpendicular</li> <li> <p>No burrs or deformation</p> </li> <li> <p>Fittings</p> </li> <li>Finger-tight + 1/4 turn</li> <li>Use appropriate ferrules</li> <li> <p>Check for leaks</p> </li> <li> <p>Dead Volume</p> </li> <li>Minimize connection volume</li> <li>Use zero-dead-volume fittings</li> <li>Flush after installation</li> </ol>"},{"location":"appendix/hardware-setup/#system-integration","title":"System Integration","text":""},{"location":"appendix/hardware-setup/#physical-layout","title":"Physical Layout","text":"<pre><code>Recommended Setup:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CE System \u2502     \u2502 Computer \u2502\n\u2502             \u2502\u2500\u2500\u2500\u2500&gt;\u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       ^                  ^\n       \u2502                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n\u2502   Syringe  \u2502\u2500\u2500\u2500\u2500&gt;\u2502  Valve   \u2502\n\u2502    Pump    \u2502     \u2502 Selector \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"appendix/hardware-setup/#communication-architecture","title":"Communication Architecture","text":"<ol> <li> <p>Serial Ports <pre><code># Find available ports\nimport serial.tools.list_ports\n\nports = serial.tools.list_ports.comports()\nfor port in ports:\n    print(f\"{port.device}: {port.description}\")\n</code></pre></p> </li> <li> <p>Port Assignment</p> </li> <li>Use Device Manager to identify</li> <li>Assign consistent port numbers</li> <li>Document port mapping</li> </ol>"},{"location":"appendix/hardware-setup/#power-management","title":"Power Management","text":"<ol> <li> <p>Power Sequence <pre><code>1. Computer\n2. CE System\n3. Syringe Pump\n4. Valve Selector\n</code></pre></p> </li> <li> <p>UPS Recommendations</p> </li> <li>Minimum 1000 VA</li> <li>Include all components</li> <li>Test monthly</li> </ol>"},{"location":"appendix/hardware-setup/#calibration-and-testing","title":"Calibration and Testing","text":""},{"location":"appendix/hardware-setup/#syringe-pump-calibration","title":"Syringe Pump Calibration","text":"<pre><code>def calibrate_syringe_volume():\n    \"\"\"Calibrate syringe volume delivery.\"\"\"\n\n    # Initialize\n    syringe.initialize()\n\n    # Test volumes\n    test_volumes = [100, 500, 900]\n\n    for volume in test_volumes:\n        # Dispense into tared vial\n        syringe.aspirate(volume)\n        input(f\"Place tared vial at output. Press Enter...\")\n        syringe.dispense(volume)\n\n        actual = float(input(\"Enter measured volume (\u00b5L): \"))\n        error = (actual - volume) / volume * 100\n        print(f\"Volume: {volume} \u00b5L, Error: {error:.2f}%\")\n</code></pre>"},{"location":"appendix/hardware-setup/#valve-position-verification","title":"Valve Position Verification","text":"<pre><code>def verify_valve_positions():\n    \"\"\"Verify each valve position.\"\"\"\n\n    num_positions = 8\n\n    for pos in range(1, num_positions + 1):\n        valve.position(pos)\n        input(f\"Verify position {pos}. Press Enter...\")\n\n    print(\"Valve verification complete\")\n</code></pre>"},{"location":"appendix/hardware-setup/#ce-system-tests","title":"CE System Tests","text":"<ol> <li> <p>Pressure Test <pre><code># Test pressure system\napi.ce.apply_pressure_to_capillary(50, 10)  # 50 mbar, 10 sec\napi.ce.apply_pressure_to_capillary(-50, 10)  # -50 mbar, 10 sec\n</code></pre></p> </li> <li> <p>Carousel Test <pre><code># Test all positions\nfor pos in range(1, 49):\n    try:\n        api.ce.load_vial_to_position(pos, \"inlet\")\n        api.ce.unload_vial_from_position(\"inlet\")\n        print(f\"Position {pos}: OK\")\n    except:\n        print(f\"Position {pos}: FAIL\")\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#maintenance-schedule","title":"Maintenance Schedule","text":""},{"location":"appendix/hardware-setup/#daily","title":"Daily","text":"<ul> <li>Check for leaks</li> <li>Verify communication</li> <li>Clean needle/transfer line</li> </ul>"},{"location":"appendix/hardware-setup/#weekly","title":"Weekly","text":"<ul> <li>Flush all lines</li> <li>Check capillary condition</li> <li>Calibrate if needed</li> </ul>"},{"location":"appendix/hardware-setup/#monthly","title":"Monthly","text":"<ul> <li>Deep clean system</li> <li>Replace worn tubing</li> <li>Check electrical connections</li> </ul>"},{"location":"appendix/hardware-setup/#annually","title":"Annually","text":"<ul> <li>Service syringe pump</li> <li>Replace seals</li> <li>Full system validation</li> </ul>"},{"location":"appendix/hardware-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"appendix/hardware-setup/#communication-issues","title":"Communication Issues","text":"<p>Problem: COM port not found <pre><code>Solution:\n1. Check Device Manager\n2. Reinstall drivers\n3. Try different USB port\n4. Use USB-Serial adapter if needed\n</code></pre></p> <p>Problem: Device not responding <pre><code># Test communication\ntry:\n    syringe.send_command(\"?\", get_response=True)\n    print(\"Syringe communication OK\")\nexcept:\n    print(\"Check connections and power\")\n</code></pre></p>"},{"location":"appendix/hardware-setup/#mechanical-issues","title":"Mechanical Issues","text":"<p>Problem: Syringe stalling <pre><code>Causes:\n- Overpressure\n- Mechanical binding\n- Wrong syringe size configured\n\nSolutions:\n- Check for blockages\n- Reduce speed\n- Verify syringe size setting\n</code></pre></p> <p>Problem: Valve not switching <pre><code>Causes:\n- Mechanical obstruction\n- Communication error\n- Power issue\n\nSolutions:\n- Manual rotation check\n- Increase switching attempts\n- Check power supply\n</code></pre></p>"},{"location":"appendix/hardware-setup/#system-integration-issues","title":"System Integration Issues","text":"<p>Problem: Timing conflicts <pre><code># Add delays between operations\ndef safe_operation_sequence():\n    valve.position(1)\n    time.sleep(0.5)  # Allow valve to settle\n    syringe.aspirate(500)\n    time.sleep(0.2)  # Allow pressure to stabilize\n</code></pre></p>"},{"location":"appendix/hardware-setup/#optimization-tips","title":"Optimization Tips","text":""},{"location":"appendix/hardware-setup/#speed-optimization","title":"Speed Optimization","text":"<ol> <li>Parallel Operations</li> <li>Prepare next sample during CE run</li> <li>Use continuous flow for same solvent</li> <li> <p>Minimize valve switches</p> </li> <li> <p>Flow Rates <pre><code># Optimized speeds\nSPEEDS = {\n    'air': 5000,        # Fast\n    'water': 3500,      # Medium-fast\n    'organic': 2500,    # Medium\n    'viscous': 1000,    # Slow\n    'critical': 500     # Very slow\n}\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#volume-optimization","title":"Volume Optimization","text":"<ol> <li>Minimize Dead Volume</li> <li>Short tubing runs</li> <li>Small ID tubing where possible</li> <li> <p>Zero-dead-volume fittings</p> </li> <li> <p>Efficient Aspiration <pre><code># Aspirate in order of reactivity\n# 1. Buffer/diluent (least reactive)\n# 2. Sample (most reactive)\n# 3. Air gap (separation)\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#reliability-enhancement","title":"Reliability Enhancement","text":"<ol> <li> <p>Error Recovery <pre><code># Implement retry logic\ndef reliable_operation(func, retries=3):\n    for attempt in range(retries):\n        try:\n            return func()\n        except:\n            if attempt == retries - 1:\n                raise\n            time.sleep(1)\n</code></pre></p> </li> <li> <p>State Monitoring <pre><code># Track system state\nclass SystemMonitor:\n    def __init__(self):\n        self.syringe_volume = 0\n        self.valve_position = 1\n        self.last_operation = None\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#safety-considerations","title":"Safety Considerations","text":""},{"location":"appendix/hardware-setup/#chemical-safety","title":"Chemical Safety","text":"<ul> <li>Use fume hood for volatile solvents</li> <li>Proper waste disposal</li> <li>Material compatibility checks</li> </ul>"},{"location":"appendix/hardware-setup/#electrical-safety","title":"Electrical Safety","text":"<ul> <li>Proper grounding</li> <li>No liquid near electronics</li> <li>Emergency stop procedures</li> </ul>"},{"location":"appendix/hardware-setup/#pressure-safety","title":"Pressure Safety","text":"<ul> <li>Maximum 100 mbar for injection</li> <li>Maximum 950 mbar for flushing</li> <li>Pressure relief mechanisms</li> </ul>"},{"location":"appendix/hardware-setup/#validation-protocols","title":"Validation Protocols","text":""},{"location":"appendix/hardware-setup/#iqoqpq","title":"IQ/OQ/PQ","text":"<ol> <li>Installation Qualification (IQ)</li> <li>Document all connections</li> <li>Verify communication</li> <li> <p>Check safety features</p> </li> <li> <p>Operational Qualification (OQ)</p> </li> <li>Test all functions</li> <li>Verify accuracy</li> <li> <p>Document performance</p> </li> <li> <p>Performance Qualification (PQ)</p> </li> <li>Run test methods</li> <li>Verify reproducibility</li> <li>Meet specifications</li> </ol> <p>Setup Complete</p> <p>With proper hardware setup, your SIA-CE system is ready for automated analysis!</p>"},{"location":"appendix/requirements/","title":"Documentation dependencies for MkDocs","text":"<p>mkdocs&gt;=1.5.0 mkdocs-material&gt;=9.0.0 mkdocs-material-extensions&gt;=1.3 mkdocstrings&gt;=0.24.0 mkdocstrings-python&gt;=1.7.0 pymdown-extensions&gt;=10.0 mkdocs-mermaid2-plugin&gt;=1.1.0</p>"},{"location":"appendix/requirements/#for-api-documentation-generation","title":"For API documentation generation","text":"<p>griffe&gt;=0.38.0</p>"},{"location":"appendix/requirements/#for-better-search","title":"For better search","text":"<p>mkdocs-search&gt;=1.0.0</p>"},{"location":"appendix/requirements/#optional-but-recommended","title":"Optional but recommended","text":"<p>mkdocs-git-revision-date-localized-plugin&gt;=1.2.0 mkdocs-minify-plugin&gt;=0.7.0</p>"},{"location":"chemstation-api/basic-operations/","title":"Basic ChemStation Operations","text":"<p>This guide covers the most common operations for chemstation, konkr\u00e9tn\u011b pro CE</p>"},{"location":"chemstation-api/basic-operations/#initializing-the-api","title":"Initializing the API","text":"<pre><code>from ChemstationAPI import ChemstationAPI\n\n# Basic initialization\napi = ChemstationAPI()\n\nrozd\u011blit na 2 okna\n# With custom configuration\nfrom ChemstationAPI.core.communication_config import CommunicationConfig\n\nconfig = CommunicationConfig(verbose=True, test_on_init=False)\napi = ChemstationAPI(config)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#vial-management","title":"Vial Management","text":""},{"location":"chemstation-api/basic-operations/#understanding-vial-positions","title":"Understanding Vial Positions","text":"<p>The CE system has several vial locations:</p> <ul> <li>Carousel: 48 positions for samples (1-48) + special positions</li> <li>Inlet: Sample injection position (positive electrode)</li> <li>Outlet: Waste collection position (negative electrode)</li> <li>Replenishment: Buffer replenishment position</li> </ul>"},{"location":"chemstation-api/basic-operations/#loading-and-unloading-vials","title":"Loading and Unloading Vials","text":"<pre><code># Load vial to inlet for analysis\napi.ce.load_vial_to_position(vial=15, position=\"inlet\")\n\n# Load waste vial to outlet\napi.ce.load_vial_to_position(vial=48, position=\"outlet\")\n\n# Load buffer vial for replenishment\napi.ce.load_vial_to_position(vial=49, position=\"replenishment\")\n\n# Return vial to carousel\napi.ce.unload_vial_from_position(\"inlet\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#checking-vial-status","title":"Checking Vial Status","text":"<pre><code># Check where a vial is located\nstate = api.ce.get_vial_state(15)\nprint(f\"Vial 15 is at: {state}\")\n# Possible states: \"carousel\", \"inlet\", \"outlet\", \"replenishment\", \"out_system\"\n\n# Check all vial positions\nvial_table = api.validation.get_vialtable()\nfor position, present in vial_table.items():\n    if present:\n        print(f\"Vial present at position {position}\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#capillary-operations","title":"Capillary Operations","text":""},{"location":"chemstation-api/basic-operations/#capillary-conditioning","title":"Capillary Conditioning","text":"<pre><code># Standard 1-minute flush at high pressure\napi.ce.flush_capillary(time_flush=60.0)\n\n# Quick bubble removal\napi.ce.flush_capillary(time_flush=10.0)\n\n# Long conditioning for new capillary\napi.ce.flush_capillary(time_flush=300.0)  # 5 minutes\n</code></pre>"},{"location":"chemstation-api/basic-operations/#pressure-operations","title":"Pressure Operations","text":"<pre><code># Hydrodynamic injection (50 mbar for 5 seconds)\napi.ce.apply_pressure_to_capillary(pressure=50.0, time_pressure=5.0)\n\n# Gentle conditioning\napi.ce.apply_pressure_to_capillary(pressure=25.0, time_pressure=30.0)\n\n# Vacuum application\napi.ce.apply_pressure_to_capillary(pressure=-50.0, time_pressure=10.0)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#method-operations","title":"Method Operations","text":""},{"location":"chemstation-api/basic-operations/#loading-methods","title":"Loading Methods","text":"<pre><code># Load method from default directory\napi.method.load(\"CE_Standard_Method\")\n\n# Load from specific directory\napi.method.load(\"TestMethod\", method_path=\"C:\\\\Methods\\\\Development\\\\\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#running-methods","title":"Running Methods","text":"<pre><code># Simple method execution\napi.method.run(\"Sample_001\")\n\n# Run with custom data directory\napi.method.run(\"Sample_001\", data_dir=\"C:\\\\Data\\\\Project_X\\\\\")\n\n# Run with all parameters\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein_Analysis\",\n    sample_name=\"BSA_1mg_ml\",\n    comment=\"pH 8.5 buffer\",\n    subdirectory_name=\"Protein_Study\"\n)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#saving-methods","title":"Saving Methods","text":"<pre><code># Save current method with new name\napi.method.save(\"Modified_Method\", comment=\"Increased voltage to 25kV\")\n\n# Overwrite current method\napi.method.save()\n</code></pre>"},{"location":"chemstation-api/basic-operations/#system-monitoring","title":"System Monitoring","text":""},{"location":"chemstation-api/basic-operations/#check-system-status","title":"Check System Status","text":"<pre><code># Is method running?\nif api.system.method_on():\n    print(\"Analysis in progress\")\nelse:\n    print(\"System idle\")\n\n# Get detailed status\nstatus = api.system.status()\nprint(f\"Current status: {status}\")\n# Returns: \"STANDBY\", \"PRERUN\", \"RUN\", \"POSTRUN\", etc.\n\n# Check CE module status\nrc_status = api.system.RC_status()\nprint(f\"CE module: {rc_status}\")\n# Returns: \"Idle\", \"Run\", \"NotReady\", \"Error\"\n</code></pre>"},{"location":"chemstation-api/basic-operations/#monitor-analysis-progress","title":"Monitor Analysis Progress","text":"<pre><code># Real-time monitoring\nwhile api.system.method_on():\n    elapsed = api.system.get_elapsed_analysis_time()\n    total = api.system.get_analysis_time()\n    remaining = api.system.get_remaining_analysis_time()\n\n    progress = (elapsed / total) * 100 if total &gt; 0 else 0\n    print(f\"Progress: {progress:.1f}% - {remaining:.1f} min remaining\")\n\n    time.sleep(30)  # Update every 30 seconds\n\nprint(\"Analysis complete!\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#validation-operations","title":"Validation Operations","text":""},{"location":"chemstation-api/basic-operations/#pre-flight-checks","title":"Pre-flight Checks","text":"<pre><code># Validate before starting analysis\ndef prepare_for_analysis(sample_vial, waste_vial, method_name):\n    # Check vials are present\n    api.validation.validate_vial_in_system(sample_vial)\n    api.validation.validate_vial_in_system(waste_vial)\n\n    # Check method exists\n    api.validation.validate_method_name(method_name)\n\n    # Check carousel is available\n    api.validation.validate_use_carousel()\n\n    # Check system is ready\n    if api.system.status() != \"STANDBY\":\n        raise SystemError(\"System not ready\")\n\n    print(\"All checks passed - ready for analysis!\")\n\n# Use the validation\nprepare_for_analysis(15, 48, \"CE_Standard_Method\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#batch-validation","title":"Batch Validation","text":"<pre><code># Validate multiple vials for sequence\nsample_vials = [10, 11, 12, 13, 14, 15]\napi.validation.list_vial_validation(sample_vials)\nprint(\"All sample vials present\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#direct-chemstation-commands","title":"Direct ChemStation Commands","text":"<p>For advanced operations, send commands directly:</p> <pre><code># Get system paths\nmethod_path = api.send(\"response$ = _METHPATH$\")\ndata_path = api.send(\"response$ = _DATAPATH$\")\nprint(f\"Methods: {method_path}\")\nprint(f\"Data: {data_path}\")\n\n# Get current voltage\nvoltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))')\nprint(f\"Current voltage: {voltage} kV\")\n\n# Execute custom macro\napi.send('macro \"C:\\\\custom_macro.mac\"; custom_procedure 15, \"parameter\"')\n</code></pre>"},{"location":"chemstation-api/basic-operations/#complete-analysis-example","title":"Complete Analysis Example","text":"<p>Here's a complete workflow for a single sample:</p> <pre><code>def analyze_sample(sample_vial, sample_name, method_name):\n    \"\"\"Complete analysis workflow for a single sample.\"\"\"\n\n    # 1. Validate prerequisites\n    print(\"Validating system...\")\n    api.validation.validate_vial_in_system(sample_vial)\n    api.validation.validate_vial_in_system(48)  # waste vial\n    api.validation.validate_method_name(method_name)\n\n    # 2. Wait for system ready\n    print(\"Waiting for system...\")\n    if not api.system.wait_for_ready(timeout=60):\n        raise TimeoutError(\"System not ready\")\n\n    # 3. Load vials\n    print(\"Loading vials...\")\n    api.ce.load_vial_to_position(sample_vial, \"inlet\")\n    api.ce.load_vial_to_position(48, \"outlet\")\n\n    # 4. Condition capillary\n    print(\"Conditioning capillary...\")\n    api.ce.flush_capillary(30.0)\n\n    # 5. Load and run method\n    print(f\"Running analysis for {sample_name}...\")\n    api.method.load(method_name)\n    api.method.run(sample_name)\n\n    # 6. Monitor progress\n    while api.system.method_on():\n        remaining = api.system.get_remaining_analysis_time()\n        print(f\"  {remaining:.1f} minutes remaining\", end='\\r')\n        time.sleep(10)\n\n    # 7. Return vials\n    print(\"\\nCleaning up...\")\n    api.ce.unload_vial_from_position(\"inlet\")\n    api.ce.unload_vial_from_position(\"outlet\")\n\n    print(f\"Analysis of {sample_name} complete!\")\n\n# Run the analysis\nanalyze_sample(\n    sample_vial=15,\n    sample_name=\"Test_Sample_001\",\n    method_name=\"CE_Standard_Method\"\n)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#tips-for-efficient-operation","title":"Tips for Efficient Operation","text":"<ol> <li> <p>Always validate before operations <pre><code># Good practice\napi.validation.validate_vial_in_system(vial)\napi.ce.load_vial_to_position(vial, \"inlet\")\n</code></pre></p> </li> <li> <p>Monitor system state <pre><code># Wait between operations\nwhile api.system.status() != \"STANDBY\":\n    time.sleep(5)\n</code></pre></p> </li> </ol> <p>je\u0161t\u011b n\u011bco p\u0159idej</p> <p>Next Steps</p> <p>Learn about Methods and Sequences for batch analysis automation.</p>"},{"location":"chemstation-api/file-protocol/","title":"File-Based Communication Protocol","text":"<p>Understanding how Python communicates with ChemStation is crucial for troubleshooting and advanced usage. This page explains the file-based protocol that enables reliable command execution.</p>"},{"location":"chemstation-api/file-protocol/#how-it-works","title":"How It Works","text":""},{"location":"chemstation-api/file-protocol/#communication-flow","title":"Communication Flow","text":"<p>tady popi\u0161 jak to funguje, m\u00e1m na to obr\u00e1zek, n\u011bjak tam napi\u0161 \u017ee je to p\u0159evzato a upraveno z https://github.com/croningp/analyticallabware/tree/master/AnalyticalLabware/devices/Agilent, m\u00e1m to anps\u00e1no i v k\u00b4du</p> <pre><code>sequenceDiagram\n    participant Python\n    participant CommandFile\n    participant ResponseFile\n    participant Macro\n    participant ChemStation\n\n    Python-&gt;&gt;CommandFile: Write \"1 LoadMethod MyMethod.M\"\n    Macro-&gt;&gt;CommandFile: Read command\n    Macro-&gt;&gt;ChemStation: Execute LoadMethod\n    ChemStation--&gt;&gt;Macro: Return result\n    Macro-&gt;&gt;ResponseFile: Write \"1 None\"\n    Python-&gt;&gt;ResponseFile: Read response</code></pre>"},{"location":"chemstation-api/file-protocol/#command-format","title":"Command Format","text":""},{"location":"chemstation-api/file-protocol/#basic-commands","title":"Basic Commands","text":"<p>Commands without return values:</p> <pre><code># Python code\napi.send(\"LoadMethod _METHPATH$, MyMethod.M\")\n\n# Command file content\n123 LoadMethod _METHPATH$, MyMethod.M\n\n# Response file content\n123 None\n</code></pre>"},{"location":"chemstation-api/file-protocol/#commands-with-return-values","title":"Commands with Return Values","text":"<p>To capture a return value, prefix with <code>response$ =</code>:</p> <pre><code># Python code\npath = api.send(\"response$ = _METHPATH$\")\n\n# Command file content\n124 response$ = _METHPATH$\n\n# Response file content\n124 C:\\Chem32\\1\\Methods\\CE\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#command-numbering","title":"Command Numbering","text":"<p>The protocol uses sequential command numbers to match responses with requests:</p> <ul> <li>Numbers increment from 1 to 256 (configurable)</li> <li>Automatically wraps around at maximum</li> <li>Ensures each command gets its correct response</li> <li>Prevents mixing responses from multiple commands</li> </ul> <pre><code># Example of command numbering in action\n1 response$ = _METHPATH$\n2 LoadMethod _METHPATH$, Test.M\n3 response$ = VAL$(_MethodOn)\n...\n256 response$ = ACQSTATUS$\n1 response$ = _DATAPATH$  # Wraps around\n</code></pre>"},{"location":"chemstation-api/file-protocol/#file-locations","title":"File Locations","text":"<p>Default file locations:</p> <pre><code>SIA-CE/\n\u2514\u2500\u2500 ChemstationAPI/\n    \u2514\u2500\u2500 core/\n        \u251c\u2500\u2500 ChemPyConnect.mac          # Macro file\n        \u2514\u2500\u2500 communication_files/       # Communication directory\n            \u251c\u2500\u2500 command               # Command file\n            \u2514\u2500\u2500 response              # Response file\n</code></pre>"},{"location":"chemstation-api/file-protocol/#monitoring-communication","title":"Monitoring Communication","text":""},{"location":"chemstation-api/file-protocol/#enable-verbose-mode","title":"Enable Verbose Mode","text":"<pre><code>from ChemstationAPI.core.communication_config import CommunicationConfig\n\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# Now all commands and responses are printed\napi.send(\"response$ = _METHPATH$\")\n# Output:\n# Sending command 1: response$ = _METHPATH$\n# Received response 1: C:\\Chem32\\1\\Methods\\CE\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#error-handling","title":"Error Handling","text":""},{"location":"chemstation-api/file-protocol/#timeout-handling","title":"Timeout Handling","text":"<pre><code># Increase timeout for long operations\napi.send(\"RunMethod _DATAPATH$,, Sample001\", timeout=30.0)\n</code></pre>"},{"location":"chemstation-api/file-protocol/#error-responses","title":"Error Responses","text":"<p>ChemStation errors are detected and raised as exceptions: tady hod uk\u00e1zku, \u017e kdy\u017e nap\u00ed\u0161e\u0161 blbost, tak ti to vyhod\u00ed chybu</p> <pre><code>try:\n    api.send(\"InvalidCommand\")\nexcept ChemstationError as e:\n    print(f\"Error: {e}\")\n    # Output: Error: ChemStation command failed: ERROR: The command InvalidCommand failed to execute\n</code></pre>"},{"location":"chemstation-api/file-protocol/#macro-initialization","title":"Macro Initialization","text":"<p>The ChemStation macro must be running for communication to work:</p> <p>ChemStation command processor: <pre><code>macro \"C:\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p> <p>The macro runs in a continuous loop: 1. Reads command file every 200ms 2. Executes new commands (higher number than last) 3. Writes responses 4. Continues until \"Exit\" command</p>"},{"location":"chemstation-api/file-protocol/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"chemstation-api/file-protocol/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from ChemstationAPI.core.communication_config import CommunicationConfig\n\nconfig = CommunicationConfig(\n    comm_dir=\"custom/path\",\n    max_command_number=1000,\n    retry_delay=0.2,\n    max_retries=5,\n    default_timeout=10.0\n)\n\napi = ChemstationAPI(config)\n</code></pre>"},{"location":"chemstation-api/file-protocol/#configuration-options","title":"Configuration Options","text":"Parameter Default Description <code>comm_dir</code> <code>\"core/communication_files\"</code> Communication directory <code>max_command_number</code> <code>256</code> Maximum before wraparound <code>retry_delay</code> <code>0.1</code> Seconds between retries <code>max_retries</code> <code>10</code> Maximum retry attempts <code>default_timeout</code> <code>5.0</code> Default command timeout <code>verbose</code> <code>False</code> Enable debug output"},{"location":"chemstation-api/file-protocol/#troubleshooting-protocol-issues","title":"Troubleshooting Protocol Issues","text":""},{"location":"chemstation-api/file-protocol/#no-response-received","title":"No Response Received","text":"<p>Symptoms: TimeoutError after sending command</p> <p>Check: 1. Is ChemStation macro running? 2. Are file paths correct? 3. Can Python write to communication directory?</p>"},{"location":"chemstation-api/file-protocol/#wrong-response-received","title":"Wrong Response Received","text":"<p>Symptoms: Response doesn't match command</p> <p>Check: 1. Command numbering synchronization 2. Multiple Python instances running? 3. Old responses in response file?</p>"},{"location":"chemstation-api/file-protocol/#slow-communication","title":"Slow Communication","text":"<p>Symptoms: Commands take long to execute</p> <p>Solutions: 1. Reduce retry_delay in configuration 2. Check disk performance 3. Ensure antivirus isn't scanning communication files</p> <p>Understanding the Protocol</p> <p>The file-based protocol might seem complex, but it's very reliable once properly configured. Most issues come from macro not running or incorrect file paths.</p>"},{"location":"chemstation-api/introduction/","title":"ChemStation API Introduction","text":""},{"location":"chemstation-api/introduction/#what-is-the-chemstation-api","title":"What is the ChemStation API?","text":"<p>The ChemStation API provides a Python interface for controlling Agilent ChemStation software and CE instruments. It enables automated control of capillary electrophoresis systems without manual intervention.</p> <p>N\u011bjak tady popi\u0161 \u017ee to fungujhe tak, \u017ee se odes\u00edlaj\u00ed p\u0159\u00edkazy do chmstation comanline (command processor). Por snadn\u011bj\u0161\u00ed pou\u017e\u00edv\u00e1n\u00ed, jsou ji\u017e p\u0159edn\u011bp\u0159ivan\u00e9 p\u0159\u00edkazy. Nen\u00ed to jen \u010dist\u011b por CE ale je to vyv\u00fdjeno na CE a mnho p\u0159\u00edkaz\u016f je tomu usp\u016fsobeno. Por fungov\u00e1n\u00ed je pot\u0159eba m\u00edt zapl\u00fd chemstation se spesi\u00e1ln\u00edm makrem (viz dal\u0161\u00ed kapitola)</p>"},{"location":"chemstation-api/introduction/#key-capabilities","title":"Key Capabilities","text":""},{"location":"chemstation-api/introduction/#instrument-control-ce","title":"Instrument Control (CE)","text":"<ul> <li>Load and unload vials from carousel to analysis positions</li> <li>Control capillary conditioning and flushing</li> <li>Apply pressure for sample injection</li> <li>Monitor vial positions and system state</li> </ul>"},{"location":"chemstation-api/introduction/#method-management","title":"Method Management","text":"<ul> <li>Load existin methods</li> <li>Run methods with sample-specific information</li> <li>je\u0161t\u011b n\u011bco</li> </ul>"},{"location":"chemstation-api/introduction/#sequence-operations","title":"Sequence Operations","text":"<ul> <li>Load and save sequence</li> <li>Modify sequence tables</li> <li>Import sequence tables from Excel</li> <li>Control sequence execution (start/pause/resume)</li> </ul>"},{"location":"chemstation-api/introduction/#system-monitoring","title":"System Monitoring","text":"<ul> <li>Real-time status monitoring</li> <li>Analysis progress tracking</li> <li>Error detection and handling</li> <li>System readiness validation</li> </ul>"},{"location":"chemstation-api/introduction/#architecture-overview","title":"Architecture Overview","text":"<p>Tady to nen\u00ed \u00fapln\u011b p\u0159esn\u00e9, na za\u010d\u00e1tkuje python, pak je api, pot\u00ed jsou mody, kter\u00e9 n\u00e1sledn\u011b jsou do filebase protokolu (low lelw api), kter\u00e9 zapisuje do soubor\u016f a pak to jde do makra ale jde to tam obou stran\u011b, pak se odpov\u011bdi vraz zp\u011bt</p> <pre><code>graph TD\n    A[Python Application] --&gt; B[ChemStation API]\n    B --&gt; C[File-Based Protocol]\n    C --&gt; D[ChemStation Macro]\n    D --&gt; E[ChemStation Software]\n    E --&gt; F[CE Instrument]\n\n    B --&gt; G[CE Module]\n    B --&gt; H[Methods Module]\n    B --&gt; I[Sequence Module]\n    B --&gt; J[System Module]\n    B --&gt; K[Validation Module]</code></pre>"},{"location":"chemstation-api/introduction/#how-it-works","title":"How It Works","text":"<p>Funguje to tak, \u017ee se zad\u00e1 po\u0161le p\u0159\u00edkaz z pythonu, v dan\u00e9m modulu je p\u0159\u00edmo p\u0159\u00edkaz pro chemstation, tker\u00fd se ode\u0161le p\u0159es lowlevel api do souboru a p\u0159es makro v chemstationu do command processoru, po\u0161le se odpoved do soubru, kter\u00fd low level api p\u0159et\u011b a ode\u0161le zp\u011bt do pythonu. N\u011bjak tak</p> <ol> <li>Communication Layer: Uses file-based protocol for reliable command exchange</li> <li>Module Organization: Functionality divided into logical modules</li> <li>Command Processing: Commands sent to ChemStation's Command Processor</li> <li>Response Handling: Automatic response parsing and error detection</li> <li>State Management: Tracks instrument and analysis states</li> </ol>"},{"location":"chemstation-api/introduction/#core-components","title":"Core Components","text":""},{"location":"chemstation-api/introduction/#chemstationapi-class","title":"ChemstationAPI Class","text":"<p>The main entry point providing access to all modules:</p> <pre><code>from ChemstationAPI import ChemstationAPI\n\napi = ChemstationAPI()\n</code></pre>"},{"location":"chemstation-api/introduction/#modules","title":"Modules","text":"<p>CE Module (<code>api.ce</code>) - Vial handling operations - Capillary conditioning - Pressure control</p> <p>Methods Module (<code>api.method</code>) - Method loading and saving - Method execution - Parameter modification</p> <p>Sequence Module (<code>api.sequence</code>) - Sequence table management - Excel integration - Batch execution control</p> <p>System Module (<code>api.system</code>) - Status monitoring - Progress tracking - System control</p> <p>Validation Module (<code>api.validation</code>) - Pre-operation checks - File existence validation - System state verification</p>"},{"location":"chemstation-api/introduction/#typical-workflow","title":"Typical Workflow","text":"<pre><code># 1. Initialize connection\napi = ChemstationAPI()\n\n# 2. Validate prerequisites\napi.validation.validate_vial_in_system(15)\napi.validation.validate_method_name(\"CE_Analysis\")\n\n# 3. Prepare instrument\napi.ce.load_vial_to_position(15, \"inlet\")\napi.ce.load_vial_to_position(48, \"outlet\")\n\n# 4. Condition capillary\napi.ce.flush_capillary(60.0)\n\n# 5. Run analysis\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Analysis\",\n    sample_name=\"Sample_001\"\n)\n\n# 6. Monitor progress\nwhile api.system.method_on():\n    remaining = api.system.get_remaining_analysis_time()\n    print(f\"Time remaining: {remaining:.1f} minutes\")\n</code></pre>"},{"location":"chemstation-api/introduction/#benefits","title":"Benefits","text":""},{"location":"chemstation-api/introduction/#automation","title":"Automation","text":"<ul> <li>Eliminate manual operations</li> <li>Process large sample batches</li> <li>Reduce human error</li> </ul>"},{"location":"chemstation-api/introduction/#reproducibility","title":"Reproducibility","text":"<ul> <li>Consistent method execution</li> <li>Standardized workflows</li> <li>Traceable operations</li> </ul>"},{"location":"chemstation-api/introduction/#integration","title":"Integration","text":"<ul> <li>Connect other systems (pumps, SIA, ...)</li> <li>Implement custom workflows</li> <li>Create adaptive methods</li> </ul>"},{"location":"chemstation-api/introduction/#efficiency","title":"Efficiency","text":"<ul> <li>Parallel sample preparation</li> <li>Reduced analysis time</li> <li>Increased throughput</li> </ul> <p>Next Steps</p> <p>Learn about the File-Based Protocol that enables communication with ChemStation.</p>"},{"location":"chemstation-api/methods-sequences/","title":"Methods and Sequences","text":"<p>Learn how to work with CE methods and create automated sequences for batch analysis.</p>"},{"location":"chemstation-api/methods-sequences/#understanding-methods","title":"Understanding Methods","text":"<p>CE methods define all analytical parameters: - Voltage and current settings - Temperature control - Injection parameters - Detection wavelengths - Time programs - Data acquisition settings</p>"},{"location":"chemstation-api/methods-sequences/#method-management","title":"Method Management","text":""},{"location":"chemstation-api/methods-sequences/#listing-available-methods","title":"Listing Available Methods","text":"<pre><code># Get method directory path\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Method directory: {method_path}\")\n\n# List methods using Python\nimport os\nmethods = [f for f in os.listdir(method_path) if f.endswith('.M')]\nprint(\"Available methods:\", methods)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#loading-methods","title":"Loading Methods","text":"<pre><code># Load from default directory\napi.method.load(\"CE_Standard_Method\")\n\n# Load with full validation\ntry:\n    api.validation.validate_method_name(\"CE_Protein_Analysis\")\n    api.method.load(\"CE_Protein_Analysis\")\n    print(\"Method loaded successfully\")\nexcept ValidationError:\n    print(\"Method not found!\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#modifying-method-parameters","title":"Modifying Method Parameters","text":"<p>While the API doesn't directly modify method parameters, you can:</p> <ol> <li>Load a template method</li> <li>Save with modifications via ChemStation</li> <li>Use the modified method</li> </ol> <pre><code># Load template\napi.method.load(\"Template_Method\")\n\n# Make changes in ChemStation UI...\n\n# Save as new method\napi.method.save(\"Modified_Method\", comment=\"Voltage increased to 30kV\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#running-methods-with-custom-parameters","title":"Running Methods with Custom Parameters","text":"<pre><code># Simple run - uses current loaded method\napi.method.run(\"Sample_001\")\n\n# Run specific method with all parameters\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein_Analysis\",\n    sample_name=\"BSA_Standard_1mg\",\n    comment=\"Validation run, fresh buffer\",\n    subdirectory_name=\"Validation_2024\"\n)\n\n# The method creates a temporary register for custom parameters\n# without modifying the original method file\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#understanding-sequences","title":"Understanding Sequences","text":"<p>Sequences automate the analysis of multiple samples with different parameters:</p>"},{"location":"chemstation-api/methods-sequences/#sequence-structure","title":"Sequence Structure","text":"Column Description Example Vial Carousel position 15 Method Method name CE_Protein.M SampleName Sample identifier BSA_001 SampleInfo Additional info 1 mg/mL, pH 7.4 DataFileName Custom filename Project_X_001 InjVial Injection parameters 1"},{"location":"chemstation-api/methods-sequences/#creating-sequences-manually","title":"Creating Sequences Manually","text":"<pre><code># Load existing sequence\napi.sequence.load_sequence(\"Daily_QC\")\n\n# Modify specific row\napi.sequence.modify_sequence_row(\n    row=1,\n    vial_sample=\"10\",\n    method=\"CE_Standard\",\n    sample_name=\"QC_Standard_001\",\n    sample_info=\"Fresh preparation\"\n)\n\n# Add more samples\nfor i in range(2, 6):\n    api.sequence.modify_sequence_row(\n        row=i,\n        vial_sample=str(10 + i),\n        method=\"CE_Standard\",\n        sample_name=f\"QC_Standard_{i:03d}\",\n        sample_info=\"Replicate analysis\"\n    )\n\n# Save sequence\napi.sequence.save_sequence(\"Daily_QC_Modified\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#excel-integration","title":"Excel Integration","text":""},{"location":"chemstation-api/methods-sequences/#preparing-excel-file","title":"Preparing Excel File","text":"<p>Create an Excel file with columns matching your needs:</p> Vial Method Sample Info Replicate 10 CE_Standard STD_001 1 mg/mL 1 11 CE_Standard STD_002 2 mg/mL 1 12 CE_Modified TEST_001 Unknown 1"},{"location":"chemstation-api/methods-sequences/#importing-from-excel","title":"Importing from Excel","text":"<pre><code># Basic import\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"sample_list.xlsx\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample\"\n)\n\n# Full import with all columns\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"complex_sequence.xlsx\",\n    sequence_name=\"Research_Project_2024\",  # Load this sequence first\n    sheet_name=0,  # First worksheet\n    vial_column=\"Vial_Position\",\n    method_column=\"CE_Method\",\n    sample_name_column=\"Sample_ID\",\n    sample_info_column=\"Description\",\n    filename_column=\"Data_Name\",\n    replicate_column=\"Rep_Number\"\n)\n</code></pre> <p>Excel Requirements</p> <ul> <li>Excel must be installed on the system</li> <li>File should not be open during import</li> <li>Column names must match exactly (case-sensitive)</li> </ul>"},{"location":"chemstation-api/methods-sequences/#sequence-execution","title":"Sequence Execution","text":""},{"location":"chemstation-api/methods-sequences/#starting-a-sequence","title":"Starting a Sequence","text":"<pre><code># Load and start sequence\napi.sequence.load_sequence(\"Daily_Analysis\")\napi.sequence.start()\n\n# Monitor progress\nwhile api.system.method_on():\n    status = api.system.status()\n    print(f\"Status: {status}\")\n    time.sleep(60)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-control","title":"Sequence Control","text":"<pre><code># Pause after current sample\napi.sequence.pause()\nprint(\"Sequence paused - current sample will complete\")\n\n# Resume sequence\napi.sequence.resume()\nprint(\"Sequence resumed\")\n\n# Emergency stop\napi.system.abort_run()\nprint(\"Sequence aborted!\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#advanced-sequence-workflows","title":"Advanced Sequence Workflows","text":""},{"location":"chemstation-api/methods-sequences/#validation-sequence-with-standards","title":"Validation Sequence with Standards","text":"<pre><code>def create_validation_sequence(standard_vials, sample_vials):\n    \"\"\"Create sequence with bracketing standards.\"\"\"\n\n    row = 1\n\n    # Initial standards\n    for vial in standard_vials[:2]:\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Standard\",\n            sample_name=f\"STD_{row:03d}\",\n            sample_info=\"System suitability\"\n        )\n        row += 1\n\n    # Samples with bracketing standards\n    for i, vial in enumerate(sample_vials):\n        # Sample\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Analysis\",\n            sample_name=f\"Sample_{i+1:03d}\",\n            sample_info=\"Test sample\"\n        )\n        row += 1\n\n        # Bracket standard every 5 samples\n        if (i + 1) % 5 == 0:\n            api.sequence.modify_sequence_row(\n                row=row,\n                vial_sample=str(standard_vials[0]),\n                method=\"CE_Standard\",\n                sample_name=f\"STD_B{row:03d}\",\n                sample_info=\"Bracket standard\"\n            )\n            row += 1\n\n    # Final standards\n    for vial in standard_vials[:2]:\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Standard\",\n            sample_name=f\"STD_F{row:03d}\",\n            sample_info=\"Final check\"\n        )\n        row += 1\n\n    api.sequence.save_sequence(\"Validation_Sequence\")\n\n# Create the sequence\ncreate_validation_sequence(\n    standard_vials=[1, 2],\n    sample_vials=list(range(10, 25))\n)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#multi-method-sequence","title":"Multi-Method Sequence","text":"<pre><code>def create_screening_sequence(samples_info):\n    \"\"\"Create sequence with different methods for screening.\"\"\"\n\n    for row, (vial, sample_type, sample_name) in enumerate(samples_info, 1):\n        # Select method based on sample type\n        if sample_type == \"protein\":\n            method = \"CE_Protein_SDS\"\n        elif sample_type == \"small_molecule\":\n            method = \"MEKC_General\"\n        elif sample_type == \"anion\":\n            method = \"CE_Anions\"\n        else:\n            method = \"CE_Screening\"\n\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=method,\n            sample_name=sample_name,\n            sample_info=f\"Type: {sample_type}\"\n        )\n\n    api.sequence.save_sequence(\"Screening_Sequence\")\n\n# Define samples\nsamples = [\n    (10, \"protein\", \"BSA_Test\"),\n    (11, \"small_molecule\", \"Caffeine_Std\"),\n    (12, \"anion\", \"Chloride_Mix\"),\n    (13, \"protein\", \"Antibody_001\"),\n    (14, \"unknown\", \"Customer_Sample_X\")\n]\n\ncreate_screening_sequence(samples)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-data-management","title":"Sequence Data Management","text":""},{"location":"chemstation-api/methods-sequences/#organizing-data-files","title":"Organizing Data Files","text":"<pre><code># Set up data organization\nfrom datetime import datetime\n\n# Create project-specific subdirectory\nproject_name = \"Protein_Stability_Study\"\ndate_stamp = datetime.now().strftime(\"%Y%m%d\")\n\n# Use in sequence\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein\",\n    sample_name=\"BSA_T0\",\n    subdirectory_name=f\"{project_name}_{date_stamp}\"\n)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-templates","title":"Sequence Templates","text":"<p>Create reusable sequence templates:</p> <pre><code>def create_qc_sequence_template():\n    \"\"\"Create standard QC sequence template.\"\"\"\n\n    qc_positions = {\n        1: (\"System_Suitability\", \"CE_QC\"),\n        2: (\"Blank\", \"CE_QC\"),\n        3: (\"Standard_Low\", \"CE_QC\"),\n        4: (\"Standard_Mid\", \"CE_QC\"),\n        5: (\"Standard_High\", \"CE_QC\"),\n    }\n\n    for row, (vial, (sample_type, method)) in enumerate(qc_positions.items(), 1):\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=method,\n            sample_name=f\"QC_{sample_type}\",\n            sample_info=\"Daily QC\"\n        )\n\n    api.sequence.save_sequence(\"QC_Template\")\n    print(\"QC template created - modify dates/info before running\")\n\ncreate_qc_sequence_template()\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#best-practices","title":"Best Practices","text":""},{"location":"chemstation-api/methods-sequences/#1-validate-before-execution","title":"1. Validate Before Execution","text":"<pre><code>def validate_sequence_ready(sequence_name):\n    \"\"\"Validate all sequence requirements before starting.\"\"\"\n\n    # Load sequence\n    api.sequence.load_sequence(sequence_name)\n\n    # Get vial list from sequence (manual check needed)\n    # For now, validate known vials\n    required_vials = [1, 2, 3, 10, 11, 12]  # Example\n\n    try:\n        # Check all vials present\n        api.validation.list_vial_validation(required_vials)\n\n        # Check all methods exist\n        methods = [\"CE_QC\", \"CE_Analysis\"]  # Example\n        for method in methods:\n            api.validation.validate_method_name(method)\n\n        # Check system ready\n        if api.system.status() != \"STANDBY\":\n            raise SystemError(\"System not in standby\")\n\n        print(f\"Sequence {sequence_name} ready to run!\")\n        return True\n\n    except Exception as e:\n        print(f\"Sequence validation failed: {e}\")\n        return False\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#2-error-recovery","title":"2. Error Recovery","text":"<pre><code>def run_sequence_with_recovery(sequence_name):\n    \"\"\"Run sequence with error recovery.\"\"\"\n\n    try:\n        api.sequence.load_sequence(sequence_name)\n        api.sequence.start()\n\n        while api.system.method_on():\n            status = api.system.status()\n\n            if status == \"ERROR\":\n                print(\"Error detected - attempting recovery\")\n                api.system.abort_run()\n                time.sleep(30)\n\n                # Try to resume\n                api.sequence.resume()\n\n            time.sleep(30)\n\n    except Exception as e:\n        print(f\"Sequence failed: {e}\")\n        api.system.abort_run()\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#3-progress-tracking","title":"3. Progress Tracking","text":"<pre><code>def track_sequence_progress():\n    \"\"\"Track and log sequence progress.\"\"\"\n\n    sample_count = 0\n    start_time = time.time()\n\n    while api.system.method_on():\n        if api.system.status() == \"RUN\":\n            sample_count += 1\n            elapsed = (time.time() - start_time) / 60\n            remaining = api.system.get_remaining_analysis_time()\n\n            print(f\"Sample {sample_count} - \"\n                  f\"Elapsed: {elapsed:.1f} min - \"\n                  f\"Current remaining: {remaining:.1f} min\")\n\n        time.sleep(60)\n\n    total_time = (time.time() - start_time) / 60\n    print(f\"Sequence complete! {sample_count} samples in {total_time:.1f} minutes\")\n</code></pre> <p>You're ready!</p> <p>You now know how to create and run complex analytical sequences. Check out the Tutorials for complete workflow examples.</p>"},{"location":"chemstation-api/troubleshooting/","title":"ChemStation Troubleshooting Guide","text":"<p>Detailed troubleshooting for ChemStation-specific issues.</p>"},{"location":"chemstation-api/troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"chemstation-api/troubleshooting/#macro-not-running","title":"Macro Not Running","text":"<p>Symptoms: - <code>ConnectionError: Failed to establish communication with ChemStation</code> - No response to commands - Timeout errors on initialization</p> <p>Solutions:</p> <ol> <li> <p>Load the macro manually: <pre><code>In ChemStation command line:\nmacro \"C:\\full\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p> </li> <li> <p>Verify macro is running: <pre><code>Check ChemStation command line for:\n\"Start Python communication\"\n</code></pre></p> </li> <li> <p>Auto-load macro on startup:</p> </li> <li>Edit ChemStation's <code>user.mac</code> file</li> <li>Add macro load command</li> <li>Restart ChemStation</li> </ol>"},{"location":"chemstation-api/troubleshooting/#file-access-issues","title":"File Access Issues","text":"<p>Symptoms: - <code>FileOperationError: Failed to write command</code> - Permission denied errors - Communication files not created</p> <p>Solutions:</p> <ol> <li> <p>Check directory permissions: <pre><code>import os\ncomm_dir = r\"...\\ChemstationAPI\\core\\communication_files\"\nprint(f\"Exists: {os.path.exists(comm_dir)}\")\nprint(f\"Writable: {os.access(comm_dir, os.W_OK)}\")\n</code></pre></p> </li> <li> <p>Run as Administrator:</p> </li> <li>Right-click Python/IDE</li> <li> <p>Select \"Run as administrator\"</p> </li> <li> <p>Antivirus interference:</p> </li> <li>Add communication directory to exclusions</li> <li>Disable real-time scanning temporarily</li> </ol>"},{"location":"chemstation-api/troubleshooting/#command-syntax-errors","title":"Command Syntax Errors","text":"<p>Symptoms: - <code>ChemstationError: Command failed: ERROR: ...</code> - Invalid command messages - Unexpected responses</p> <p>Solutions:</p> <ol> <li> <p>Check command syntax: <pre><code># Correct: Quotes around string parameters\napi.send('LoadMethod _METHPATH$, \"Method.M\"')\n\n# Wrong: Missing quotes\napi.send('LoadMethod _METHPATH$, Method.M')\n</code></pre></p> </li> <li> <p>Verify response variable: <pre><code># For return values, use response$\nvalue = api.send(\"response$ = _METHPATH$\")\n\n# Without response$, returns None\napi.send(\"LoadMethod ...\")  # No return value\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#method-issues","title":"Method Issues","text":""},{"location":"chemstation-api/troubleshooting/#method-not-found","title":"Method Not Found","text":"<p>Symptoms: - <code>ValidationError: Method 'X' not found</code> - Method loading fails - Case sensitivity issues</p> <p>Solutions:</p> <ol> <li> <p>Check exact filename: <pre><code>import os\nmethod_path = api.send(\"response$ = _METHPATH$\")\nmethods = [f for f in os.listdir(method_path) if f.endswith('.M')]\nprint(\"Available methods:\", methods)\n</code></pre></p> </li> <li> <p>Case-insensitive validation: <pre><code># The API handles case-insensitive matching\napi.validation.validate_method_name(\"method_name\")  # Without .M\n</code></pre></p> </li> <li> <p>Path issues: <pre><code># Use full path if needed\napi.method.load(\"MyMethod\", method_path=\"C:\\\\Methods\\\\Special\\\\\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#method-execution-failures","title":"Method Execution Failures","text":"<p>Symptoms: - <code>MethodError: Method failed to start</code> - Analysis doesn't begin - System remains in STANDBY</p> <p>Solutions:</p> <ol> <li> <p>Check prerequisites: <pre><code># Verify system ready\nprint(f\"Status: {api.system.status()}\")\nprint(f\"Method on: {api.system.method_on()}\")\n\n# Check vials loaded\napi.validation.vial_in_position(\"inlet\")\napi.validation.vial_in_position(\"outlet\")\n</code></pre></p> </li> <li> <p>Clear previous errors: <pre><code># Abort any stuck operations\napi.system.abort_run()\ntime.sleep(5)\n\n# Wait for ready\napi.system.wait_for_ready(60)\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#sequence-problems","title":"Sequence Problems","text":""},{"location":"chemstation-api/troubleshooting/#excel-import-failures","title":"Excel Import Failures","text":"<p>Symptoms: - <code>SequenceError: Failed to import from Excel</code> - Empty sequence after import - Column mapping errors</p> <p>Solutions:</p> <ol> <li> <p>Verify Excel format: <pre><code>import pandas as pd\n\n# Check your Excel file\ndf = pd.read_excel(\"samples.xlsx\")\nprint(\"Columns:\", df.columns.tolist())\nprint(\"First row:\", df.iloc[0].to_dict())\n</code></pre></p> </li> <li> <p>Column name matching: <pre><code># Exact column names required\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"samples.xlsx\",\n    vial_column=\"Vial\",         # Must match exactly\n    method_column=\"Method\",     # Case sensitive\n    sample_name_column=\"Name\"   # No extra spaces\n)\n</code></pre></p> </li> <li> <p>Excel application issues:</p> </li> <li>Close Excel before import</li> <li>Ensure Excel is installed</li> <li>Try saving as .xlsx (not .xls)</li> </ol>"},{"location":"chemstation-api/troubleshooting/#sequence-execution-issues","title":"Sequence Execution Issues","text":"<p>Symptoms: - Sequence stops unexpectedly - Skips samples - Wrong vial loaded</p> <p>Solutions:</p> <ol> <li> <p>Monitor sequence state: <pre><code># Check sequence progress\nwhile api.system.method_on():\n    status = api.system.status()\n    rc_status = api.system.RC_status()\n    print(f\"Status: {status}, RC: {rc_status}\")\n    time.sleep(30)\n</code></pre></p> </li> <li> <p>Validate all vials: <pre><code># Before starting sequence\nvials_needed = [1, 2, 3, 10, 11, 12]  # Your vial list\napi.validation.list_vial_validation(vials_needed)\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#system-status-issues","title":"System Status Issues","text":""},{"location":"chemstation-api/troubleshooting/#incorrect-status-reporting","title":"Incorrect Status Reporting","text":"<p>Symptoms: - Status doesn't update - Wrong remaining time - Method appears stuck</p> <p>Solutions:</p> <ol> <li> <p>Force status update: <pre><code># Multiple status checks\nfor _ in range(3):\n    status = api.system.status()\n    print(f\"Status: {status}\")\n    time.sleep(1)\n</code></pre></p> </li> <li> <p>Direct register access: <pre><code># Get status from RC registers\nrc_state = api.send('response$ = ObjHdrText$(RCCE1Status[1], \"RunState\")')\nprint(f\"RC State: {rc_state}\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#timing-discrepancies","title":"Timing Discrepancies","text":"<p>Symptoms: - Incorrect analysis time - Progress calculation wrong - Early termination</p> <p>Solutions:</p> <pre><code># Robust time monitoring\ndef monitor_with_validation():\n    last_remaining = float('inf')\n    stuck_count = 0\n\n    while api.system.method_on():\n        remaining = api.system.get_remaining_analysis_time()\n\n        # Check if time is updating\n        if remaining == last_remaining:\n            stuck_count += 1\n            if stuck_count &gt; 10:\n                print(\"Warning: Time not updating\")\n        else:\n            stuck_count = 0\n\n        last_remaining = remaining\n        time.sleep(10)\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"chemstation-api/troubleshooting/#complete-system-reset","title":"Complete System Reset","text":"<pre><code>def full_system_reset():\n    \"\"\"Complete reset procedure.\"\"\"\n\n    print(\"Performing full system reset...\")\n\n    # 1. Abort any running operations\n    try:\n        api.system.abort_run()\n    except:\n        pass\n\n    # 2. Unload all vials\n    for position in [\"inlet\", \"outlet\", \"replenishment\"]:\n        try:\n            api.ce.unload_vial_from_position(position)\n        except:\n            pass\n\n    # 3. Reinitialize communication\n    time.sleep(5)\n    api = ChemstationAPI()\n\n    # 4. Verify ready state\n    if api.system.wait_for_ready(60):\n        print(\"System reset complete\")\n    else:\n        print(\"System reset failed - manual intervention required\")\n\n    return api\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#communication-recovery","title":"Communication Recovery","text":"<pre><code>def recover_communication():\n    \"\"\"Recover from communication failures.\"\"\"\n\n    # 1. Clear communication files\n    import os\n    comm_dir = \"path/to/communication_files\"\n\n    for filename in [\"command\", \"response\"]:\n        filepath = os.path.join(comm_dir, filename)\n        try:\n            os.remove(filepath)\n        except:\n            pass\n\n    # 2. Restart macro in ChemStation\n    print(\"In ChemStation, execute:\")\n    print('macro \"path\\\\ChemPyConnect.mac\"; Python_Stop')\n    print('macro \"path\\\\ChemPyConnect.mac\"; Python_Run')\n    input(\"Press Enter when complete...\")\n\n    # 3. Reconnect\n    try:\n        api = ChemstationAPI()\n        print(\"Communication restored\")\n        return api\n    except:\n        print(\"Communication recovery failed\")\n        return None\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"chemstation-api/troubleshooting/#slow-command-response","title":"Slow Command Response","text":"<p>Solutions:</p> <ol> <li> <p>Reduce retry delay: <pre><code>config = CommunicationConfig(\n    retry_delay=0.05,  # 50ms instead of 100ms\n    max_retries=20     # More retries with shorter delay\n)\n</code></pre></p> </li> <li> <p>Batch commands: <pre><code># Instead of multiple calls\n# api.send(\"command1\")\n# api.send(\"command2\")\n\n# Use macro for batch operations\napi.send('macro \"batch_commands.mac\"; execute_all')\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Solutions:</p> <ol> <li> <p>Clear old data: <pre><code># Periodically reinitialize\nif command_count &gt; 1000:\n    api = ChemstationAPI()  # Fresh connection\n</code></pre></p> </li> <li> <p>Monitor file sizes: <pre><code>import os\n\ndef check_comm_files():\n    for file in [\"command\", \"response\"]:\n        path = f\"communication_files/{file}\"\n        size = os.path.getsize(path) / 1024  # KB\n        if size &gt; 100:\n            print(f\"Warning: {file} is {size:.1f} KB\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#diagnostic-tools","title":"Diagnostic Tools","text":""},{"location":"chemstation-api/troubleshooting/#communication-monitor","title":"Communication Monitor","text":"<pre><code>def monitor_communication(duration=60):\n    \"\"\"Monitor communication for specified duration.\"\"\"\n\n    import time\n    from datetime import datetime\n\n    start = time.time()\n    command_count = 0\n    error_count = 0\n\n    while time.time() - start &lt; duration:\n        try:\n            # Test command\n            result = api.send(\"response$ = ACQSTATUS$\")\n            command_count += 1\n            print(f\"\\r{datetime.now()}: {result}\", end=\"\")\n        except Exception as e:\n            error_count += 1\n            print(f\"\\nError: {e}\")\n\n        time.sleep(1)\n\n    print(f\"\\n\\nSummary: {command_count} commands, {error_count} errors\")\n    print(f\"Success rate: {(command_count/(command_count+error_count))*100:.1f}%\")\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#register-browser","title":"Register Browser","text":"<pre><code># Add register browser to ChemStation menu\napi.system.add_register_reader()\n\n# Then in ChemStation:\n# Menu \u2192 Debug \u2192 Show Registers\n# Browse all system registers and values\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate before operations</li> <li>Use appropriate timeouts for different operations</li> <li>Implement retry logic for critical operations</li> <li>Monitor system state during long operations</li> <li>Keep communication files clean</li> <li>Document any custom macros or modifications</li> </ol> <p>When All Else Fails</p> <p>If persistent issues: 1. Restart ChemStation 2. Reboot computer 3. Check for ChemStation updates 4. Verify hardware connections 5. Contact Agilent support</p>"},{"location":"sia-api/basic-operations/","title":"Basic SIA Operations","text":"<p>Learn how to control syringe pumps and valve selectors for automated liquid handling.</p>"},{"location":"sia-api/basic-operations/#device-initialization","title":"Device Initialization","text":""},{"location":"sia-api/basic-operations/#syringe-pump-setup","title":"Syringe Pump Setup","text":"<pre><code>from SIA_API.devices import SyringeController\n\n# Initialize syringe pump\nsyringe = SyringeController(\n    port=\"COM3\",           # Serial port\n    syringe_size=1000,     # 1000 \u00b5L syringe\n    address=\"/1\",          # Device address (default)\n    baudrate=9600,         # Communication speed\n    print_info=True        # Show syringe specifications\n)\n\n# Output:\n# Syringe size: 1000 \u00b5L\n# Syringe resolution: 0.33 \u00b5L\n# Minimum flow rate: 50.0 \u00b5L/min\n# Maximum flow rate: 60000.0 \u00b5L/min\n</code></pre>"},{"location":"sia-api/basic-operations/#valve-selector-setup","title":"Valve Selector Setup","text":"<pre><code>from SIA_API.devices import ValveSelector\n\n# Initialize valve selector\nvalve = ValveSelector(\n    port=\"COM4\",          # Serial port\n    num_positions=8,      # 8-position valve\n    prefix=\"/Z\",          # Command prefix (VICI standard)\n    baudrate=9600         # Communication speed\n)\n</code></pre>"},{"location":"sia-api/basic-operations/#testing-communication","title":"Testing Communication","text":"<pre><code># Test syringe communication\nresponse = syringe.send_command(\"?\", get_response=True)\nprint(f\"Syringe response: {response}\")\n\n# Test valve - should move to position 1\nvalve.position(1)\nprint(\"Valve moved to position 1\")\n</code></pre>"},{"location":"sia-api/basic-operations/#syringe-operations","title":"Syringe Operations","text":""},{"location":"sia-api/basic-operations/#initialization","title":"Initialization","text":"<p>Always initialize the syringe before use:</p> <pre><code># Initialize to home position\nsyringe.initialize()\nprint(\"Syringe initialized to zero position\")\n</code></pre> <p>Initialization Behavior</p> <ul> <li>Syringe moves to absolute zero position</li> <li>Volume counter resets to 0</li> <li>May take several seconds for large syringes</li> </ul>"},{"location":"sia-api/basic-operations/#flow-rate-control","title":"Flow Rate Control","text":"<pre><code># Set flow rate in \u00b5L/min\nsyringe.set_speed_uL_min(1000)  # 1 mL/min\n\n# Different speeds for different operations\nSPEED_FAST = 3500      # Fast transfer\nSPEED_NORMAL = 2000    # Normal dispensing\nSPEED_SLOW = 1000      # Precise operations\nSPEED_MIXING = 500     # Gentle mixing\n\n# Example: Variable speed operation\nsyringe.set_speed_uL_min(SPEED_FAST)\nsyringe.aspirate(500)\nsyringe.set_speed_uL_min(SPEED_SLOW)\nsyringe.dispense(500)\n</code></pre>"},{"location":"sia-api/basic-operations/#aspiration-drawing-fluid","title":"Aspiration (Drawing Fluid)","text":"<pre><code># Aspirate specific volume\nsyringe.aspirate(500)  # Draw 500 \u00b5L\n\n# Aspirate with non-blocking mode\nsyringe.aspirate(300, wait=False)  # Returns immediately\n\n# Fill entire syringe\nsyringe.aspirate()  # Aspirates to full capacity\n\n# Check current volume\nsyringe.print_volume_in_syringe()\n# Output: The current volume in the syringe is: 500 \u00b5l\n</code></pre>"},{"location":"sia-api/basic-operations/#dispensing","title":"Dispensing","text":"<pre><code># Dispense specific volume\nsyringe.dispense(250)  # Dispense 250 \u00b5L\n\n# Dispense all contents\nsyringe.dispense()  # Empties syringe completely\n\n# Non-blocking dispense\nsyringe.dispense(100, wait=False)\n</code></pre>"},{"location":"sia-api/basic-operations/#volume-tracking","title":"Volume Tracking","text":"<p>The API automatically tracks syringe contents:</p> <pre><code># Example with volume tracking\nsyringe.initialize()  # Volume: 0 \u00b5L\nsyringe.aspirate(600)  # Volume: 600 \u00b5L\nsyringe.dispense(200)  # Volume: 400 \u00b5L\n\n# This would raise an error:\ntry:\n    syringe.aspirate(800)  # Would exceed 1000 \u00b5L capacity!\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"sia-api/basic-operations/#valve-operations","title":"Valve Operations","text":""},{"location":"sia-api/basic-operations/#basic-positioning","title":"Basic Positioning","text":"<pre><code># Move to specific port\nvalve.position(1)  # Move to port 1\nvalve.position(5)  # Move to port 5\n\n# Multiple attempts for reliability\nvalve.position(3, num_attempts=5)  # Try up to 5 times\n</code></pre>"},{"location":"sia-api/basic-operations/#valve-configuration","title":"Valve Configuration","text":"<pre><code># Configure valve type (for syringe-mounted valves)\nsyringe.configuration_valve_type('3-Port')\n\n# Available valve types:\n# - 'No': No valve\n# - '3-Port': Standard 3-way valve\n# - '4-Port': 4-way valve\n# - '6-Port distribution': 6-port distribution valve\n# - '12-Port distribution': 12-port distribution valve\n</code></pre>"},{"location":"sia-api/basic-operations/#syringe-valve-control","title":"Syringe Valve Control","text":"<p>For valves mounted on the syringe:</p> <pre><code># 3-way valve positions\nsyringe.valve_in()   # Input position\nsyringe.valve_out()  # Output position\nsyringe.valve_up()   # Up/bypass position\n</code></pre>"},{"location":"sia-api/basic-operations/#combined-operations","title":"Combined Operations","text":""},{"location":"sia-api/basic-operations/#simple-transfer","title":"Simple Transfer","text":"<pre><code>def transfer_liquid(source_port, dest_port, volume):\n    \"\"\"Transfer liquid between ports.\"\"\"\n    # Select source\n    valve.position(source_port)\n\n    # Aspirate\n    syringe.aspirate(volume)\n\n    # Select destination\n    valve.position(dest_port)\n\n    # Dispense\n    syringe.dispense(volume)\n\n# Example: Transfer 500 \u00b5L from port 3 to port 6\ntransfer_liquid(3, 6, 500)\n</code></pre>"},{"location":"sia-api/basic-operations/#mixing-operation","title":"Mixing Operation","text":"<pre><code>def mix_by_aspiration(port, volume, cycles=3, speed=1000):\n    \"\"\"Mix solution by repeated aspiration/dispensing.\"\"\"\n    valve.position(port)\n    syringe.set_speed_uL_min(speed)\n\n    for _ in range(cycles):\n        syringe.aspirate(volume)\n        syringe.dispense(volume)\n\n    print(f\"Mixing complete at port {port}\")\n\n# Mix 200 \u00b5L at port 4\nmix_by_aspiration(4, 200, cycles=5, speed=800)\n</code></pre>"},{"location":"sia-api/basic-operations/#dilution","title":"Dilution","text":"<pre><code>def dilute_sample(sample_port, diluent_port, output_port, \n                  sample_vol, diluent_vol):\n    \"\"\"Perform sample dilution.\"\"\"\n    # Aspirate diluent first (reverse order prevents contamination)\n    valve.position(diluent_port)\n    syringe.aspirate(diluent_vol)\n\n    # Aspirate sample\n    valve.position(sample_port)\n    syringe.aspirate(sample_vol)\n\n    # Dispense mixture\n    valve.position(output_port)\n    syringe.dispense()\n\n# Example: 1:10 dilution\ndilute_sample(\n    sample_port=4,\n    diluent_port=3,  # DI water\n    output_port=6,\n    sample_vol=100,\n    diluent_vol=900\n)\n</code></pre>"},{"location":"sia-api/basic-operations/#multi-segment-aspiration","title":"Multi-Segment Aspiration","text":"<pre><code>def create_sample_sandwich(sample_port, buffer_port, volume_each=50):\n    \"\"\"Create buffer-sample-buffer sandwich.\"\"\"\n    # First buffer segment\n    valve.position(buffer_port)\n    syringe.aspirate(volume_each)\n\n    # Sample segment\n    valve.position(sample_port)\n    syringe.aspirate(volume_each)\n\n    # Second buffer segment\n    valve.position(buffer_port)\n    syringe.aspirate(volume_each)\n\n    print(\"Sample sandwich created\")\n\ncreate_sample_sandwich(sample_port=4, buffer_port=3)\n</code></pre>"},{"location":"sia-api/basic-operations/#practical-examples","title":"Practical Examples","text":""},{"location":"sia-api/basic-operations/#system-priming","title":"System Priming","text":"<pre><code>def prime_system(ports_to_prime, prime_volume=200):\n    \"\"\"Prime all system lines.\"\"\"\n    waste_port = 1\n\n    for port in ports_to_prime:\n        print(f\"Priming port {port}...\")\n\n        # Flush line\n        valve.position(port)\n        syringe.aspirate(prime_volume)\n\n        # Discard to waste\n        valve.position(waste_port)\n        syringe.dispense()\n\n    print(\"System priming complete\")\n\n# Prime all reagent lines\nprime_system([2, 3, 4, 5])\n</code></pre>"},{"location":"sia-api/basic-operations/#automated-cleaning","title":"Automated Cleaning","text":"<pre><code>def clean_system(rinse_volume=500, rinse_cycles=3):\n    \"\"\"Automated system cleaning procedure.\"\"\"\n    water_port = 3\n    waste_port = 1\n\n    for cycle in range(rinse_cycles):\n        print(f\"Rinse cycle {cycle + 1}/{rinse_cycles}\")\n\n        # Aspirate rinse solution\n        valve.position(water_port)\n        syringe.aspirate(rinse_volume)\n\n        # Flush through system\n        valve.position(waste_port)\n        syringe.dispense(rinse_volume)\n\n    # Final air purge\n    valve.position(2)  # Air port\n    syringe.aspirate(200)\n    valve.position(waste_port)\n    syringe.dispense()\n\n    print(\"Cleaning complete\")\n\nclean_system()\n</code></pre>"},{"location":"sia-api/basic-operations/#reagent-addition","title":"Reagent Addition","text":"<pre><code>def add_internal_standard(sample_ports, is_port, is_volume=10):\n    \"\"\"Add internal standard to multiple samples.\"\"\"\n\n    for port in sample_ports:\n        # Aspirate internal standard\n        valve.position(is_port)\n        syringe.aspirate(is_volume)\n\n        # Add to sample\n        valve.position(port)\n        syringe.dispense(is_volume)\n\n        # Mix\n        syringe.aspirate(50)\n        syringe.dispense(50)\n\n    print(f\"Added {is_volume} \u00b5L IS to {len(sample_ports)} samples\")\n\n# Add to samples in ports 6-10\nadd_internal_standard(range(6, 11), is_port=5)\n</code></pre>"},{"location":"sia-api/basic-operations/#error-handling","title":"Error Handling","text":""},{"location":"sia-api/basic-operations/#communication-errors","title":"Communication Errors","text":"<pre><code>try:\n    syringe.initialize()\nexcept serial.SerialException as e:\n    print(f\"Communication error: {e}\")\n    # Check COM port, cable connection, device power\n</code></pre>"},{"location":"sia-api/basic-operations/#volume-errors","title":"Volume Errors","text":"<pre><code>try:\n    syringe.aspirate(2000)  # Exceeds 1000 \u00b5L syringe\nexcept ValueError as e:\n    print(f\"Volume error: {e}\")\n    # Adjust volume or use multiple cycles\n</code></pre>"},{"location":"sia-api/basic-operations/#safe-operations","title":"Safe Operations","text":"<pre><code>def safe_aspirate(volume):\n    \"\"\"Aspirate with overflow protection.\"\"\"\n    available = syringe.syringe_size - syringe.volume_counter\n\n    if volume &gt; available:\n        print(f\"Requested {volume} \u00b5L, only {available} \u00b5L available\")\n        print(\"Dispensing current contents first...\")\n        valve.position(1)  # Waste\n        syringe.dispense()\n\n    syringe.aspirate(volume)\n\n# Use safe aspiration\nsafe_aspirate(800)\n</code></pre>"},{"location":"sia-api/basic-operations/#best-practices","title":"Best Practices","text":""},{"location":"sia-api/basic-operations/#1-always-initialize","title":"1. Always Initialize","text":"<pre><code># Start every session with initialization\nsyringe.initialize()\nprint(\"Ready for operations\")\n</code></pre>"},{"location":"sia-api/basic-operations/#2-use-appropriate-speeds","title":"2. Use Appropriate Speeds","text":"<pre><code># Match speed to operation\nsyringe.set_speed_uL_min(5000)  # Air moves fast\nsyringe.set_speed_uL_min(1000)  # Liquids move slower\nsyringe.set_speed_uL_min(500)   # Viscous liquids move slowly\n</code></pre>"},{"location":"sia-api/basic-operations/#3-prevent-cross-contamination","title":"3. Prevent Cross-Contamination","text":"<pre><code># Aspirate in reverse order of reactivity\n# 1. Diluent/buffer (least reactive)\n# 2. Sample (most reactive)\n</code></pre>"},{"location":"sia-api/basic-operations/#4-include-air-gaps","title":"4. Include Air Gaps","text":"<pre><code># Separate different liquids with air\nvalve.position(air_port)\nsyringe.aspirate(10)  # Small air gap\nvalve.position(reagent_port)\nsyringe.aspirate(100)\n</code></pre>"},{"location":"sia-api/basic-operations/#5-regular-maintenance","title":"5. Regular Maintenance","text":"<pre><code>def daily_maintenance():\n    \"\"\"Daily system maintenance routine.\"\"\"\n    # Initialize\n    syringe.initialize()\n\n    # Flush all lines\n    for port in range(1, 9):\n        valve.position(port)\n        syringe.aspirate(200)\n        valve.position(1)  # Waste\n        syringe.dispense()\n\n    print(\"Daily maintenance complete\")\n</code></pre> <p>Next Steps</p> <p>Learn about Pre-built Workflows for complex automated procedures.</p>"},{"location":"sia-api/introduction/","title":"SIA API Introduction","text":""},{"location":"sia-api/introduction/#what-is-sequential-injection-analysis","title":"What is Sequential Injection Analysis?","text":"<p>Sequential Injection Analysis (SIA) is an automated liquid handling technique that enables:</p> <ul> <li>Precise volume control - Aspirate and dispense exact volumes</li> <li>Automated sample preparation - Dilution, mixing, reagent addition</li> <li>Reduced reagent consumption - Microliter-scale operations</li> <li>High reproducibility - Computer-controlled operations</li> </ul>"},{"location":"sia-api/introduction/#sia-system-components","title":"SIA System Components","text":""},{"location":"sia-api/introduction/#1-syringe-pump","title":"1. Syringe Pump","text":"<ul> <li>Provides precise fluid movement</li> <li>Typical sizes: 100-5000 \u00b5L</li> <li>Bidirectional flow control</li> <li>Variable speed operation</li> </ul>"},{"location":"sia-api/introduction/#2-multi-position-valve","title":"2. Multi-Position Valve","text":"<ul> <li>Selects between different fluid lines</li> <li>Common configurations: 6, 8, 10 positions</li> <li>Low dead volume</li> <li>Fast switching</li> </ul>"},{"location":"sia-api/introduction/#3-holding-coil","title":"3. Holding Coil","text":"<ul> <li>Temporary storage for fluids</li> <li>Enables complex fluid manipulations</li> <li>Typical volume: 1-5 mL</li> </ul>"},{"location":"sia-api/introduction/#4-flow-lines","title":"4. Flow Lines","text":"<ul> <li>Connect valve ports to:</li> <li>Sample containers</li> <li>Reagent reservoirs</li> <li>Waste</li> <li>Analytical instruments</li> </ul>"},{"location":"sia-api/introduction/#how-sia-works","title":"How SIA Works","text":"<pre><code>graph LR\n    A[Syringe Pump] --&gt; B[Selection Valve]\n    B --&gt; C[Port 1: Waste]\n    B --&gt; D[Port 2: Air]\n    B --&gt; E[Port 3: DI Water]\n    B --&gt; F[Port 4: Sample]\n    B --&gt; G[Port 5: Reagent]\n    B --&gt; H[Port 6: To CE]</code></pre> <p>Basic operation sequence: 1. Valve selects source port 2. Syringe aspirates fluid 3. Valve switches to destination 4. Syringe dispenses fluid</p>"},{"location":"sia-api/introduction/#sia-api-architecture","title":"SIA API Architecture","text":"<p>The SIA API provides three levels of control:</p>"},{"location":"sia-api/introduction/#1-low-level-direct-device-control","title":"1. Low Level - Direct Device Control","text":"<pre><code># Direct syringe commands\nsyringe.aspirate(500)\nsyringe.dispense(250)\n\n# Direct valve commands\nvalve.position(3)\n</code></pre>"},{"location":"sia-api/introduction/#2-mid-level-coordinated-operations","title":"2. Mid Level - Coordinated Operations","text":"<pre><code># Combined syringe and valve operations\nvalve.position(water_port)\nsyringe.aspirate(1000)\nvalve.position(output_port)\nsyringe.dispense(1000)\n</code></pre>"},{"location":"sia-api/introduction/#3-high-level-complete-workflows","title":"3. High Level - Complete Workflows","text":"<pre><code># Pre-built analytical workflows\nworkflow.continuous_fill(vial=15, volume=1500, solvent_port=5)\nworkflow.homogenize_sample(vial=15, speed=1000, time=30)\n</code></pre>"},{"location":"sia-api/introduction/#key-features","title":"Key Features","text":""},{"location":"sia-api/introduction/#volume-tracking","title":"Volume Tracking","text":"<p>The API automatically tracks fluid volumes to prevent overflow:</p> <pre><code>syringe = SyringeController(port=\"COM3\", syringe_size=1000)\nsyringe.aspirate(600)  # Volume counter: 600 \u00b5L\nsyringe.dispense(200)  # Volume counter: 400 \u00b5L\nsyringe.aspirate(700)  # Error! Would exceed 1000 \u00b5L capacity\n</code></pre>"},{"location":"sia-api/introduction/#safety-features","title":"Safety Features","text":"<ul> <li>Automatic volume validation</li> <li>Position limits checking</li> <li>Serial communication error handling</li> <li>Graceful error recovery</li> </ul>"},{"location":"sia-api/introduction/#flexible-configuration","title":"Flexible Configuration","text":"<ul> <li>Customizable port assignments</li> <li>Variable flow rates</li> <li>Configurable delays and timing</li> <li>Modular workflow components</li> </ul>"},{"location":"sia-api/introduction/#supported-hardware","title":"Supported Hardware","text":""},{"location":"sia-api/introduction/#syringe-pumps","title":"Syringe Pumps","text":"<ul> <li>Hamilton MVP series</li> <li>Cavro XLP/XP pumps</li> <li>Other pumps with compatible command set</li> </ul>"},{"location":"sia-api/introduction/#valve-selectors","title":"Valve Selectors","text":"<ul> <li>VICI Valco selectors</li> <li>Rheodyne selectors</li> <li>Compatible multi-position valves</li> </ul>"},{"location":"sia-api/introduction/#communication","title":"Communication","text":"<ul> <li>RS-232 serial interface</li> <li>USB-to-serial adapters</li> <li>Standard baud rates (9600, 19200)</li> </ul>"},{"location":"sia-api/introduction/#when-to-use-sia","title":"When to Use SIA","text":"<p>SIA is ideal for:</p> <p>\u2705 Automated sample preparation - Dilution series - Standard additions - Matrix matching - Sample cleanup</p> <p>\u2705 Reagent addition - Derivatization - pH adjustment - Internal standard addition - Chemical reactions</p> <p>\u2705 Sample introduction - Controlled injection volumes - Sample stacking - Zone focusing - Multi-segment injection</p> <p>\u2705 System maintenance - Automated cleaning - Conditioning procedures - Waste management - System priming</p>"},{"location":"sia-api/introduction/#integration-with-ce","title":"Integration with CE","text":"<p>SIA enhances CE analysis by:</p> <ol> <li>Sample Preparation</li> <li>Automated dilution to analytical range</li> <li>Buffer matching</li> <li>Protein precipitation</li> <li> <p>Filtration</p> </li> <li> <p>Standardization</p> </li> <li>Internal standard addition</li> <li>Automated calibration curves</li> <li> <p>Quality control samples</p> </li> <li> <p>Productivity</p> </li> <li>Unattended operation</li> <li>Overnight sample preparation</li> <li> <p>Reduced manual handling</p> </li> <li> <p>Precision</p> </li> <li>Exact volume delivery</li> <li>Reproducible mixing</li> <li>Controlled timing</li> </ol>"},{"location":"sia-api/introduction/#basic-concepts","title":"Basic Concepts","text":""},{"location":"sia-api/introduction/#flow-profiles","title":"Flow Profiles","text":"<p>Different operations require different flow characteristics:</p> <ul> <li>Fast transfer: 3000-5000 \u00b5L/min</li> <li>Precise dispensing: 500-2000 \u00b5L/min  </li> <li>Gentle mixing: 100-1000 \u00b5L/min</li> <li>Critical operations: 50-500 \u00b5L/min</li> </ul>"},{"location":"sia-api/introduction/#bubble-segmentation","title":"Bubble Segmentation","text":"<p>Air segments prevent mixing between zones:</p> <pre><code># Aspirate sequence with air segments\nvalve.position(air_port)\nsyringe.aspirate(20)    # Air bubble\nvalve.position(sample_port)\nsyringe.aspirate(100)   # Sample zone\nvalve.position(air_port)\nsyringe.aspirate(20)    # Air bubble\n</code></pre>"},{"location":"sia-api/introduction/#continuous-vs-batch-flow","title":"Continuous vs Batch Flow","text":"<p>Continuous Flow - Transfer line filled with liquid - Fast sequential dispensing - Same solvent for multiple vials</p> <p>Batch Flow - Transfer line filled with air - Each dispensing is independent - Easy solvent changeover</p>"},{"location":"sia-api/introduction/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Initialize Devices <pre><code>syringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n</code></pre></p> </li> <li> <p>Test Communication <pre><code>syringe.initialize()\nvalve.position(1)\n</code></pre></p> </li> <li> <p>Create Workflow <pre><code>workflow = PreparedSIAMethods(ce_api, syringe, valve)\n</code></pre></p> </li> <li> <p>Run Operations <pre><code>workflow.system_initialization_and_cleaning()\n</code></pre></p> </li> </ol> <p>Next Steps</p> <p>Learn about Basic SIA Operations to start controlling your system.</p>"},{"location":"sia-api/port-configuration/","title":"Port Configuration Guide","text":"<p>Detailed guide for configuring and optimizing SIA valve port assignments.</p>"},{"location":"sia-api/port-configuration/#default-port-configuration","title":"Default Port Configuration","text":"<p>The standard port assignments are designed for typical analytical workflows:</p> <pre><code>from SIA_API.methods import PortConfig, DEFAULT_PORTS\n\n# Default configuration\nprint(f\"Waste: Port {DEFAULT_PORTS.waste_port}\")        # Port 1\nprint(f\"Air: Port {DEFAULT_PORTS.air_port}\")            # Port 2\nprint(f\"DI Water: Port {DEFAULT_PORTS.di_port}\")        # Port 3\nprint(f\"Transfer: Port {DEFAULT_PORTS.transfer_port}\")  # Port 4\nprint(f\"Methanol: Port {DEFAULT_PORTS.meoh_port}\")      # Port 5\n</code></pre>"},{"location":"sia-api/port-configuration/#port-assignment-principles","title":"Port Assignment Principles","text":""},{"location":"sia-api/port-configuration/#priority-positions","title":"Priority Positions","text":"<ol> <li>Port 1 - Waste</li> <li>Always accessible</li> <li>Shortest path from syringe</li> <li> <p>Frequent use</p> </li> <li> <p>Port 2 - Air/Gas</p> </li> <li>Used for segmentation</li> <li>Cleaning operations</li> <li> <p>Second most frequent</p> </li> <li> <p>Port 3 - Primary Diluent</p> </li> <li>Usually DI water</li> <li>High volume usage</li> <li> <p>Easy access</p> </li> <li> <p>Port 4 - Transfer Line</p> </li> <li>Connection to CE</li> <li>Critical path</li> <li>Minimize dead volume</li> </ol>"},{"location":"sia-api/port-configuration/#optimization-strategies","title":"Optimization Strategies","text":"<pre><code># Optimize for specific workflow\nclass WorkflowOptimizedPorts(PortConfig):\n    \"\"\"Ports optimized for protein analysis.\"\"\"\n\n    waste_port = 1          # Always waste\n    air_port = 2            # Air for segments\n    di_port = 3             # Water for dilution\n    transfer_port = 8       # Last port - shortest CE path\n    meoh_port = 4           # Organic cleanup\n    buffer_ph7_port = 5     # Running buffer\n    buffer_ph5_port = 6     # Acidic buffer\n    standard_port = 7       # Internal standard\n</code></pre>"},{"location":"sia-api/port-configuration/#custom-configurations","title":"Custom Configurations","text":""},{"location":"sia-api/port-configuration/#method-1-using-create_custom_config","title":"Method 1: Using create_custom_config()","text":"<pre><code>from SIA_API.methods import create_custom_config\n\n# Simple customization\nconfig = create_custom_config(\n    waste_port=8,\n    meoh_port=6\n)\n\n# Use in workflow\nworkflow = PreparedSIAMethods(\n    ce_api, syringe, valve,\n    ports_config=config\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#method-2-direct-portconfig-creation","title":"Method 2: Direct PortConfig Creation","text":"<pre><code>from dataclasses import dataclass\nfrom SIA_API.methods import PortConfig\n\n@dataclass\nclass BiochemistryPorts(PortConfig):\n    \"\"\"Port configuration for biochemistry lab.\"\"\"\n\n    # Standard ports\n    waste_port: int = 1\n    air_port: int = 2\n    di_port: int = 3\n    transfer_port: int = 12  # 12-port valve\n\n    # Additional reagents\n    meoh_port: int = 4\n    acn_port: int = 5        # Acetonitrile\n    buffer_a_port: int = 6   # Buffer A\n    buffer_b_port: int = 7   # Buffer B\n    enzyme_port: int = 8     # Enzyme solution\n    substrate_port: int = 9  # Substrate\n    quench_port: int = 10    # Reaction quench\n    standard_port: int = 11  # Internal standard\n\n# Use custom configuration\nconfig = BiochemistryPorts()\nworkflow = PreparedSIAMethods(ce_api, syringe, valve, config)\n</code></pre>"},{"location":"sia-api/port-configuration/#method-3-runtime-configuration","title":"Method 3: Runtime Configuration","text":"<pre><code>def configure_for_experiment(experiment_type):\n    \"\"\"Dynamic port configuration based on experiment.\"\"\"\n\n    if experiment_type == \"protein\":\n        return create_custom_config(\n            waste_port=1,\n            air_port=2,\n            di_port=3,\n            transfer_port=8,\n            meoh_port=4\n        )\n\n    elif experiment_type == \"small_molecule\":\n        return create_custom_config(\n            waste_port=1,\n            air_port=2,\n            di_port=4,      # Swap water and transfer\n            transfer_port=3,  # Shorter path for organics\n            meoh_port=5\n        )\n\n    else:\n        return DEFAULT_PORTS\n</code></pre>"},{"location":"sia-api/port-configuration/#port-usage-in-workflows","title":"Port Usage in Workflows","text":""},{"location":"sia-api/port-configuration/#accessing-ports-in-methods","title":"Accessing Ports in Methods","text":"<pre><code># Using configured ports\nworkflow.prepare_continuous_flow(\n    solvent_port=workflow.ports.meoh_port  # Uses configured port\n)\n\n# Override specific port\nworkflow.continuous_fill(\n    vial=15,\n    volume=1000,\n    solvent_port=7,  # Direct port specification\n    waste_port=1     # Override default\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#adding-custom-ports","title":"Adding Custom Ports","text":"<pre><code>class ExtendedWorkflow(PreparedSIAMethods):\n    \"\"\"Workflow with additional reagent ports.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # Add custom port definitions\n        self.custom_ports = {\n            'enzyme': 8,\n            'substrate': 9,\n            'inhibitor': 10\n        }\n\n    def add_enzyme(self, vial, enzyme_volume):\n        \"\"\"Add enzyme using custom port.\"\"\"\n        self.batch_fill(\n            vial=vial,\n            volume=enzyme_volume,\n            solvent_port=self.custom_ports['enzyme']\n        )\n</code></pre>"},{"location":"sia-api/port-configuration/#multi-valve-systems","title":"Multi-Valve Systems","text":""},{"location":"sia-api/port-configuration/#dual-valve-configuration","title":"Dual Valve Configuration","text":"<pre><code>class DualValveSystem:\n    \"\"\"System with two selection valves.\"\"\"\n\n    def __init__(self, ce_api, syringe, valve1, valve2):\n        self.ce = ce_api\n        self.syringe = syringe\n        self.valve_main = valve1    # 8-port for common reagents\n        self.valve_special = valve2  # 12-port for samples\n\n        # Port mapping\n        self.main_ports = PortConfig()  # Standard configuration\n        self.sample_ports = {\n            f'sample_{i}': i for i in range(1, 13)\n        }\n\n    def select_sample(self, sample_number):\n        \"\"\"Switch to sample valve and position.\"\"\"\n        # In practice, add valve switching logic\n        self.valve_special.position(sample_number)\n</code></pre>"},{"location":"sia-api/port-configuration/#physical-setup-considerations","title":"Physical Setup Considerations","text":""},{"location":"sia-api/port-configuration/#tubing-length-optimization","title":"Tubing Length Optimization","text":"<pre><code># Port usage frequency analysis\ndef analyze_port_usage(workflow_steps):\n    \"\"\"Analyze port access patterns.\"\"\"\n\n    port_counts = {}\n\n    for step in workflow_steps:\n        port = step.get('port')\n        port_counts[port] = port_counts.get(port, 0) + 1\n\n    # Sort by frequency\n    sorted_ports = sorted(\n        port_counts.items(), \n        key=lambda x: x[1], \n        reverse=True\n    )\n\n    print(\"Port usage frequency:\")\n    for port, count in sorted_ports:\n        print(f\"  Port {port}: {count} accesses\")\n\n    return sorted_ports\n\n# Optimize physical layout based on usage\n</code></pre>"},{"location":"sia-api/port-configuration/#dead-volume-minimization","title":"Dead Volume Minimization","text":"<pre><code># Calculate dead volumes\ndef calculate_dead_volumes(port_config, tubing_specs):\n    \"\"\"Calculate dead volume for each port.\"\"\"\n\n    dead_volumes = {}\n\n    for port_name, port_num in vars(port_config).items():\n        if port_name.endswith('_port'):\n            # Calculate based on tubing\n            length_cm = tubing_specs[port_num]['length']\n            id_mm = tubing_specs[port_num]['id']\n\n            # Volume in \u00b5L\n            volume = 3.14159 * (id_mm/2)**2 * length_cm * 10\n            dead_volumes[port_name] = round(volume, 2)\n\n    return dead_volumes\n</code></pre>"},{"location":"sia-api/port-configuration/#validation-tools","title":"Validation Tools","text":""},{"location":"sia-api/port-configuration/#port-configuration-validator","title":"Port Configuration Validator","text":"<pre><code>from SIA_API.methods import validate_config\n\ndef comprehensive_port_validation(config, valve_positions=8):\n    \"\"\"Validate port configuration thoroughly.\"\"\"\n\n    # Basic validation\n    try:\n        validate_config(config)\n        print(\"\u2713 Basic validation passed\")\n    except ValueError as e:\n        print(f\"\u2717 Basic validation failed: {e}\")\n        return False\n\n    # Check port range\n    ports = [\n        config.waste_port, config.air_port, \n        config.di_port, config.transfer_port, \n        config.meoh_port\n    ]\n\n    if max(ports) &gt; valve_positions:\n        print(f\"\u2717 Port {max(ports)} exceeds valve positions ({valve_positions})\")\n        return False\n\n    # Check critical ports\n    if config.waste_port != 1:\n        print(\"\u26a0 Warning: Waste not on port 1 (non-standard)\")\n\n    if config.transfer_port == config.waste_port:\n        print(\"\u2717 Error: Transfer and waste on same port!\")\n        return False\n\n    print(\"\u2713 Comprehensive validation passed\")\n    return True\n\n# Test configuration\ncustom = create_custom_config(waste_port=8, transfer_port=8)\ncomprehensive_port_validation(custom)\n</code></pre>"},{"location":"sia-api/port-configuration/#runtime-port-verification","title":"Runtime Port Verification","text":"<pre><code>def verify_port_contents(valve, expected_contents):\n    \"\"\"Verify correct solutions at each port.\"\"\"\n\n    print(\"Port verification procedure:\")\n    print(\"Place pH paper at output\")\n\n    for port, content in expected_contents.items():\n        valve.position(port)\n        print(f\"\\nPort {port} - Expected: {content}\")\n\n        # Dispense small amount\n        syringe.aspirate(50)\n        input(\"Check output and press Enter...\")\n\n        # Record result\n        result = input(\"Correct? (y/n): \")\n        if result.lower() != 'y':\n            print(f\"\u26a0 Port {port} mismatch!\")\n</code></pre>"},{"location":"sia-api/port-configuration/#common-configurations","title":"Common Configurations","text":""},{"location":"sia-api/port-configuration/#analytical-chemistry-lab","title":"Analytical Chemistry Lab","text":"<pre><code>ANALYTICAL_CONFIG = create_custom_config(\n    waste_port=1,\n    air_port=2,\n    di_port=3,\n    transfer_port=8,  # Last port for CE\n    meoh_port=4       # Organic solvent\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#biochemistry-lab","title":"Biochemistry Lab","text":"<pre><code>BIOCHEM_CONFIG = create_custom_config(\n    waste_port=1,\n    air_port=2,\n    di_port=3,        # PBS buffer\n    transfer_port=6,  # Middle port\n    meoh_port=7       # Rarely used\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#high-throughput-lab","title":"High-Throughput Lab","text":"<pre><code>HIGH_THROUGHPUT_CONFIG = create_custom_config(\n    waste_port=1,     # Frequent access\n    air_port=2,       # Segmentation\n    di_port=8,        # Opposite side\n    transfer_port=4,  # Central\n    meoh_port=5       # Adjacent to transfer\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#troubleshooting-port-issues","title":"Troubleshooting Port Issues","text":""},{"location":"sia-api/port-configuration/#wrong-port-selected","title":"Wrong Port Selected","text":"<pre><code>def debug_port_selection():\n    \"\"\"Debug valve port selection.\"\"\"\n\n    print(\"Valve position test:\")\n\n    for port in range(1, 9):\n        print(f\"\\nMoving to port {port}\")\n        valve.position(port)\n\n        # Visual confirmation\n        confirmed = input(\"Correct position? (y/n): \")\n        if confirmed.lower() != 'y':\n            print(f\"ERROR: Port {port} mismatch\")\n\n            # Try multiple attempts\n            for attempt in range(3):\n                valve.position(port, num_attempts=5)\n                if input(\"Correct now? (y/n): \").lower() == 'y':\n                    print(f\"Fixed after {attempt+1} attempts\")\n                    break\n</code></pre>"},{"location":"sia-api/port-configuration/#port-contamination","title":"Port Contamination","text":"<pre><code>def clean_specific_port(port, flush_volume=1000):\n    \"\"\"Deep clean a specific port.\"\"\"\n\n    print(f\"Cleaning port {port}\")\n\n    # Flush with air\n    valve.position(2)  # Air\n    syringe.aspirate(200)\n    valve.position(port)\n    syringe.dispense()\n\n    # Flush with solvent\n    valve.position(3)  # Water\n    syringe.aspirate(flush_volume)\n    valve.position(port)\n    syringe.dispense()\n\n    # Final air purge\n    valve.position(2)\n    syringe.aspirate(200)\n    valve.position(port)\n    syringe.dispense()\n</code></pre>"},{"location":"sia-api/port-configuration/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Document your configuration <pre><code># Always document port assignments\n\"\"\"\nPort Configuration for Project X:\n1 - Waste (red tubing)\n2 - Air\n3 - DI Water (clear tubing)\n4 - Transfer to CE (PEEK, 0.25mm ID)\n5 - Methanol (yellow tubing)\n6 - Buffer pH 7.4 (blue tubing)\n7 - Internal Standard (green tubing)\n8 - Unused\n\"\"\"\n</code></pre></p> </li> <li> <p>Use consistent color coding for tubing</p> </li> <li> <p>Label all reservoirs clearly</p> </li> <li> <p>Regular validation of port contents</p> </li> <li> <p>Keep spare fittings for each port type</p> </li> </ol> <p>Configuration Management</p> <p>Save your port configurations in a separate file for easy reuse and sharing with team members.</p>"},{"location":"sia-api/workflows/","title":"SIA Workflows","text":"<p>Pre-built workflows provide high-level automation for common analytical procedures. These workflows combine syringe, valve, and CE operations into complete analytical methods.</p>"},{"location":"sia-api/workflows/#workflow-system-overview","title":"Workflow System Overview","text":"<p>The <code>PreparedSIAMethods</code> class provides:</p> <ul> <li>System initialization and cleaning</li> <li>Continuous flow filling (same solvent, multiple vials)</li> <li>Batch flow filling (different solvents, air-driven)</li> <li>Sample homogenization</li> <li>Automated needle cleaning</li> </ul>"},{"location":"sia-api/workflows/#setting-up-workflows","title":"Setting Up Workflows","text":""},{"location":"sia-api/workflows/#basic-setup","title":"Basic Setup","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize all components\nce_api = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n\n# Create workflow controller\nworkflow = PreparedSIAMethods(\n    chemstation_controller=ce_api,\n    syringe_device=syringe,\n    valve_device=valve\n)\n</code></pre>"},{"location":"sia-api/workflows/#custom-port-configuration","title":"Custom Port Configuration","text":"<pre><code>from SIA_API.methods import create_custom_config\n\n# Create custom port mapping\ncustom_ports = create_custom_config(\n    waste_port=8,      # Changed from default 1\n    air_port=1,        # Changed from default 2\n    di_port=2,         # Changed from default 3\n    transfer_port=7,   # Changed from default 4\n    meoh_port=6        # Changed from default 5\n)\n\n# Use custom configuration\nworkflow = PreparedSIAMethods(\n    chemstation_controller=ce_api,\n    syringe_device=syringe,\n    valve_device=valve,\n    ports_config=custom_ports\n)\n</code></pre>"},{"location":"sia-api/workflows/#system-initialization","title":"System Initialization","text":""},{"location":"sia-api/workflows/#complete-system-preparation","title":"Complete System Preparation","text":"<pre><code># Initialize and clean entire system\nworkflow.system_initialization_and_cleaning(\n    waste_vial=50,      # Vial for waste collection\n    bubble=20           # Size of separating bubble (\u00b5L)\n)\n</code></pre> <p>This method performs: 1. Syringe initialization to home position 2. Speed setting to default values 3. Loop flushing with air 4. Methanol cleaning cycle 5. DI water rinsing 6. Transfer line conditioning 7. Creation of separating bubbles</p>"},{"location":"sia-api/workflows/#what-happens-during-initialization","title":"What Happens During Initialization","text":"<pre><code>graph TD\n    A[Load Waste Vial] --&gt; B[Initialize Syringe]\n    B --&gt; C[Flush Holding Loop]\n    C --&gt; D[Create Air Bubble]\n    D --&gt; E[Methanol Flush]\n    E --&gt; F[DI Water Rinse]\n    F --&gt; G[Condition Transfer Line]\n    G --&gt; H[System Ready]</code></pre>"},{"location":"sia-api/workflows/#continuous-flow-operations","title":"Continuous Flow Operations","text":"<p>Continuous flow is fastest for filling multiple vials with the same solvent.</p>"},{"location":"sia-api/workflows/#prepare-for-continuous-flow","title":"Prepare for Continuous Flow","text":"<pre><code># Prepare system for continuous methanol filling\nworkflow.prepare_continuous_flow(\n    solvent_port=5,              # Methanol port\n    waste_vial=50,               # Waste collection vial\n    bubble_volume=10,            # Air bubble size (\u00b5L)\n    solvent_holding_coil_volume=10,  # Solvent at coil end (\u00b5L)\n    transfer_coil_flush=500,     # Transfer line flush volume (\u00b5L)\n    holding_coil_flush=1000,     # Holding coil flush volume (\u00b5L)\n    speed=1500                   # Flow rate (\u00b5L/min)\n)\n</code></pre>"},{"location":"sia-api/workflows/#execute-continuous-filling","title":"Execute Continuous Filling","text":"<pre><code># Fill single vial\nworkflow.continuous_fill(\n    vial=15,                     # Target vial position\n    volume=1500,                 # Volume to dispense (\u00b5L)\n    solvent_port=5,              # Solvent source port\n    flush_needle=50,             # Needle wash volume (\u00b5L)\n    wash_vial=48,                # Vial for needle washing\n    speed=2000                   # Dispensing speed (\u00b5L/min)\n)\n\n# Fill multiple vials efficiently\nvials = [10, 11, 12, 13, 14]\nfor i, vial in enumerate(vials):\n    workflow.continuous_fill(\n        vial=vial,\n        volume=1500,\n        solvent_port=5,\n        flush_needle=50 if i &lt; len(vials)-1 else None  # Skip last wash\n    )\n</code></pre>"},{"location":"sia-api/workflows/#how-continuous-flow-works","title":"How Continuous Flow Works","text":"<ol> <li>Transfer line is pre-filled with solvent</li> <li>Syringe aspirates from solvent port</li> <li>Immediately dispenses through filled line</li> <li>No air in transfer line = faster operation</li> <li>Optional needle cleaning between vials</li> </ol>"},{"location":"sia-api/workflows/#batch-flow-operations","title":"Batch Flow Operations","text":"<p>Batch flow is better for: - Different solvents between vials - Single vial operations - When contamination must be minimized</p>"},{"location":"sia-api/workflows/#prepare-for-batch-flow","title":"Prepare for Batch Flow","text":"<pre><code># Prepare system for batch operations\nworkflow.prepare_batch_flow(\n    solvent_port=3,              # DI water port\n    waste_vial=50,               # Waste collection\n    bubble_volume=10,            # Air bubble size (\u00b5L)\n    transfer_coil_volume=300,    # Transfer line volume (\u00b5L)\n    coil_flush=150,              # Coil flush volume (\u00b5L)\n    speed=1500                   # Flow rate (\u00b5L/min)\n)\n</code></pre>"},{"location":"sia-api/workflows/#execute-batch-filling","title":"Execute Batch Filling","text":"<pre><code># Fill single vial with air-driven dispensing\nworkflow.batch_fill(\n    vial=22,                     # Target vial\n    volume=750,                  # Volume to dispense (\u00b5L)\n    solvent_port=3,              # Solvent source\n    transfer_line_volume=300,    # Transfer line volume (\u00b5L)\n    bubble_volume=10,            # Leading air bubble (\u00b5L)\n    flush_needle=25,             # Needle wash volume (\u00b5L)\n    speed=2000,                  # Dispensing speed (\u00b5L/min)\n    unload=True,                 # Return vial to carousel\n    wait=2                       # Wait 2 seconds after dispensing\n)\n\n# Multiple solvents example\nsolvent_vial_pairs = [(3, 10), (5, 11), (3, 12), (5, 13)]\n\nfor solvent_port, vial in solvent_vial_pairs:\n    workflow.prepare_batch_flow(solvent_port=solvent_port)\n    workflow.batch_fill(\n        vial=vial,\n        volume=1000,\n        solvent_port=solvent_port\n    )\n</code></pre>"},{"location":"sia-api/workflows/#how-batch-flow-works","title":"How Batch Flow Works","text":"<ol> <li>Transfer line filled with air (not solvent)</li> <li>Air bubble aspirated first</li> <li>Solvent aspirated into syringe</li> <li>Air pushes solvent through transfer line</li> <li>Complete solvent delivery with air chase</li> </ol>"},{"location":"sia-api/workflows/#sample-homogenization","title":"Sample Homogenization","text":"<p>Pneumatic mixing for thorough sample homogenization:</p> <pre><code># Homogenize sample using air bubbling\nworkflow.homogenize_sample(\n    vial=15,                     # Vial to homogenize\n    speed=1000,                  # Bubbling speed (\u00b5L/min)\n    homogenization_time=30,      # Duration (seconds)\n    flush_needle=25,             # Needle wash volume (\u00b5L)\n    unload=True,                 # Return vial when done\n    air_speed=5000               # Air aspiration speed (\u00b5L/min)\n)\n\n# Extended homogenization for viscous samples\nworkflow.homogenize_sample(\n    vial=20,\n    speed=500,                   # Slower for viscous sample\n    homogenization_time=60,      # Longer time\n    flush_needle=50\n)\n</code></pre>"},{"location":"sia-api/workflows/#advanced-workflow-examples","title":"Advanced Workflow Examples","text":""},{"location":"sia-api/workflows/#complete-sample-preparation","title":"Complete Sample Preparation","text":"<pre><code>def prepare_protein_samples(sample_vials, dilution_factor=10):\n    \"\"\"Dilute and homogenize protein samples.\"\"\"\n\n    # Initialize system\n    workflow.system_initialization_and_cleaning()\n\n    # Prepare for water dilution\n    workflow.prepare_continuous_flow(solvent_port=3)  # DI water\n\n    for vial in sample_vials:\n        # Calculate volumes\n        sample_volume = 150\n        diluent_volume = sample_volume * (dilution_factor - 1)\n\n        # Add diluent\n        workflow.continuous_fill(\n            vial=vial,\n            volume=diluent_volume,\n            solvent_port=3,\n            flush_needle=None  # No wash between same solvent\n        )\n\n        # Homogenize to mix\n        workflow.homogenize_sample(\n            vial=vial,\n            speed=800,\n            homogenization_time=20\n        )\n\n    print(f\"Prepared {len(sample_vials)} samples at 1:{dilution_factor} dilution\")\n\n# Prepare samples\nprepare_protein_samples([10, 11, 12, 13], dilution_factor=10)\n</code></pre>"},{"location":"sia-api/workflows/#multi-solvent-workflow","title":"Multi-Solvent Workflow","text":"<pre><code>def multi_solvent_preparation():\n    \"\"\"Prepare samples with different solvents.\"\"\"\n\n    # Sample definitions: (vial, solvent_port, volume, homogenize)\n    preparations = [\n        (10, 3, 1000, False),  # DI water, no mixing\n        (11, 5, 750, True),    # Methanol, with mixing\n        (12, 3, 500, True),    # DI water, with mixing\n        (13, 5, 1500, False),  # Methanol, no mixing\n    ]\n\n    workflow.system_initialization_and_cleaning()\n\n    for vial, solvent_port, volume, homogenize in preparations:\n        # Use batch flow for different solvents\n        workflow.prepare_batch_flow(solvent_port=solvent_port)\n\n        workflow.batch_fill(\n            vial=vial,\n            volume=volume,\n            solvent_port=solvent_port,\n            flush_needle=50\n        )\n\n        if homogenize:\n            workflow.homogenize_sample(\n                vial=vial,\n                speed=1000,\n                homogenization_time=15\n            )\n\nmulti_solvent_preparation()\n</code></pre>"},{"location":"sia-api/workflows/#automated-standards-preparation","title":"Automated Standards Preparation","text":"<pre><code>def prepare_calibration_standards(stock_vial=1, standard_vials=[2,3,4,5,6]):\n    \"\"\"Prepare dilution series from stock solution.\"\"\"\n\n    concentrations = [100, 50, 25, 10, 5]  # Percentages\n    diluent_port = 3  # DI water\n\n    workflow.system_initialization_and_cleaning()\n\n    for vial, conc in zip(standard_vials, concentrations):\n        stock_vol = conc * 10  # \u00b5L of stock\n        diluent_vol = 1000 - stock_vol  # \u00b5L of diluent\n\n        print(f\"Preparing {conc}% standard in vial {vial}\")\n\n        # Add diluent first\n        workflow.prepare_batch_flow(solvent_port=diluent_port)\n        workflow.batch_fill(\n            vial=vial,\n            volume=diluent_vol,\n            solvent_port=diluent_port,\n            unload=False  # Keep loaded for stock addition\n        )\n\n        # Manually transfer stock\n        print(f\"Add {stock_vol} \u00b5L from vial {stock_vial} to vial {vial}\")\n        input(\"Press Enter when complete...\")\n\n        # Mix thoroughly\n        workflow.homogenize_sample(\n            vial=vial,\n            speed=1200,\n            homogenization_time=30,\n            unload=True\n        )\n\nprepare_calibration_standards()\n</code></pre>"},{"location":"sia-api/workflows/#workflow-optimization","title":"Workflow Optimization","text":""},{"location":"sia-api/workflows/#speed-optimization","title":"Speed Optimization","text":"<pre><code># Define operation-specific speeds\nSPEED_CONFIGURATIONS = {\n    'air_transfer': 5000,\n    'water_transfer': 3500,\n    'methanol_transfer': 3000,\n    'viscous_transfer': 1500,\n    'precise_dispense': 1000,\n    'gentle_mixing': 500\n}\n\ndef optimized_fill(vial, volume, solvent_type='water'):\n    \"\"\"Fill with optimized speed for solvent type.\"\"\"\n\n    speeds = {\n        'water': SPEED_CONFIGURATIONS['water_transfer'],\n        'methanol': SPEED_CONFIGURATIONS['methanol_transfer'],\n        'viscous': SPEED_CONFIGURATIONS['viscous_transfer']\n    }\n\n    workflow.continuous_fill(\n        vial=vial,\n        volume=volume,\n        solvent_port=3,\n        speed=speeds.get(solvent_type, 2000)\n    )\n</code></pre>"},{"location":"sia-api/workflows/#error-recovery","title":"Error Recovery","text":"<pre><code>def robust_workflow_execution():\n    \"\"\"Execute workflow with error handling.\"\"\"\n\n    try:\n        workflow.system_initialization_and_cleaning()\n    except Exception as e:\n        print(f\"Initialization failed: {e}\")\n        # Try simpler initialization\n        syringe.initialize()\n        valve.position(1)\n\n    samples_completed = []\n    samples_failed = []\n\n    for vial in [10, 11, 12, 13, 14]:\n        try:\n            workflow.continuous_fill(vial=vial, volume=1000, solvent_port=5)\n            samples_completed.append(vial)\n        except Exception as e:\n            print(f\"Failed to process vial {vial}: {e}\")\n            samples_failed.append(vial)\n            # Continue with next sample\n\n    print(f\"Completed: {samples_completed}\")\n    print(f\"Failed: {samples_failed}\")\n</code></pre>"},{"location":"sia-api/workflows/#best-practices","title":"Best Practices","text":""},{"location":"sia-api/workflows/#1-always-initialize-first","title":"1. Always Initialize First","text":"<pre><code># Start every session with full initialization\nworkflow.system_initialization_and_cleaning()\n</code></pre>"},{"location":"sia-api/workflows/#2-match-method-to-application","title":"2. Match Method to Application","text":"<ul> <li>Continuous flow: Multiple vials, same solvent, speed priority</li> <li>Batch flow: Different solvents, contamination concerns</li> <li>Homogenization: Viscous samples, complete mixing required</li> </ul>"},{"location":"sia-api/workflows/#3-optimize-volumes","title":"3. Optimize Volumes","text":"<pre><code># Minimize waste while ensuring complete delivery\ntransfer_line_volume = 300  # Measure your actual system\nflush_volume = transfer_line_volume + 50  # Small excess\n</code></pre>"},{"location":"sia-api/workflows/#4-plan-needle-washing","title":"4. Plan Needle Washing","text":"<pre><code># Wash needle between different sample types\n# Skip washing within replicate groups\nfor i, vial in enumerate(replicate_vials):\n    flush = 50 if i &lt; len(replicate_vials)-1 else None\n    workflow.continuous_fill(vial=vial, volume=1000, \n                           solvent_port=5, flush_needle=flush)\n</code></pre>"},{"location":"sia-api/workflows/#5-monitor-critical-parameters","title":"5. Monitor Critical Parameters","text":"<pre><code># Log important parameters\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef logged_fill(vial, volume, solvent_port):\n    start_time = time.time()\n    logging.info(f\"Filling vial {vial}: {volume} \u00b5L from port {solvent_port}\")\n\n    workflow.continuous_fill(vial, volume, solvent_port)\n\n    elapsed = time.time() - start_time\n    logging.info(f\"Completed in {elapsed:.1f} seconds\")\n</code></pre> <p>Ready for Integration</p> <p>You now understand SIA workflows. See SIA-CE Integration for complete analytical automation.</p>"},{"location":"tutorials/batch-processing/","title":"Batch Processing Tutorial","text":"<p>Learn how to analyze multiple samples automatically using sequences and SIA sample preparation.</p>"},{"location":"tutorials/batch-processing/#overview","title":"Overview","text":"<p>In this tutorial, we'll: - Prepare multiple samples with different dilutions - Create a sequence from Excel data - Run automated batch analysis - Handle different sample types - Monitor batch progress</p>"},{"location":"tutorials/batch-processing/#scenario","title":"Scenario","text":"<p>We'll analyze 10 protein samples: - 2 standards (known concentration) - 6 unknown samples - 2 QC samples - Each requires different dilution factors</p>"},{"location":"tutorials/batch-processing/#step-1-prepare-excel-file","title":"Step 1: Prepare Excel File","text":"<p>Create <code>batch_samples.xlsx</code> with this structure:</p> Vial Method Sample_Name Dilution Type 10 CE_Protein STD_Low 5 Standard 11 CE_Protein STD_High 20 Standard 12 CE_Protein Sample_001 10 Unknown 13 CE_Protein Sample_002 10 Unknown 14 CE_Protein Sample_003 15 Unknown 15 CE_Protein QC_001 10 QC 16 CE_Protein Sample_004 10 Unknown 17 CE_Protein Sample_005 12 Unknown 18 CE_Protein Sample_006 8 Unknown 19 CE_Protein QC_002 10 QC"},{"location":"tutorials/batch-processing/#step-2-initialize-system","title":"Step 2: Initialize System","text":"<pre><code>import pandas as pd\nimport time\nfrom datetime import datetime\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize all components\nprint(\"=== Batch Processing Tutorial ===\\n\")\nprint(f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\")\n\n# Connect to devices\nce_api = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n# System initialization\nprint(\"\\nInitializing system...\")\nworkflow.system_initialization_and_cleaning()\nprint(\"\u2713 System ready\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-3-load-and-validate-sample-data","title":"Step 3: Load and Validate Sample Data","text":"<pre><code># Load sample information\nprint(\"\\nLoading sample data...\")\nsamples_df = pd.read_excel(\"batch_samples.xlsx\")\nprint(f\"\u2713 Loaded {len(samples_df)} samples\")\n\n# Display sample summary\nprint(\"\\nSample Summary:\")\nprint(f\"Standards: {len(samples_df[samples_df['Type'] == 'Standard'])}\")\nprint(f\"Unknowns: {len(samples_df[samples_df['Type'] == 'Unknown'])}\")\nprint(f\"QC: {len(samples_df[samples_df['Type'] == 'QC'])}\")\n\n# Validate all vials are present\nprint(\"\\nValidating vials...\")\nmissing_vials = []\nfor vial in samples_df['Vial']:\n    try:\n        ce_api.validation.validate_vial_in_system(int(vial))\n    except:\n        missing_vials.append(vial)\n\nif missing_vials:\n    print(f\"\u2717 Missing vials: {missing_vials}\")\n    print(\"Please load all vials before continuing\")\n    exit(1)\nelse:\n    print(\"\u2713 All vials present\")\n\n# Validate method\nmethod_name = samples_df['Method'].iloc[0]\nce_api.validation.validate_method_name(method_name)\nprint(f\"\u2713 Method '{method_name}' validated\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-4-automated-sample-preparation","title":"Step 4: Automated Sample Preparation","text":"<pre><code>def prepare_samples(samples_df):\n    \"\"\"Prepare all samples with specified dilutions.\"\"\"\n\n    print(\"\\n=== Sample Preparation ===\")\n\n    # Prepare for continuous flow with DI water\n    workflow.prepare_continuous_flow(solvent_port=3, speed=2000)\n\n    preparation_log = []\n\n    for idx, row in samples_df.iterrows():\n        vial = int(row['Vial'])\n        dilution = int(row['Dilution'])\n        sample_name = row['Sample_Name']\n        sample_type = row['Type']\n\n        print(f\"\\nPreparing {sample_name} (Vial {vial})\")\n        print(f\"Type: {sample_type}, Dilution: 1:{dilution}\")\n\n        # Calculate volumes (1500 \u00b5L final volume)\n        final_volume = 1500\n        sample_volume = final_volume / dilution\n        diluent_volume = final_volume - sample_volume\n\n        # Add diluent\n        workflow.continuous_fill(\n            vial=vial,\n            volume=diluent_volume,\n            solvent_port=3,\n            flush_needle=None  # No wash between same solvent\n        )\n\n        # Log preparation\n        prep_info = {\n            'vial': vial,\n            'sample': sample_name,\n            'sample_vol': sample_volume,\n            'diluent_vol': diluent_volume,\n            'time': datetime.now()\n        }\n        preparation_log.append(prep_info)\n\n        print(f\"\u2713 Added {diluent_volume:.0f} \u00b5L diluent\")\n        print(f\"  \u2192 Add {sample_volume:.0f} \u00b5L sample manually\")\n\n    # Clean needle after all dilutions\n    workflow.clean_needle(volume_flush=100, wash_vial=48)\n\n    return preparation_log\n\n# Prepare all samples\nprep_log = prepare_samples(samples_df)\n\nprint(\"\\n\u26a0 Add samples to vials according to the volumes shown above\")\ninput(\"Press Enter when all samples are added...\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-5-mix-all-samples","title":"Step 5: Mix All Samples","text":"<pre><code># Homogenize all samples\nprint(\"\\n=== Sample Mixing ===\")\n\nfor idx, row in samples_df.iterrows():\n    vial = int(row['Vial'])\n    sample_name = row['Sample_Name']\n\n    print(f\"Mixing {sample_name}...\", end='')\n\n    workflow.homogenize_sample(\n        vial=vial,\n        speed=1000,\n        homogenization_time=20,\n        flush_needle=None,  # Wash at end\n        unload=True\n    )\n\n    print(\" \u2713\")\n\n# Final needle wash\nworkflow.clean_needle(volume_flush=100, wash_vial=48)\nprint(\"\\n\u2713 All samples prepared and mixed\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-6-create-ce-sequence","title":"Step 6: Create CE Sequence","text":"<pre><code># Create sequence in ChemStation\nprint(\"\\n=== Creating CE Sequence ===\")\n\n# Import sequence from Excel\nce_api.sequence.prepare_sequence_table(\n    excel_file_path=\"batch_samples.xlsx\",\n    sequence_name=\"Batch_Tutorial\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample_Name\"\n)\n\nprint(\"\u2713 Sequence created from Excel\")\n\n# Add sample info to sequence\nfor idx, row in samples_df.iterrows():\n    ce_api.sequence.modify_sequence_row(\n        row=idx + 1,\n        sample_info=f\"Type: {row['Type']}, Dilution: 1:{row['Dilution']}\"\n    )\n\n# Save sequence\nsequence_name = f\"Batch_{datetime.now().strftime('%Y%m%d_%H%M')}\"\nce_api.sequence.save_sequence(sequence_name)\nprint(f\"\u2713 Sequence saved as: {sequence_name}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-7-pre-analysis-setup","title":"Step 7: Pre-Analysis Setup","text":"<pre><code># Condition system before batch run\nprint(\"\\n=== Pre-Analysis Setup ===\")\n\n# Load buffer vials\nprint(\"Loading buffer vials...\")\nce_api.ce.load_vial_to_position(1, \"inlet\")  # Running buffer\nce_api.ce.load_vial_to_position(48, \"outlet\")  # Waste\n\n# Extended conditioning for batch run\nprint(\"Conditioning capillary (3 minutes)...\")\nce_api.ce.flush_capillary(time_flush=180.0)\n\n# Return vials\nce_api.ce.unload_vial_from_position(\"inlet\")\nce_api.ce.unload_vial_from_position(\"outlet\")\n\nprint(\"\u2713 System conditioned and ready\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-8-run-batch-analysis","title":"Step 8: Run Batch Analysis","text":"<pre><code># Start batch analysis\nprint(\"\\n=== Starting Batch Analysis ===\")\nprint(f\"Sequence: {sequence_name}\")\nprint(f\"Samples: {len(samples_df)}\")\nprint(f\"Estimated time: {len(samples_df) * 15} minutes\")\n\n# Start sequence\nce_api.sequence.start()\nprint(\"\u2713 Sequence started\")\n\n# Create analysis log\nanalysis_log = {\n    'start_time': datetime.now(),\n    'samples_completed': 0,\n    'current_sample': '',\n    'errors': []\n}\n</code></pre>"},{"location":"tutorials/batch-processing/#step-9-monitor-batch-progress","title":"Step 9: Monitor Batch Progress","text":"<pre><code>def monitor_batch_analysis(ce_api, samples_df, analysis_log):\n    \"\"\"Monitor batch analysis with progress tracking.\"\"\"\n\n    print(\"\\n=== Monitoring Progress ===\")\n    print(\"Press Ctrl+C to stop monitoring (analysis continues)\\n\")\n\n    try:\n        last_status = \"\"\n        sample_start_time = time.time()\n\n        while True:\n            # Get current status\n            status = ce_api.system.status()\n            rc_status = ce_api.system.RC_status()\n\n            # Detect sample changes\n            if status == \"RUN\" and last_status != \"RUN\":\n                analysis_log['samples_completed'] += 1\n                sample_start_time = time.time()\n\n                if analysis_log['samples_completed'] &lt;= len(samples_df):\n                    current_sample = samples_df.iloc[\n                        analysis_log['samples_completed'] - 1\n                    ]['Sample_Name']\n                    analysis_log['current_sample'] = current_sample\n                    print(f\"\\n\u2192 Analyzing {current_sample}\")\n\n            # Display progress\n            if ce_api.system.method_on():\n                remaining = ce_api.system.get_remaining_analysis_time()\n                elapsed = (time.time() - sample_start_time) / 60\n\n                print(f\"\\r[{analysis_log['samples_completed']}/{len(samples_df)}] \"\n                      f\"{analysis_log['current_sample']} - \"\n                      f\"Status: {status} - \"\n                      f\"Remaining: {remaining:.1f} min\", end='')\n            else:\n                # Check if sequence is complete\n                if analysis_log['samples_completed'] &gt;= len(samples_df):\n                    print(\"\\n\\n\u2713 Batch analysis complete!\")\n                    break\n                else:\n                    print(f\"\\rWaiting for next sample...\", end='')\n\n            last_status = status\n            time.sleep(5)\n\n    except KeyboardInterrupt:\n        print(\"\\n\\nMonitoring stopped (analysis continues)\")\n\n    return analysis_log\n\n# Monitor the batch\nanalysis_log = monitor_batch_analysis(ce_api, samples_df, analysis_log)\n</code></pre>"},{"location":"tutorials/batch-processing/#step-10-post-analysis-summary","title":"Step 10: Post-Analysis Summary","text":"<pre><code># Generate analysis summary\nprint(\"\\n=== Analysis Summary ===\")\n\nanalysis_log['end_time'] = datetime.now()\ntotal_time = (analysis_log['end_time'] - analysis_log['start_time']).seconds / 60\n\nprint(f\"Start Time: {analysis_log['start_time'].strftime('%H:%M')}\")\nprint(f\"End Time: {analysis_log['end_time'].strftime('%H:%M')}\")\nprint(f\"Total Duration: {total_time:.1f} minutes\")\nprint(f\"Samples Completed: {analysis_log['samples_completed']}/{len(samples_df)}\")\n\n# Calculate statistics\navg_time = total_time / analysis_log['samples_completed'] if analysis_log['samples_completed'] &gt; 0 else 0\nprint(f\"Average Time per Sample: {avg_time:.1f} minutes\")\n\n# Sample type breakdown\nif analysis_log['samples_completed'] == len(samples_df):\n    print(\"\\nSamples Analyzed:\")\n    for sample_type in samples_df['Type'].unique():\n        count = len(samples_df[samples_df['Type'] == sample_type])\n        print(f\"  {sample_type}: {count}\")\n\n# Save summary report\nreport_filename = f\"batch_report_{datetime.now().strftime('%Y%m%d_%H%M')}.txt\"\nwith open(report_filename, 'w') as f:\n    f.write(\"Batch Analysis Report\\n\")\n    f.write(\"=\" * 50 + \"\\n\")\n    f.write(f\"Date: {datetime.now().strftime('%Y-%m-%d')}\\n\")\n    f.write(f\"Sequence: {sequence_name}\\n\")\n    f.write(f\"Total Samples: {len(samples_df)}\\n\")\n    f.write(f\"Duration: {total_time:.1f} minutes\\n\")\n    f.write(\"\\nSample Details:\\n\")\n    for _, row in samples_df.iterrows():\n        f.write(f\"  {row['Sample_Name']} - Vial {row['Vial']} - \"\n                f\"Dilution 1:{row['Dilution']}\\n\")\n\nprint(f\"\\n\u2713 Report saved as: {report_filename}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#complete-batch-processing-script","title":"Complete Batch Processing Script","text":"<pre><code># Complete Batch Processing Script\nimport pandas as pd\nimport time\nfrom datetime import datetime\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\ndef run_batch_analysis(excel_file=\"batch_samples.xlsx\"):\n    \"\"\"Complete batch analysis with SIA preparation.\"\"\"\n\n    # Initialize\n    ce_api = ChemstationAPI()\n    syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n    valve = ValveSelector(port=\"COM4\", num_positions=8)\n    workflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n    # System preparation\n    workflow.system_initialization_and_cleaning()\n\n    # Load samples\n    samples_df = pd.read_excel(excel_file)\n\n    # Validate\n    for vial in samples_df['Vial']:\n        ce_api.validation.validate_vial_in_system(int(vial))\n\n    # Prepare samples\n    workflow.prepare_continuous_flow(solvent_port=3)\n\n    for _, row in samples_df.iterrows():\n        vial = int(row['Vial'])\n        dilution = int(row['Dilution'])\n        diluent_volume = 1500 * (dilution - 1) / dilution\n\n        workflow.continuous_fill(\n            vial=vial,\n            volume=diluent_volume,\n            solvent_port=3\n        )\n\n    input(\"\\nAdd samples and press Enter...\")\n\n    # Mix all samples\n    for vial in samples_df['Vial']:\n        workflow.homogenize_sample(\n            vial=int(vial),\n            speed=1000,\n            homogenization_time=20\n        )\n\n    # Create and run sequence\n    ce_api.sequence.prepare_sequence_table(\n        excel_file_path=excel_file,\n        vial_column=\"Vial\",\n        method_column=\"Method\",\n        sample_name_column=\"Sample_Name\"\n    )\n\n    ce_api.sequence.start()\n\n    # Monitor\n    samples_done = 0\n    while samples_done &lt; len(samples_df):\n        if ce_api.system.method_on():\n            remaining = ce_api.system.get_remaining_analysis_time()\n            print(f\"\\r[{samples_done + 1}/{len(samples_df)}] \"\n                  f\"Remaining: {remaining:.1f} min\", end='')\n        time.sleep(10)\n\n    print(\"\\n\u2713 Batch complete!\")\n\nif __name__ == \"__main__\":\n    run_batch_analysis()\n</code></pre>"},{"location":"tutorials/batch-processing/#advanced-batch-processing","title":"Advanced Batch Processing","text":""},{"location":"tutorials/batch-processing/#intelligent-sample-grouping","title":"Intelligent Sample Grouping","text":"<pre><code>def group_samples_by_dilution(samples_df):\n    \"\"\"Group samples by dilution to optimize preparation.\"\"\"\n\n    grouped = samples_df.groupby('Dilution')\n\n    for dilution, group in grouped:\n        print(f\"\\nDilution 1:{dilution} ({len(group)} samples):\")\n\n        # Prepare all samples with same dilution together\n        workflow.prepare_continuous_flow(solvent_port=3)\n\n        for _, sample in group.iterrows():\n            vial = int(sample['Vial'])\n            volume = 1500 * (dilution - 1) / dilution\n\n            workflow.continuous_fill(\n                vial=vial,\n                volume=volume,\n                solvent_port=3,\n                flush_needle=None\n            )\n\n        # Wash between dilution groups\n        workflow.clean_needle(100)\n</code></pre>"},{"location":"tutorials/batch-processing/#error-recovery","title":"Error Recovery","text":"<pre><code>def batch_with_error_recovery():\n    \"\"\"Run batch with automatic error recovery.\"\"\"\n\n    max_retries = 3\n    failed_samples = []\n\n    for _, sample in samples_df.iterrows():\n        retry_count = 0\n        success = False\n\n        while retry_count &lt; max_retries and not success:\n            try:\n                ce_api.method.execution_method_with_parameters(\n                    vial=int(sample['Vial']),\n                    method_name=sample['Method'],\n                    sample_name=sample['Sample_Name']\n                )\n\n                # Wait for completion\n                while ce_api.system.method_on():\n                    time.sleep(30)\n\n                success = True\n\n            except Exception as e:\n                retry_count += 1\n                print(f\"\\nError with {sample['Sample_Name']}: {e}\")\n\n                if retry_count &lt; max_retries:\n                    print(f\"Retrying ({retry_count}/{max_retries})...\")\n                    ce_api.system.abort_run()\n                    time.sleep(60)\n                else:\n                    failed_samples.append(sample['Sample_Name'])\n\n    if failed_samples:\n        print(f\"\\nFailed samples: {failed_samples}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#tips-for-efficient-batch-processing","title":"Tips for Efficient Batch Processing","text":"<ol> <li>Group Similar Samples</li> <li>Process samples with same dilution together</li> <li> <p>Minimize solvent changes</p> </li> <li> <p>Optimize Timing</p> </li> <li>Prepare next samples during current analysis</li> <li> <p>Use parallel operations when possible</p> </li> <li> <p>Quality Control</p> </li> <li>Include QC samples at regular intervals</li> <li> <p>Monitor system suitability</p> </li> <li> <p>Error Handling</p> </li> <li>Plan for sample failures</li> <li> <p>Include retry logic</p> </li> <li> <p>Documentation</p> </li> <li>Log all preparation steps</li> <li>Generate comprehensive reports</li> </ol> <p>Batch Processing Mastered!</p> <p>You can now process multiple samples efficiently. Continue to SIA-CE Integration for advanced workflows.</p>"},{"location":"tutorials/first-analysis/","title":"Your First Automated Analysis","text":"<p>This tutorial will guide you through your first automated CE analysis using the SIA-CE system. We'll analyze a single sample with automated sample preparation.</p>"},{"location":"tutorials/first-analysis/#what-well-do","title":"What We'll Do","text":"<ol> <li>Initialize the SIA system</li> <li>Prepare a sample with automated dilution</li> <li>Load the sample for CE analysis</li> <li>Run the separation</li> <li>Monitor the analysis progress</li> </ol>"},{"location":"tutorials/first-analysis/#prerequisites","title":"Prerequisites","text":"<ul> <li>ChemStation is running with the macro loaded</li> <li>SIA devices are connected and powered on</li> <li>You have identified your COM ports</li> <li>Sample and reagents are prepared</li> </ul>"},{"location":"tutorials/first-analysis/#step-1-system-setup","title":"Step 1: System Setup","text":"<pre><code># Import required modules\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\n# Initialize ChemStation connection\nprint(\"Connecting to ChemStation...\")\nce_api = ChemstationAPI()\nprint(\"\u2713 ChemStation connected\")\n\n# Initialize SIA devices\nprint(\"Initializing SIA devices...\")\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nprint(\"\u2713 SIA devices connected\")\n\n# Create workflow controller\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\nprint(\"\u2713 Workflow controller ready\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-2-system-initialization","title":"Step 2: System Initialization","text":"<pre><code># Perform complete system initialization\nprint(\"\\nInitializing and cleaning system...\")\nprint(\"This will take about 2 minutes\")\n\nworkflow.system_initialization_and_cleaning(\n    waste_vial=50,  # Vial 50 for waste collection\n    bubble=20       # 20 \u00b5L separating bubble\n)\n\nprint(\"\u2713 System initialized and ready\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-3-sample-information","title":"Step 3: Sample Information","text":"<pre><code># Define our sample parameters\nsample_info = {\n    'vial': 15,\n    'name': 'Protein_Sample_001',\n    'method': 'CE_Protein_Analysis',\n    'dilution': 10,  # 1:10 dilution\n    'volume': 1500   # \u00b5L final volume\n}\n\nprint(f\"\\nSample: {sample_info['name']}\")\nprint(f\"Location: Vial {sample_info['vial']}\")\nprint(f\"Dilution: 1:{sample_info['dilution']}\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-4-validate-prerequisites","title":"Step 4: Validate Prerequisites","text":"<pre><code># Check everything is ready\nprint(\"\\nValidating system...\")\n\ntry:\n    # Check sample vial exists\n    ce_api.validation.validate_vial_in_system(sample_info['vial'])\n    print(\"\u2713 Sample vial present\")\n\n    # Check waste vials\n    ce_api.validation.validate_vial_in_system(48)  # Wash vial\n    ce_api.validation.validate_vial_in_system(50)  # Waste vial\n    print(\"\u2713 Wash and waste vials present\")\n\n    # Check method exists\n    ce_api.validation.validate_method_name(sample_info['method'])\n    print(\"\u2713 CE method found\")\n\n    # Check system is ready\n    if ce_api.system.status() == \"STANDBY\":\n        print(\"\u2713 CE system ready\")\n    else:\n        print(\"\u26a0 Waiting for system...\")\n        ce_api.system.wait_for_ready(timeout=60)\n\nexcept Exception as e:\n    print(f\"\u2717 Validation failed: {e}\")\n    print(\"Please fix the issue and restart\")\n    exit(1)\n\nprint(\"\\nAll checks passed!\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-5-automated-sample-preparation","title":"Step 5: Automated Sample Preparation","text":"<pre><code># Prepare for sample dilution\nprint(f\"\\nPreparing 1:{sample_info['dilution']} dilution...\")\n\n# Calculate volumes\nsample_volume = sample_info['volume'] / sample_info['dilution']\ndiluent_volume = sample_info['volume'] - sample_volume\n\nprint(f\"Sample volume: {sample_volume:.0f} \u00b5L\")\nprint(f\"Diluent volume: {diluent_volume:.0f} \u00b5L\")\n\n# Prepare for continuous flow with DI water\nworkflow.prepare_continuous_flow(\n    solvent_port=3,  # DI water port\n    speed=2000       # 2 mL/min\n)\n\n# Note: In a real workflow, you would add the sample first,\n# then diluent. For this demo, we'll add diluent to an empty vial\nprint(\"\\nAdding diluent to vial...\")\nworkflow.continuous_fill(\n    vial=sample_info['vial'],\n    volume=diluent_volume,\n    solvent_port=3,\n    flush_needle=50\n)\n\nprint(\"\u2713 Diluent added\")\n\n# In practice, you would now add your sample\nprint(\"\\n\u26a0 Add sample to vial manually or use liquid handling robot\")\ninput(\"Press Enter when sample is added...\")\n\n# Homogenize the diluted sample\nprint(\"\\nMixing sample...\")\nworkflow.homogenize_sample(\n    vial=sample_info['vial'],\n    speed=1000,              # 1 mL/min bubbling\n    homogenization_time=30,  # 30 seconds\n    flush_needle=50\n)\n\nprint(\"\u2713 Sample prepared and mixed\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-6-ce-analysis-setup","title":"Step 6: CE Analysis Setup","text":"<pre><code># Load vials for CE analysis\nprint(\"\\nSetting up CE analysis...\")\n\n# Load sample vial to inlet\nce_api.ce.load_vial_to_position(sample_info['vial'], \"inlet\")\nprint(\"\u2713 Sample loaded to inlet\")\n\n# Load waste vial to outlet\nce_api.ce.load_vial_to_position(48, \"outlet\")\nprint(\"\u2713 Waste vial loaded to outlet\")\n\n# Condition capillary\nprint(\"\\nConditioning capillary...\")\nce_api.ce.flush_capillary(time_flush=60.0)\nprint(\"\u2713 Capillary conditioned\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-7-run-analysis","title":"Step 7: Run Analysis","text":"<pre><code># Start the CE analysis\nprint(f\"\\nStarting analysis: {sample_info['name']}\")\nprint(f\"Method: {sample_info['method']}\")\n\nce_api.method.execution_method_with_parameters(\n    vial=sample_info['vial'],\n    method_name=sample_info['method'],\n    sample_name=sample_info['name'],\n    comment=\"Tutorial first analysis\",\n    subdirectory_name=\"Tutorial_Runs\"\n)\n\nprint(\"\u2713 Analysis started\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-8-monitor-progress","title":"Step 8: Monitor Progress","text":"<pre><code># Monitor the running analysis\nprint(\"\\nMonitoring analysis...\")\nprint(\"Press Ctrl+C to stop monitoring (analysis will continue)\")\n\ntry:\n    start_time = time.time()\n\n    while ce_api.system.method_on():\n        # Get progress information\n        elapsed = ce_api.system.get_elapsed_analysis_time()\n        total = ce_api.system.get_analysis_time()\n        remaining = ce_api.system.get_remaining_analysis_time()\n        status = ce_api.system.status()\n\n        # Calculate percentage\n        if total &gt; 0:\n            progress = (elapsed / total) * 100\n        else:\n            progress = 0\n\n        # Display progress\n        print(f\"\\rStatus: {status} | Progress: {progress:.1f}% | \"\n              f\"Remaining: {remaining:.1f} min\", end='')\n\n        time.sleep(10)  # Update every 10 seconds\n\nexcept KeyboardInterrupt:\n    print(\"\\n\\nStopped monitoring (analysis continues)\")\n\n# Analysis complete\ntotal_time = (time.time() - start_time) / 60\nprint(f\"\\n\\n\u2713 Analysis complete! Total time: {total_time:.1f} minutes\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-9-cleanup","title":"Step 9: Cleanup","text":"<pre><code># Return vials to carousel\nprint(\"\\nCleaning up...\")\n\nce_api.ce.unload_vial_from_position(\"inlet\")\nce_api.ce.unload_vial_from_position(\"outlet\")\n\nprint(\"\u2713 Vials returned to carousel\")\nprint(\"\\nFirst analysis tutorial complete!\")\n</code></pre>"},{"location":"tutorials/first-analysis/#complete-script","title":"Complete Script","text":"<p>Here's the complete script in one block:</p> <pre><code># First Analysis Tutorial - Complete Script\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\ndef first_analysis():\n    \"\"\"Run your first automated CE analysis with SIA sample prep.\"\"\"\n\n    # Initialize all systems\n    print(\"=== SIA-CE First Analysis Tutorial ===\\n\")\n\n    ce_api = ChemstationAPI()\n    syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n    valve = ValveSelector(port=\"COM4\", num_positions=8)\n    workflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n    # Sample parameters\n    sample_vial = 15\n    sample_name = \"Tutorial_Sample_001\"\n    ce_method = \"CE_Protein_Analysis\"\n\n    # Initialize system\n    print(\"Initializing system...\")\n    workflow.system_initialization_and_cleaning()\n\n    # Validate prerequisites\n    print(\"\\nValidating...\")\n    ce_api.validation.validate_vial_in_system(sample_vial)\n    ce_api.validation.validate_method_name(ce_method)\n\n    # Prepare sample (dilution)\n    print(\"\\nPreparing sample...\")\n    workflow.prepare_continuous_flow(solvent_port=3)\n    workflow.continuous_fill(vial=sample_vial, volume=900, solvent_port=3)\n\n    input(\"\\nAdd 100 \u00b5L sample to vial and press Enter...\")\n\n    workflow.homogenize_sample(vial=sample_vial, speed=1000, \n                               homogenization_time=30)\n\n    # Setup CE\n    print(\"\\nSetting up CE...\")\n    ce_api.ce.load_vial_to_position(sample_vial, \"inlet\")\n    ce_api.ce.load_vial_to_position(48, \"outlet\")\n    ce_api.ce.flush_capillary(60.0)\n\n    # Run analysis\n    print(\"\\nStarting analysis...\")\n    ce_api.method.execution_method_with_parameters(\n        vial=sample_vial,\n        method_name=ce_method,\n        sample_name=sample_name\n    )\n\n    # Monitor\n    while ce_api.system.method_on():\n        remaining = ce_api.system.get_remaining_analysis_time()\n        print(f\"\\r{remaining:.1f} minutes remaining...\", end='')\n        time.sleep(30)\n\n    # Cleanup\n    print(\"\\n\\nCleaning up...\")\n    ce_api.ce.unload_vial_from_position(\"inlet\")\n    ce_api.ce.unload_vial_from_position(\"outlet\")\n\n    print(\"\\n\u2713 Analysis complete!\")\n\nif __name__ == \"__main__\":\n    first_analysis()\n</code></pre>"},{"location":"tutorials/first-analysis/#what-you-learned","title":"What You Learned","text":"<p>In this tutorial, you:</p> <ol> <li>\u2713 Connected to ChemStation and SIA devices</li> <li>\u2713 Initialized the complete system</li> <li>\u2713 Validated all prerequisites</li> <li>\u2713 Performed automated sample dilution</li> <li>\u2713 Mixed samples using pneumatic homogenization</li> <li>\u2713 Set up and ran a CE analysis</li> <li>\u2713 Monitored analysis progress</li> <li>\u2713 Cleaned up after analysis</li> </ol>"},{"location":"tutorials/first-analysis/#next-steps","title":"Next Steps","text":"<ul> <li>Try modifying the dilution ratio</li> <li>Run multiple samples in sequence</li> <li>Explore different CE methods</li> <li>Add more complex sample preparation</li> </ul>"},{"location":"tutorials/first-analysis/#troubleshooting","title":"Troubleshooting","text":"<p>ChemStation Connection Failed - Is ChemStation running? - Is the macro loaded? (<code>macro \"path\\ChemPyConnect.mac\"; Python_Run</code>)</p> <p>SIA Device Not Responding - Check COM port numbers in Device Manager - Verify power and cable connections - Try <code>syringe.send_command(\"?\", get_response=True)</code></p> <p>Vial Not Found - Check vial is properly seated in carousel - Verify vial number is correct (1-50)</p> <p>Method Not Found - Check method name spelling (case-sensitive) - Verify method exists in ChemStation method directory</p> <p>Congratulations!</p> <p>You've completed your first automated analysis! Continue to Batch Processing to learn about analyzing multiple samples.</p>"},{"location":"tutorials/sia-ce-integration/","title":"SIA-CE Integration Tutorial","text":"<p>Learn how to create sophisticated analytical workflows combining SIA sample preparation with CE analysis.</p>"},{"location":"tutorials/sia-ce-integration/#overview","title":"Overview","text":"<p>This tutorial demonstrates advanced integration scenarios: - Multi-step sample preparation - Parallel processing during CE runs - Automated method development - Complex decision trees - Real-time optimization</p>"},{"location":"tutorials/sia-ce-integration/#scenario-protein-stability-study","title":"Scenario: Protein Stability Study","text":"<p>We'll analyze protein samples under different conditions: - pH variations (5.0, 6.0, 7.0, 8.0) - Temperature stress (native, heated) - Time points (0h, 24h, 48h) - Automated sample preparation and analysis</p>"},{"location":"tutorials/sia-ce-integration/#workflow-architecture","title":"Workflow Architecture","text":"<pre><code>graph LR\n    A[Sample Preparation] --&gt; B[CE Analysis]\n    B --&gt; C[Data Collection]\n    C --&gt; D[Decision Logic]\n    D --&gt; A\n    D --&gt; E[Report Generation]</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-1-system-architecture","title":"Step 1: System Architecture","text":"<pre><code>import time\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\nclass IntegratedAnalysisSystem:\n    \"\"\"Complete SIA-CE integration for automated analysis.\"\"\"\n\n    def __init__(self):\n        # Initialize all components\n        print(\"Initializing Integrated Analysis System...\")\n\n        self.ce = ChemstationAPI()\n        self.syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n        self.valve = ValveSelector(port=\"COM4\", num_positions=8)\n        self.sia = PreparedSIAMethods(self.ce, self.syringe, self.valve)\n\n        # System configuration\n        self.config = {\n            'ports': {\n                'waste': 1,\n                'air': 2,\n                'water': 3,\n                'transfer': 4,\n                'buffer_ph5': 5,\n                'buffer_ph6': 6,\n                'buffer_ph7': 7,\n                'buffer_ph8': 8\n            },\n            'vials': {\n                'samples': list(range(10, 34)),  # 24 sample positions\n                'standards': [1, 2],\n                'blanks': [3, 4],\n                'wash': 48,\n                'waste': 50\n            },\n            'methods': {\n                'native': 'CE_Protein_Native',\n                'denatured': 'CE_Protein_Denatured',\n                'fast_screen': 'CE_Protein_Fast'\n            }\n        }\n\n        # Analysis tracking\n        self.analysis_log = []\n        self.results_cache = {}\n\n        print(\"\u2713 System initialized\")\n\n    def initialize_system(self):\n        \"\"\"Complete system initialization.\"\"\"\n        self.sia.system_initialization_and_cleaning()\n        return self\n\n# Create system instance\nsystem = IntegratedAnalysisSystem()\nsystem.initialize_system()\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-2-sample-preparation-workflows","title":"Step 2: Sample Preparation Workflows","text":"<pre><code>class SamplePreparationWorkflows:\n    \"\"\"Advanced sample preparation methods.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.sia = system.sia\n        self.ce = system.ce\n\n    def prepare_ph_series(self, sample_vial, target_vials, volumes):\n        \"\"\"Prepare pH series from single sample.\"\"\"\n\n        print(f\"\\nPreparing pH series from vial {sample_vial}\")\n\n        ph_buffers = {\n            5.0: self.system.config['ports']['buffer_ph5'],\n            6.0: self.system.config['ports']['buffer_ph6'],\n            7.0: self.system.config['ports']['buffer_ph7'],\n            8.0: self.system.config['ports']['buffer_ph8']\n        }\n\n        preparations = []\n\n        for (target_vial, ph), (sample_vol, buffer_vol) in zip(\n            target_vials.items(), volumes\n        ):\n            print(f\"  pH {ph} \u2192 Vial {target_vial}\")\n\n            # Add buffer first\n            self.sia.prepare_batch_flow(solvent_port=ph_buffers[ph])\n            self.sia.batch_fill(\n                vial=target_vial,\n                volume=buffer_vol,\n                solvent_port=ph_buffers[ph],\n                unload=False\n            )\n\n            # Add sample (manual or automated)\n            print(f\"    Add {sample_vol} \u00b5L from vial {sample_vial}\")\n\n            # Mix thoroughly\n            self.sia.homogenize_sample(\n                vial=target_vial,\n                speed=800,\n                homogenization_time=30\n            )\n\n            preparations.append({\n                'vial': target_vial,\n                'ph': ph,\n                'sample_vol': sample_vol,\n                'buffer_vol': buffer_vol,\n                'time': datetime.now()\n            })\n\n        return preparations\n\n    def thermal_stress_preparation(self, sample_vials, temperature=60, duration=30):\n        \"\"\"Prepare thermally stressed samples.\"\"\"\n\n        print(f\"\\nThermal stress: {temperature}\u00b0C for {duration} min\")\n        print(\"Remove samples for heating\")\n\n        # Log sample removal\n        removal_time = datetime.now()\n\n        # Wait for thermal treatment\n        print(f\"Heating samples...\")\n        time.sleep(duration * 60)  # In real scenario, use external heating\n\n        print(\"Return heated samples to carousel\")\n        return_time = datetime.now()\n\n        # Quick-cool samples\n        for vial in sample_vials:\n            # Add cold buffer for quenching\n            self.sia.batch_fill(\n                vial=vial,\n                volume=100,\n                solvent_port=self.system.config['ports']['water'],\n                transfer_line_volume=300,\n                speed=3000  # Fast for quick cooling\n            )\n\n        stress_log = {\n            'vials': sample_vials,\n            'temperature': temperature,\n            'duration': duration,\n            'removed': removal_time,\n            'returned': return_time\n        }\n\n        return stress_log\n\n    def automated_dilution_series(self, stock_vial, target_vials, dilution_factors):\n        \"\"\"Create dilution series with mixing.\"\"\"\n\n        print(f\"\\nCreating dilution series from vial {stock_vial}\")\n\n        # Use continuous flow for efficiency\n        self.sia.prepare_continuous_flow(\n            solvent_port=self.system.config['ports']['water']\n        )\n\n        dilutions = []\n\n        for vial, factor in zip(target_vials, dilution_factors):\n            # Calculate volumes\n            final_volume = 1000  # \u00b5L\n            stock_volume = final_volume / factor\n            diluent_volume = final_volume - stock_volume\n\n            print(f\"  1:{factor} dilution \u2192 Vial {vial}\")\n\n            # Add diluent\n            self.sia.continuous_fill(\n                vial=vial,\n                volume=diluent_volume,\n                solvent_port=self.system.config['ports']['water']\n            )\n\n            dilutions.append({\n                'vial': vial,\n                'factor': factor,\n                'stock_vol': stock_volume,\n                'diluent_vol': diluent_volume\n            })\n\n        print(f\"Add stock solution volumes as indicated\")\n        return dilutions\n\n# Add workflows to system\nsystem.prep = SamplePreparationWorkflows(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-3-intelligent-ce-control","title":"Step 3: Intelligent CE Control","text":"<pre><code>class IntelligentCEControl:\n    \"\"\"Smart CE control with decision logic.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.ce = system.ce\n\n    def adaptive_method_selection(self, sample_info):\n        \"\"\"Select optimal method based on sample properties.\"\"\"\n\n        # Decision tree for method selection\n        if sample_info.get('screening', False):\n            method = self.system.config['methods']['fast_screen']\n\n        elif sample_info.get('denatured', False):\n            method = self.system.config['methods']['denatured']\n\n        else:\n            method = self.system.config['methods']['native']\n\n        # Adjust parameters based on pH\n        ph = sample_info.get('ph', 7.0)\n        if ph &lt; 6.0:\n            # Low pH modifications\n            print(f\"Adjusting for pH {ph}\")\n            # In practice, modify method parameters here\n\n        return method\n\n    def parallel_sample_prep(self, current_vial, next_vial):\n        \"\"\"Prepare next sample during current analysis.\"\"\"\n\n        print(f\"\\nParallel processing: Current={current_vial}, Next={next_vial}\")\n\n        # Start CE analysis\n        self.ce.method.execution_method_with_parameters(\n            vial=current_vial,\n            method_name=\"CE_Protein_Analysis\",\n            sample_name=f\"Sample_{current_vial}\"\n        )\n\n        # While CE is running, prepare next sample\n        print(\"CE running - preparing next sample...\")\n\n        # Monitor CE and prepare when safe\n        while self.ce.system.method_on():\n            status = self.ce.system.status()\n            remaining = self.ce.system.get_remaining_analysis_time()\n\n            # Start prep when 5 minutes remaining\n            if remaining &lt; 5 and remaining &gt; 0:\n                print(\"Starting next sample preparation\")\n\n                # Safe to use SIA during separation\n                self.system.sia.batch_fill(\n                    vial=next_vial,\n                    volume=500,\n                    solvent_port=self.system.config['ports']['water']\n                )\n\n                self.system.sia.homogenize_sample(\n                    vial=next_vial,\n                    speed=1000,\n                    homogenization_time=20\n                )\n\n                break\n\n            time.sleep(30)\n\n        # Wait for CE completion\n        while self.ce.system.method_on():\n            time.sleep(10)\n\n        return True\n\n    def automated_system_suitability(self):\n        \"\"\"Run system suitability before batch.\"\"\"\n\n        print(\"\\n=== System Suitability Test ===\")\n\n        # Load standard\n        self.ce.ce.load_vial_to_position(1, \"inlet\")\n        self.ce.ce.load_vial_to_position(48, \"outlet\")\n\n        # Condition with method-specific parameters\n        self.ce.ce.flush_capillary(120)  # 2 min conditioning\n\n        # Run suitability standard\n        self.ce.method.execution_method_with_parameters(\n            vial=1,\n            method_name=\"CE_System_Suitability\",\n            sample_name=\"SST_Standard\"\n        )\n\n        # Monitor and evaluate\n        while self.ce.system.method_on():\n            time.sleep(30)\n\n        # In practice, evaluate peak parameters here\n        print(\"\u2713 System suitability passed\")\n\n        # Return vials\n        self.ce.ce.unload_vial_from_position(\"inlet\")\n        self.ce.ce.unload_vial_from_position(\"outlet\")\n\n        return True\n\n# Add intelligent control\nsystem.smart_ce = IntelligentCEControl(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-4-complete-stability-study-workflow","title":"Step 4: Complete Stability Study Workflow","text":"<pre><code>def run_protein_stability_study(system):\n    \"\"\"Execute complete protein stability study.\"\"\"\n\n    print(\"\\n=== Protein Stability Study ===\")\n    print(f\"Start: {datetime.now()}\")\n\n    # Study design\n    study_design = {\n        'time_points': [0, 24, 48],  # hours\n        'ph_values': [5.0, 6.0, 7.0, 8.0],\n        'conditions': ['native', 'heat_stressed'],\n        'replicates': 2\n    }\n\n    # Calculate total samples\n    total_samples = (len(study_design['time_points']) * \n                    len(study_design['ph_values']) * \n                    len(study_design['conditions']) * \n                    study_design['replicates'])\n\n    print(f\"Total samples: {total_samples}\")\n\n    # Run system suitability\n    system.smart_ce.automated_system_suitability()\n\n    # Time point 0 - Baseline\n    print(\"\\n--- Time Point 0h ---\")\n\n    # Prepare pH series for native\n    native_vials = {10: 5.0, 11: 6.0, 12: 7.0, 13: 8.0}\n    system.prep.prepare_ph_series(\n        sample_vial=1,  # Original sample\n        target_vials=native_vials,\n        volumes=[(100, 900), (100, 900), (100, 900), (100, 900)]\n    )\n\n    # Prepare heat stressed samples\n    stressed_vials = [14, 15, 16, 17]\n    system.prep.thermal_stress_preparation(\n        sample_vials=stressed_vials,\n        temperature=60,\n        duration=30\n    )\n\n    # Analyze all T0 samples\n    all_t0_vials = list(native_vials.keys()) + stressed_vials\n\n    for i, vial in enumerate(all_t0_vials):\n        # Determine sample info\n        if vial in native_vials:\n            ph = native_vials[vial]\n            condition = 'native'\n        else:\n            idx = stressed_vials.index(vial)\n            ph = list(native_vials.values())[idx]\n            condition = 'stressed'\n\n        sample_info = {\n            'vial': vial,\n            'time_point': 0,\n            'ph': ph,\n            'condition': condition,\n            'denatured': condition == 'stressed'\n        }\n\n        # Select method adaptively\n        method = system.smart_ce.adaptive_method_selection(sample_info)\n\n        # Run with parallel prep if not last sample\n        if i &lt; len(all_t0_vials) - 1:\n            system.smart_ce.parallel_sample_prep(\n                current_vial=vial,\n                next_vial=all_t0_vials[i + 1]\n            )\n        else:\n            # Last sample - no parallel prep\n            system.ce.method.execution_method_with_parameters(\n                vial=vial,\n                method_name=method,\n                sample_name=f\"T0_{condition}_pH{ph}\"\n            )\n\n            while system.ce.system.method_on():\n                time.sleep(30)\n\n    print(\"\\n\u2713 Time point 0h complete\")\n\n    # Store samples for next time points\n    print(\"\\nStore remaining samples at 4\u00b0C\")\n    print(\"Continue with 24h and 48h time points...\")\n\n    # Generate report\n    generate_study_report(system, study_design)\n\ndef generate_study_report(system, study_design):\n    \"\"\"Generate comprehensive study report.\"\"\"\n\n    report = f\"\"\"\nProtein Stability Study Report\n==============================\nGenerated: {datetime.now()}\n\nStudy Design:\n- Time Points: {study_design['time_points']}\n- pH Values: {study_design['ph_values']}\n- Conditions: {study_design['conditions']}\n- Replicates: {study_design['replicates']}\n\nAnalysis Summary:\n- Total Samples: {len(system.analysis_log)}\n- Methods Used: {set([log.get('method') for log in system.analysis_log])}\n\nPreparation Log:\n{pd.DataFrame(system.analysis_log).to_string()}\n\nSystem Performance:\n- Average Analysis Time: X minutes\n- Total Runtime: Y hours\n- Success Rate: Z%\n\"\"\"\n\n    filename = f\"stability_study_{datetime.now().strftime('%Y%m%d')}.txt\"\n    with open(filename, 'w') as f:\n        f.write(report)\n\n    print(f\"\\n\u2713 Report saved: {filename}\")\n\n# Execute study\nrun_protein_stability_study(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-5-advanced-integration-patterns","title":"Step 5: Advanced Integration Patterns","text":""},{"location":"tutorials/sia-ce-integration/#real-time-method-optimization","title":"Real-time Method Optimization","text":"<pre><code>class RealTimeOptimization:\n    \"\"\"Optimize methods based on real-time results.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.optimization_history = []\n\n    def analyze_separation_quality(self, data_file):\n        \"\"\"Analyze separation metrics.\"\"\"\n        # In practice, parse ChemStation data file\n        # For demo, return mock metrics\n        return {\n            'resolution': 1.8,\n            'peak_symmetry': 1.1,\n            'runtime': 12.5,\n            'baseline_noise': 0.02\n        }\n\n    def optimize_next_run(self, current_metrics):\n        \"\"\"Adjust parameters for next run.\"\"\"\n\n        adjustments = {}\n\n        # Resolution optimization\n        if current_metrics['resolution'] &lt; 1.5:\n            adjustments['voltage'] = '+2kV'\n            adjustments['temperature'] = '-2\u00b0C'\n\n        # Speed optimization\n        if current_metrics['resolution'] &gt; 2.0:\n            adjustments['voltage'] = '+5kV'\n            adjustments['runtime'] = '-20%'\n\n        # Noise reduction\n        if current_metrics['baseline_noise'] &gt; 0.05:\n            adjustments['filter'] = 'increase'\n\n        self.optimization_history.append({\n            'metrics': current_metrics,\n            'adjustments': adjustments,\n            'timestamp': datetime.now()\n        })\n\n        return adjustments\n\n# Add optimization capability\nsystem.optimizer = RealTimeOptimization(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#conditional-workflow-branching","title":"Conditional Workflow Branching","text":"<pre><code>def intelligent_workflow_routing(system, sample_info):\n    \"\"\"Route samples based on previous results.\"\"\"\n\n    # Check if screening is needed\n    if 'initial_screen' not in sample_info:\n        # Run fast screening\n        result = quick_screen_analysis(system, sample_info['vial'])\n\n        if result['complexity'] == 'high':\n            # Complex sample - full analysis\n            sample_info['method'] = 'comprehensive'\n            sample_info['prep'] = 'extensive'\n\n        elif result['complexity'] == 'medium':\n            # Standard analysis\n            sample_info['method'] = 'standard'\n            sample_info['prep'] = 'normal'\n\n        else:\n            # Simple sample - fast method\n            sample_info['method'] = 'rapid'\n            sample_info['prep'] = 'minimal'\n\n    # Execute appropriate workflow\n    execute_sample_workflow(system, sample_info)\n\ndef quick_screen_analysis(system, vial):\n    \"\"\"5-minute screening analysis.\"\"\"\n\n    system.ce.method.execution_method_with_parameters(\n        vial=vial,\n        method_name=\"CE_Quick_Screen\",\n        sample_name=f\"Screen_{vial}\"\n    )\n\n    # Wait and analyze\n    while system.ce.system.method_on():\n        time.sleep(10)\n\n    # Mock complexity assessment\n    complexity = np.random.choice(['low', 'medium', 'high'], p=[0.3, 0.5, 0.2])\n\n    return {'vial': vial, 'complexity': complexity}\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#automated-troubleshooting","title":"Automated Troubleshooting","text":"<pre><code>def automated_troubleshooting(system, error_type):\n    \"\"\"Automated error recovery procedures.\"\"\"\n\n    recovery_procedures = {\n        'high_current': [\n            lambda: system.ce.ce.flush_capillary(300),  # Extended flush\n            lambda: system.ce.ce.apply_pressure_to_capillary(-50, 60),  # Vacuum\n            lambda: replace_buffer_vials(system)\n        ],\n        'no_peaks': [\n            lambda: check_sample_preparation(system),\n            lambda: verify_injection_parameters(system),\n            lambda: system.sia.homogenize_sample(vial=current_vial, speed=1500, time=60)\n        ],\n        'baseline_drift': [\n            lambda: system.ce.ce.flush_capillary(180),\n            lambda: equilibrate_temperature(system, duration=15),\n            lambda: check_buffer_levels(system)\n        ]\n    }\n\n    if error_type in recovery_procedures:\n        print(f\"\\nTroubleshooting: {error_type}\")\n\n        for i, procedure in enumerate(recovery_procedures[error_type]):\n            print(f\"  Step {i+1}: {procedure.__name__}\")\n            procedure()\n\n            # Test if resolved\n            if test_system_recovery(system):\n                print(\"\u2713 Issue resolved\")\n                return True\n\n    return False\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#best-practices-for-integration","title":"Best Practices for Integration","text":""},{"location":"tutorials/sia-ce-integration/#1-modular-design","title":"1. Modular Design","text":"<pre><code># Separate concerns into modules\nclass AnalysisModule:\n    def __init__(self, system):\n        self.system = system\n\n    def execute(self, samples):\n        raise NotImplementedError\n\nclass ProteinModule(AnalysisModule):\n    def execute(self, samples):\n        # Protein-specific workflow\n        pass\n\nclass SmallMoleculeModule(AnalysisModule):\n    def execute(self, samples):\n        # Small molecule workflow\n        pass\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#2-state-management","title":"2. State Management","text":"<pre><code>class WorkflowState:\n    \"\"\"Track workflow state for recovery.\"\"\"\n\n    def __init__(self):\n        self.current_step = None\n        self.completed_samples = []\n        self.pending_samples = []\n        self.errors = []\n\n    def checkpoint(self):\n        \"\"\"Save state for recovery.\"\"\"\n        state_file = f\"workflow_state_{datetime.now().strftime('%Y%m%d_%H%M')}.json\"\n        # Save state to file\n\n    def recover(self, state_file):\n        \"\"\"Restore from checkpoint.\"\"\"\n        # Load and resume from saved state\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<pre><code>class PerformanceMonitor:\n    \"\"\"Monitor system performance metrics.\"\"\"\n\n    def __init__(self):\n        self.metrics = {\n            'sample_prep_time': [],\n            'analysis_time': [],\n            'total_throughput': 0,\n            'error_rate': 0\n        }\n\n    def log_operation(self, operation, duration):\n        \"\"\"Log operation timing.\"\"\"\n        self.metrics[f'{operation}_time'].append(duration)\n\n    def generate_dashboard(self):\n        \"\"\"Create performance dashboard.\"\"\"\n        # Calculate statistics and trends\n        pass\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#conclusion","title":"Conclusion","text":"<p>You've learned advanced SIA-CE integration including: - Multi-component system architecture - Parallel processing strategies - Intelligent method selection - Real-time optimization - Error recovery procedures - Complex workflow design</p> <p>These patterns enable fully automated analytical workflows with minimal manual intervention.</p> <p>Further Reading</p> <ul> <li>Explore the API Reference for detailed function documentation</li> <li>Review Hardware Setup for optimization tips</li> <li>Check FAQ for common integration questions</li> </ul>"}]}