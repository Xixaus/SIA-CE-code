{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SI-CE Integration Package","text":""},{"location":"#automated-capillary-electrophoresis-with-sequential-injection","title":"Automated Capillary Electrophoresis with Sequential Injection","text":"<p>Welcome to the SI-CE Integration documentation. This package provides a unified Python interface for controlling Agilent ChemStation CE systems and Sequential Injection (SI) hardware, enabling fully automated analytical workflows. </p> <p>Specific coding mentioned later in text was developed for Openlab ChemStation ver. XXXXXXXXXX with use of instrumentation consisting of Agilent Technologies 7100 Capillary Electrophoresis (CE) in combination with sequential injection (SI) system. Compatibility with different systems was not tested and specific use is left on user consideration.</p> <p>Project Status</p> <p>This project is actively developed.</p>"},{"location":"#what-is-si-ce","title":"What is SI-CE?","text":"<p>SI-CE combines two powerful analytical techniques:</p> <ul> <li>Capillary Electrophoresis (CE): High-resolution separation technique for analyzing charged molecules</li> <li>Sequential Injection (SI): Automated sample preparation and liquid handling system</li> </ul> <p>Connection of these techniques provides user with:</p> <ul> <li>Fully automated sample preparation and analysis</li> <li>Reduced manual intervention and human error</li> <li>Increased throughput and reproducibility</li> <li>Complex analytical workflows with minimal supervision</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#chemstation-api","title":"ChemStation API","text":"<ul> <li>Direct control of OpenLab CDS ChemStation by command processor</li> <li>Comprehensive method and sequence management</li> <li>Real-time instrument status monitoring</li> <li>Automated vial handling</li> </ul>"},{"location":"#sia-api","title":"SIA API","text":"<ul> <li>Precise syringe pump control (Hamilton MVP compatible)</li> <li>Multi-position valve automation (VICI compatible)</li> <li>Pre-built workflows for common operations</li> <li>Volume tracking and safety features</li> <li>Flexible port configuration</li> </ul>"},{"location":"#integration-benefits","title":"Integration Benefits","text":"<ul> <li>Seamless coordination between sample preparation and analysis</li> <li>One unified Python interface for complete workflow control</li> <li>Reduced analysis time through parallel operations</li> <li>Consistent and reproducible analytical procedures</li> </ul>"},{"location":"#code-preview","title":"Code preview","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize systems\nce = ChemstationAPI()\nsia = PreparedSIAMethods(ce, syringe, valve)\n\n# Automated workflow\nsia.system_initialization_and_cleaning()\nsia.continuous_fill(vial=15, volume=1500, solvent_port=5)\nce.method.execution_method_with_parameters(\n    vial=15, \n    method_name=\"Protein_Analysis\",\n    sample_name=\"BSA_Standard\"\n)\n</code></pre>"},{"location":"#documentation-overview","title":"Documentation Overview","text":"<p>This documentation is organized to help you quickly find what you need:</p> <ul> <li>Getting Started: Installation and first steps</li> <li>ChemStation API: Control your ChemStation system</li> <li>SIA API: Automate sample preparation</li> <li>Tutorials: Step-by-step guides</li> <li>API Reference: Complete function documentation</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":""},{"location":"#hardware","title":"Hardware","text":"<ul> <li>Agilent 7100 Capillary Electrophoresis System</li> <li>Hamilton MVP or compatible syringe pump</li> <li>VICI or compatible valve selector</li> <li>Windows PC with available COM ports</li> </ul>"},{"location":"#software","title":"Software","text":"<ul> <li>Windows 7 or higher</li> <li>OpenLab CDS ChemStation Edition</li> <li>Python 3.7+</li> <li>Required Python packages (see Getting Started)</li> </ul>"},{"location":"#support-and-contributing","title":"Support and Contributing","text":"<ul> <li>Issues: Report bugs on GitHub Issues</li> <li>Discussions: Join our community discussions</li> <li>Contributing: See our contribution guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Ready to start?</p> <p>Head to Getting Started to install the package and run your first automated analysis!</p>"},{"location":"getting-started/","title":"Getting Started with SIA-CE","text":"<p>This comprehensive guide will help you install the SIA-CE package and run your first automated Sequential Injection - Capillary Electrophoresis analysis.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before installing SIA-CE, ensure your system meets these requirements:</p>"},{"location":"getting-started/#software-requirements","title":"Software Requirements","text":"<ul> <li>Python 3.7 or higher with pip package manager</li> <li>Agilent ChemStation software properly configured and licensed</li> <li>VSCode (recommended) - Provides enhanced code editing capabilities and debugging tools</li> </ul>"},{"location":"getting-started/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Capillary Electrophoresis system compatible with ChemStation</li> <li>SIA components (syringe pump, valve selector)</li> <li>Serial communication ports for device connectivity</li> </ul>"},{"location":"getting-started/#installation-process","title":"Installation Process","text":""},{"location":"getting-started/#step-1-install-required-python-packages","title":"Step 1: Install Required Python Packages","text":"<p>Install the essential Python dependencies:</p> <pre><code>python -m pip install pyserial tqdm pandas\n</code></pre> <p>Package descriptions:</p> <ul> <li><code>pyserial</code> - Serial communication with SIA hardware</li> <li><code>tqdm</code> - Progress bars for long-running operations  </li> <li><code>pandas</code> - Data manipulation and analysis</li> </ul>"},{"location":"getting-started/#step-2-install-development-environment-recommended","title":"Step 2: Install Development Environment (Recommended)","text":"<p>For enhanced script development and testing, install Jupyter Notebook:</p> <pre><code>python -m pip install jupyter notebook\n</code></pre> <p>Benefits of Jupyter Notebook:</p> <ul> <li>Interactive code development and testing</li> <li>Step-by-step script execution</li> <li>Integrated data visualization</li> <li>Easy documentation alongside code</li> </ul>"},{"location":"getting-started/#step-3-download-sia-ce-package","title":"Step 3: Download SIA-CE Package","text":"<ol> <li> <p>Download from GitHub:    Navigate to: https://github.com/Xixaus/SIA-CE-code</p> </li> <li> <p>Extract the package:</p> <ul> <li> <p>Download the ZIP file or clone the repository.</p> </li> <li> <p>Extract to a permanent location on your computer (e.g., <code>C:\\SIA-CE\\</code>)</p> </li> </ul> </li> <li> <p>Initialize the package: <pre><code>python macro_update.py\n</code></pre>    This script configures file paths and initializes the package for your system.</p> </li> </ol>"},{"location":"getting-started/#chemstation-configuration","title":"ChemStation Configuration","text":""},{"location":"getting-started/#step-1-load-the-communication-macro","title":"Step 1: Load the Communication Macro","text":"<ol> <li>Open ChemStation and ensure it's fully loaded</li> <li>Navigate to the command line interface</li> <li>Execute the macro loading command:</li> </ol> <pre><code>macro \"C:\\path\\to\\SIA-CE\\ChemstationAPI\\core\\ChemPyConnect.mac\"; Python_Run\n</code></pre> <p>Critical Path Configuration</p> <p>Replace <code>C:\\path\\to\\SIA-CE\\</code> with your actual installation directory!</p> <p>Example: If installed in <code>D:\\Lab\\SIA-CE\\</code>, use: <pre><code>macro \"D:\\Lab\\SIA-CE\\ChemstationAPI\\core\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p>"},{"location":"getting-started/#step-2-verify-chemstation-integration","title":"Step 2: Verify ChemStation Integration","text":"<p>Successful macro loading will display: <pre><code>Macro loaded and executed successfully\nCommunication interface initialized\n</code></pre></p> <p>Troubleshooting Tip</p> <p>If you encounter initialization errors, the correct macro path will be displayed in the ChemstationAPI error message for easy correction.</p>"},{"location":"getting-started/#step-3-test-python-chemstation-communication","title":"Step 3: Test Python-ChemStation Communication","text":"<p>In your Python environment, execute:</p> <pre><code>from ChemstationAPI.ChemstationAPI import ChemstationAPI\n\n# Initialize ChemStation communication\nchemstation = ChemstationAPI()\nprint(\"ChemStation connection established successfully!\")\n</code></pre> <p>If this executes without errors, your ChemStation integration is properly configured.</p>"},{"location":"getting-started/#hardware-configuration","title":"Hardware Configuration","text":""},{"location":"getting-started/#step-1-identify-com-ports","title":"Step 1: Identify COM Ports","text":"<p>Discover available serial communication ports on your system:</p> <pre><code>import serial.tools.list_ports\n\nprint(\"Available COM Ports:\")\nprint(\"-\" * 40)\n\nports = serial.tools.list_ports.comports()\nfor port in ports:\n    print(f\"{port.device}: {port.description}\")\n    print(f\"  Hardware ID: {port.hwid}\")\n    print()\n</code></pre> <p>Example output: <pre><code>Available COM Ports:\n----------------------------------------\nCOM3: USB Serial Device (COM3)\n  Hardware ID: USB\\VID_0403&amp;PID_6001\n\nCOM4: Prolific USB-to-Serial Comm Port (COM4)  \n  Hardware ID: USB\\VID_067B&amp;PID_2303\n</code></pre></p>"},{"location":"getting-started/#step-2-configure-syringe-controller","title":"Step 2: Configure Syringe Controller","text":"<p>Test and configure your syringe pump:</p> <pre><code>from SIA_API.devices import SyringeController\n\n# Initialize syringe with appropriate parameters\nsyringe = SyringeController(\n    port=\"COM3\",           # Use your identified COM port\n    syringe_size=1000,     # Syringe volume in microliters\n    baudrate=9600          # Match your device settings\n)\n\n# Perform initialization sequence\nsyringe.initialization()  # Initialize syringe pump\nprint(\"Syringe controller ready!\")\n\n# Test basic functionality\nsyringe.print_volume_in_syringe()  # Display current volume status\n</code></pre>"},{"location":"getting-started/#step-3-configure-valve-selector","title":"Step 3: Configure Valve Selector","text":"<p>Test and configure your valve selector:</p> <pre><code>from SIA_API.devices import ValveSelector\n\n# Initialize valve selector\nvalve = ValveSelector(\n    port=\"COM4\",           # Use your identified COM port  \n    num_positions=8,       # Number of valve positions\n    baudrate=9600         # Match your device settings\n)\n\n# Test valve movement\nprint(\"Testing valve positions...\")\nfor position in range(1, 4):  # Test first 3 positions\n    valve.position(position)\n    print(f\"Moved to position {position}\")\n    time.sleep(1)  # Brief pause between movements\n\nprint(\"Valve selector configured successfully!\")\n</code></pre>"},{"location":"getting-started/#verification-and-testing","title":"Verification and Testing","text":""},{"location":"getting-started/#complete-system-test","title":"Complete System Test","text":"<p>Run this comprehensive test to verify all components:</p> <pre><code>import time\nfrom ChemstationAPI.ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\n\ndef system_test():\n    \"\"\"Complete system functionality test\"\"\"\n\n    print(\"=== SIA-CE System Test ===\")\n\n    # Test 1: ChemStation Communication\n    print(\"\\n1. Testing ChemStation communication...\")\n    try:\n        chemstation = ChemstationAPI()\n        response = chemstation.send(\"response$ = _METHPATH$\")\n        print(f\"\u2713 ChemStation connected. Method path: {response}\")\n    except Exception as e:\n        print(f\"\u2717 ChemStation error: {e}\")\n        return False\n\n    # Test 2: Syringe Controller\n    print(\"\\n2. Testing syringe controller...\")\n    try:\n        syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n        syringe.initialization()\n        print(\"\u2713 Syringe controller ready\")\n    except Exception as e:\n        print(f\"\u2717 Syringe error: {e}\")\n        return False\n\n    # Test 3: Valve Selector  \n    print(\"\\n3. Testing valve selector...\")\n    try:\n        valve = ValveSelector(port=\"COM4\", num_positions=8)\n        valve.position(1)\n        print(\"\u2713 Valve selector operational\")\n    except Exception as e:\n        print(f\"\u2717 Valve error: {e}\")\n        return False\n\n    print(\"\\n\ud83c\udf89 All systems operational! Ready for automated analysis.\")\n    return True\n\n# Run the test\nsystem_test()\n</code></pre>"},{"location":"getting-started/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"getting-started/#chemstation-connection-problems","title":"ChemStation Connection Problems","text":"<p>Error: <code>ConnectionError: Failed to establish communication with ChemStation</code></p> <p>Solutions:</p> <ol> <li>Verify ChemStation is running and fully loaded</li> <li>Re-execute the macro command in ChemStation command line  </li> <li>Check file permissions in the ChemStation installation directory</li> <li>Restart ChemStation if communication files become corrupted</li> </ol>"},{"location":"getting-started/#com-port-access-issues","title":"COM Port Access Issues","text":"<p>Error: <code>PermissionError: Access is denied</code> or <code>SerialException: could not open port</code></p> <p>Solutions:</p> <ol> <li>Run Python as Administrator (right-click \u2192 \"Run as administrator\")</li> <li>Close conflicting applications (HyperTerminal, Arduino IDE, other serial monitors)</li> <li>Check Device Manager for yellow warning icons on COM ports</li> <li>Verify correct COM port numbers using the port detection script</li> </ol>"},{"location":"getting-started/#package-import-errors","title":"Package Import Errors","text":"<p>Error: <code>ModuleNotFoundError: No module named 'SIA_API'</code> or similar</p> <p>Solutions:</p> <ol> <li>Verify package installation path in Python's sys.path</li> <li>Run <code>macro_update.py</code> to configure paths correctly</li> <li>Check Python environment (virtual environments may need separate package installation)</li> <li>Restart Python IDE after path configuration changes</li> </ol>"},{"location":"getting-started/#hardware-communication-timeouts","title":"Hardware Communication Timeouts","text":"<p>Error: <code>TimeoutError: Device did not respond within expected time</code></p> <p>Solutions:</p> <ol> <li>Check physical connections (cables, power supplies)</li> <li>Verify baudrate settings match device specifications</li> <li>Increase timeout values in device configuration</li> <li>Test with device manufacturer software to confirm hardware functionality</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have SIA-CE installed and configured, explore these resources:</p>"},{"location":"getting-started/#learn-the-fundamentals","title":"Learn the Fundamentals:","text":"<ol> <li>ChemStation File Protocol - Understanding communication mechanisms</li> <li>Basic CE Operations - Essential capillary electrophoresis functions</li> <li>SIA Device Control - Sequential injection automation</li> </ol>"},{"location":"getting-started/#hands-on-tutorials","title":"Hands-On Tutorials:","text":"<ol> <li>First Analysis Tutorial - Complete walkthrough of automated analysis</li> <li>SIA Workflows - Advanced automation patterns</li> <li>Method Development - Optimizing analytical procedures</li> </ol>"},{"location":"getting-started/#advanced-topics","title":"Advanced Topics:","text":"<ol> <li>Batch Processing - High-throughput sample processing</li> <li>Custom Workflows - Creating specialized automation sequences</li> <li>Troubleshooting Guide - Solving common operational issues</li> </ol> <p>Installation Complete!</p> <p>Congratulations! You've successfully installed and configured SIA-CE for automated analytical workflows.</p> <p>Your system is now ready for: - Automated sample preparation via Sequential Injection - Integrated Capillary Electrophoresis analysis - Complete workflow automation from sample to results</p> <p>Ready to begin? Start with the First Analysis Tutorial for a guided introduction to automated CE analysis.</p>"},{"location":"readme/","title":"SIA-CE Documentation","text":"<p>This directory contains the MkDocs documentation for the SIA-CE integration package.</p>"},{"location":"readme/#building-the-documentation","title":"Building the Documentation","text":""},{"location":"readme/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Python 3.7+</li> <li>Install documentation dependencies:    <pre><code>pip install -r docs/requirements.txt\n</code></pre></li> </ol>"},{"location":"readme/#local-development","title":"Local Development","text":"<ol> <li> <p>Start the development server: <pre><code>mkdocs serve\n</code></pre>    The documentation will be available at <code>http://127.0.0.1:8000/</code></p> </li> <li> <p>Live reload:    The development server automatically reloads when you make changes to the documentation files.</p> </li> </ol>"},{"location":"readme/#building-for-production","title":"Building for Production","text":"<ol> <li> <p>Build the static site: <pre><code>mkdocs build\n</code></pre>    This creates a <code>site/</code> directory with the static HTML files.</p> </li> <li> <p>Test the build: <pre><code>python -m http.server 8000 --directory site/\n</code></pre></p> </li> </ol>"},{"location":"readme/#deployment-options","title":"Deployment Options","text":""},{"location":"readme/#github-pages","title":"GitHub Pages","text":"<ol> <li> <p>Automatic deployment: <pre><code>mkdocs gh-deploy\n</code></pre>    This builds and pushes to the <code>gh-pages</code> branch.</p> </li> <li> <p>Manual deployment:</p> </li> <li>Build the site: <code>mkdocs build</code></li> <li>Push the <code>site/</code> directory to <code>gh-pages</code> branch</li> </ol>"},{"location":"readme/#other-platforms","title":"Other Platforms","text":"<ul> <li>Read the Docs: Add <code>.readthedocs.yml</code> configuration</li> <li>Netlify: Deploy the <code>site/</code> directory</li> <li>GitLab Pages: Use CI/CD pipeline</li> </ul>"},{"location":"readme/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Home page\n\u251c\u2500\u2500 getting-started.md          # Installation guide\n\u251c\u2500\u2500 chemstation-api/            # ChemStation documentation\n\u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u251c\u2500\u2500 file-protocol.md\n\u2502   \u251c\u2500\u2500 basic-operations.md\n\u2502   \u251c\u2500\u2500 methods-sequences.md\n\u2502   \u2514\u2500\u2500 troubleshooting.md\n\u251c\u2500\u2500 sia-api/                    # SIA documentation\n\u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u251c\u2500\u2500 basic-operations.md\n\u2502   \u251c\u2500\u2500 workflows.md\n\u2502   \u2514\u2500\u2500 port-configuration.md\n\u251c\u2500\u2500 tutorials/                  # Step-by-step guides\n\u2502   \u251c\u2500\u2500 first-analysis.md\n\u2502   \u251c\u2500\u2500 batch-processing.md\n\u2502   \u2514\u2500\u2500 sia-ce-integration.md\n\u251c\u2500\u2500 api-reference/              # API documentation\n\u2502   \u251c\u2500\u2500 chemstation.md\n\u2502   \u251c\u2500\u2500 sia.md\n\u2502   \u2514\u2500\u2500 error-handling.md\n\u2514\u2500\u2500 appendix/                   # Additional resources\n    \u251c\u2500\u2500 hardware-setup.md\n    \u2514\u2500\u2500 faq.md\n</code></pre>"},{"location":"readme/#writing-documentation","title":"Writing Documentation","text":""},{"location":"readme/#style-guide","title":"Style Guide","text":"<ol> <li>Headers: Use ATX-style headers (<code>#</code>, <code>##</code>, etc.)</li> <li>Code blocks: Use triple backticks with language identifier</li> <li>Links: Relative links for internal pages</li> <li>Admonitions: Use for tips, warnings, and notes</li> </ol>"},{"location":"readme/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create a new <code>.md</code> file in the appropriate directory</li> <li>Add the page to <code>nav</code> section in <code>mkdocs.yml</code></li> <li>Link to the new page from related pages</li> </ol>"},{"location":"readme/#code-examples","title":"Code Examples","text":"<p>Always test code examples before including them:</p> <pre><code># Good example - complete and runnable\nfrom ChemstationAPI import ChemstationAPI\n\napi = ChemstationAPI()\napi.ce.load_vial_to_position(15, \"inlet\")\n</code></pre>"},{"location":"readme/#using-admonitions","title":"Using Admonitions","text":"<pre><code>!!! tip \"Best Practice\"\n    Always validate before operations.\n\n!!! warning \"Important\"\n    This operation cannot be undone.\n\n!!! note\n    Additional information for advanced users.\n</code></pre>"},{"location":"readme/#maintenance","title":"Maintenance","text":""},{"location":"readme/#regular-updates","title":"Regular Updates","text":"<ol> <li>API changes: Update reference documentation</li> <li>New features: Add tutorials and examples</li> <li>Bug fixes: Update troubleshooting guides</li> <li>User feedback: Improve FAQ section</li> </ol>"},{"location":"readme/#version-management","title":"Version Management","text":"<ul> <li>Tag documentation versions with releases</li> <li>Maintain compatibility notes</li> <li>Update changelog</li> </ul>"},{"location":"readme/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make documentation changes</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Submit pull request</li> </ol>"},{"location":"readme/#support","title":"Support","text":"<p>For documentation issues: - Open an issue on GitHub - Tag with <code>documentation</code> - Provide specific page and section</p>"},{"location":"readme/#license","title":"License","text":"<p>Documentation is licensed under the same terms as the main project (MIT License).</p>"},{"location":"api-reference/chemstation/","title":"ChemStation API Reference","text":"<p>Complete API documentation for the ChemStation control interface.</p>"},{"location":"api-reference/chemstation/#chemstationapi","title":"ChemstationAPI","text":"<p>Main API controller class providing unified access to all ChemStation functionality.</p>"},{"location":"api-reference/chemstation/#constructor","title":"Constructor","text":"<pre><code>ChemstationAPI(config: Optional[CommunicationConfig] = None)\n</code></pre> <p>Parameters: - <code>config</code>: Communication configuration settings. If None, uses default configuration.</p> <p>Raises: - <code>ConfigurationError</code>: If communication setup fails - <code>ConnectionError</code>: If ChemStation connection test fails</p> <p>Example: <pre><code>from ChemstationAPI import ChemstationAPI\n\n# Default configuration\napi = ChemstationAPI()\n\n# Custom configuration\nfrom ChemstationAPI.core.communication_config import CommunicationConfig\nconfig = CommunicationConfig(verbose=True, timeout=10.0)\napi = ChemstationAPI(config)\n</code></pre></p>"},{"location":"api-reference/chemstation/#attributes","title":"Attributes","text":"<ul> <li><code>ce</code>: CE module for instrument control</li> <li><code>method</code>: Methods module for method management</li> <li><code>sequence</code>: Sequence module for batch operations</li> <li><code>system</code>: System module for status monitoring</li> <li><code>validation</code>: Validation module for checks</li> </ul>"},{"location":"api-reference/chemstation/#core-method","title":"Core Method","text":""},{"location":"api-reference/chemstation/#send","title":"send()","text":"<p>Send command directly to ChemStation Command Processor.</p> <pre><code>send(command: str, timeout: float = 5.0) -&gt; Optional[str]\n</code></pre> <p>Parameters: - <code>command</code>: ChemStation CP command string - <code>timeout</code>: Maximum wait time in seconds</p> <p>Returns: - Response string if command starts with \"response$ = \", otherwise None</p> <p>Example: <pre><code># Get value\nvoltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))')\n\n# Execute command\napi.send('LoadMethod _METHPATH$, \"MyMethod.M\"')\n</code></pre></p>"},{"location":"api-reference/chemstation/#ce-module","title":"CE Module","text":"<p>Capillary Electrophoresis instrument control.</p>"},{"location":"api-reference/chemstation/#methods","title":"Methods","text":""},{"location":"api-reference/chemstation/#load_vial_to_position","title":"load_vial_to_position()","text":"<p>Load vial from carousel to lift position.</p> <pre><code>ce.load_vial_to_position(vial: int, position: str = \"replenishment\") -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Carousel position (1-49) - <code>position</code>: Target position (\"inlet\", \"outlet\", \"replenishment\")</p> <p>Raises: - <code>VialError</code>: If vial not present - <code>ValueError</code>: If invalid position</p> <p>Example: <pre><code>api.ce.load_vial_to_position(15, \"inlet\")\n</code></pre></p>"},{"location":"api-reference/chemstation/#unload_vial_from_position","title":"unload_vial_from_position()","text":"<p>Return vial from lift position to carousel.</p> <pre><code>ce.unload_vial_from_position(position: str = \"replenishment\") -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: Lift position to unload from</p>"},{"location":"api-reference/chemstation/#get_vial_state","title":"get_vial_state()","text":"<p>Get current vial location.</p> <pre><code>ce.get_vial_state(vial: int) -&gt; str\n</code></pre> <p>Returns: - \"carousel\", \"inlet\", \"outlet\", \"replenishment\", or \"out_system\"</p>"},{"location":"api-reference/chemstation/#flush_capillary","title":"flush_capillary()","text":"<p>Perform high-pressure capillary flush.</p> <pre><code>ce.flush_capillary(time_flush: float, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>time_flush</code>: Flush duration in seconds - <code>wait</code>: Block until complete</p>"},{"location":"api-reference/chemstation/#apply_pressure_to_capillary","title":"apply_pressure_to_capillary()","text":"<p>Apply specific pressure for injection or conditioning.</p> <pre><code>ce.apply_pressure_to_capillary(pressure: float, time_pressure: float, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>pressure</code>: Pressure in mbar (-100 to +100) - <code>time_pressure</code>: Duration in seconds - <code>wait</code>: Block until complete</p>"},{"location":"api-reference/chemstation/#methods-module","title":"Methods Module","text":"<p>CE method management and execution.</p>"},{"location":"api-reference/chemstation/#methods_1","title":"Methods","text":""},{"location":"api-reference/chemstation/#load","title":"load()","text":"<p>Load CE method from file.</p> <pre><code>method.load(method_name: str, method_path: str = \"_METHPATH$\") -&gt; None\n</code></pre> <p>Parameters: - <code>method_name</code>: Method filename without .M extension - <code>method_path</code>: Directory path (default: ChemStation method directory)</p> <p>Raises: - <code>MethodError</code>: If method cannot be loaded - <code>ValidationError</code>: If method doesn't exist</p>"},{"location":"api-reference/chemstation/#save","title":"save()","text":"<p>Save current method.</p> <pre><code>method.save(method_name: str = \"_METHFILE$\", method_path: str = \"_METHPATH$\", \n           comment: str = \"\\\" \\\"\") -&gt; None\n</code></pre> <p>Parameters: - <code>method_name</code>: Filename for saved method - <code>method_path</code>: Save directory - <code>comment</code>: Optional method comment</p>"},{"location":"api-reference/chemstation/#run","title":"run()","text":"<p>Execute current method.</p> <pre><code>method.run(data_name: str, data_dir: str = \"_DATAPATH$\") -&gt; None\n</code></pre> <p>Parameters: - <code>data_name</code>: Name for data file - <code>data_dir</code>: Data storage directory</p>"},{"location":"api-reference/chemstation/#execution_method_with_parameters","title":"execution_method_with_parameters()","text":"<p>Execute method with custom parameters.</p> <pre><code>method.execution_method_with_parameters(\n    vial: int, \n    method_name: str,\n    sample_name: str = \"\", \n    comment: str = \"\",\n    subdirectory_name: str = \"\"\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Sample vial position - <code>method_name</code>: Method to execute - <code>sample_name</code>: Sample identifier - <code>comment</code>: Analysis comment - <code>subdirectory_name</code>: Data subdirectory</p>"},{"location":"api-reference/chemstation/#sequence-module","title":"Sequence Module","text":"<p>Batch analysis management.</p>"},{"location":"api-reference/chemstation/#methods_2","title":"Methods","text":""},{"location":"api-reference/chemstation/#load_sequence","title":"load_sequence()","text":"<p>Load sequence from file.</p> <pre><code>sequence.load_sequence(seq_name: str, seq_dir: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#save_sequence","title":"save_sequence()","text":"<p>Save current sequence.</p> <pre><code>sequence.save_sequence(seq_name: str = \"_SEQFILE$\", seq_dir: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#modify_sequence_row","title":"modify_sequence_row()","text":"<p>Modify sequence table row.</p> <pre><code>sequence.modify_sequence_row(\n    row: int,\n    vial_sample: str = \"\",\n    method: str = \"\",\n    sample_name: str = \"\",\n    sample_info: str = \"\",\n    data_file_name: str = \"\"\n) -&gt; None\n</code></pre> <p>Parameters: - <code>row</code>: Row number (1-based) - Other parameters: Optional updates (empty = no change)</p>"},{"location":"api-reference/chemstation/#prepare_sequence_table","title":"prepare_sequence_table()","text":"<p>Import sequence from Excel.</p> <pre><code>sequence.prepare_sequence_table(\n    excel_file_path: str,\n    sequence_name: str = None,\n    sheet_name: int = 0,\n    vial_column: str = None,\n    method_column: str = None,\n    sample_name_column: str = None,\n    sample_info_column: str = None,\n    filename_column: str = None,\n    replicate_column: str = None\n) -&gt; None\n</code></pre> <p>Parameters: - <code>excel_file_path</code>: Path to Excel file - <code>sequence_name</code>: Sequence to load first - <code>sheet_name</code>: Worksheet index - Column parameters: Excel column names</p>"},{"location":"api-reference/chemstation/#sequence-control","title":"Sequence Control","text":"<pre><code>sequence.start() -&gt; None     # Start sequence execution\nsequence.pause() -&gt; None     # Pause after current sample\nsequence.resume() -&gt; None    # Resume paused sequence\n</code></pre>"},{"location":"api-reference/chemstation/#system-module","title":"System Module","text":"<p>System status monitoring and control.</p>"},{"location":"api-reference/chemstation/#methods_3","title":"Methods","text":""},{"location":"api-reference/chemstation/#method_on","title":"method_on()","text":"<p>Check if method is running.</p> <pre><code>system.method_on() -&gt; bool\n</code></pre> <p>Returns: - True if method executing, False if idle</p>"},{"location":"api-reference/chemstation/#status","title":"status()","text":"<p>Get acquisition status.</p> <pre><code>system.status() -&gt; str\n</code></pre> <p>Returns: - \"STANDBY\", \"PRERUN\", \"RUN\", \"POSTRUN\", \"ERROR\", \"ABORT\"</p>"},{"location":"api-reference/chemstation/#rc_status","title":"RC_status()","text":"<p>Get RC module status.</p> <pre><code>system.RC_status(module: str = \"CE1\") -&gt; str\n</code></pre> <p>Returns: - \"Idle\", \"Run\", \"NotReady\", \"Error\", \"Maintenance\"</p>"},{"location":"api-reference/chemstation/#wait_for_ready","title":"wait_for_ready()","text":"<p>Wait for system ready state.</p> <pre><code>system.wait_for_ready(timeout: int = 60) -&gt; bool\n</code></pre> <p>Parameters: - <code>timeout</code>: Maximum wait time in seconds</p> <p>Returns: - True if ready within timeout, False otherwise</p>"},{"location":"api-reference/chemstation/#time-monitoring","title":"Time Monitoring","text":"<pre><code>system.get_elapsed_analysis_time() -&gt; float    # Minutes elapsed\nsystem.get_analysis_time() -&gt; float             # Total expected minutes\nsystem.get_remaining_analysis_time() -&gt; float   # Minutes remaining\n</code></pre>"},{"location":"api-reference/chemstation/#abort_run","title":"abort_run()","text":"<p>Emergency stop current operation.</p> <pre><code>system.abort_run() -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#add_register_reader","title":"add_register_reader()","text":"<p>Add register inspection tool to ChemStation menu.</p> <pre><code>system.add_register_reader(register_reader_macro: str = \"...\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#validation-module","title":"Validation Module","text":"<p>Input validation and system checks.</p>"},{"location":"api-reference/chemstation/#methods_4","title":"Methods","text":""},{"location":"api-reference/chemstation/#validate_method_name","title":"validate_method_name()","text":"<p>Check method file exists.</p> <pre><code>validation.validate_method_name(method: str, dir_path: str = \"_METHPATH$\") -&gt; None\n</code></pre> <p>Raises: - <code>ValidationError</code>: If method not found</p>"},{"location":"api-reference/chemstation/#validate_sequence_name","title":"validate_sequence_name()","text":"<p>Check sequence file exists.</p> <pre><code>validation.validate_sequence_name(sequence: str, dir_path: str = \"_SEQPATH$\") -&gt; None\n</code></pre>"},{"location":"api-reference/chemstation/#validate_vial_in_system","title":"validate_vial_in_system()","text":"<p>Check vial presence.</p> <pre><code>validation.validate_vial_in_system(vial: int) -&gt; None\n</code></pre> <p>Raises: - <code>VialError</code>: If vial not detected</p>"},{"location":"api-reference/chemstation/#vial_in_position","title":"vial_in_position()","text":"<p>Check vial at lift position.</p> <pre><code>validation.vial_in_position(position: str) -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: \"inlet\", \"outlet\", or \"replenishment\"</p>"},{"location":"api-reference/chemstation/#validate_use_carousel","title":"validate_use_carousel()","text":"<p>Check carousel availability.</p> <pre><code>validation.validate_use_carousel() -&gt; None\n</code></pre> <p>Raises: - <code>SystemError</code>: If carousel not available</p>"},{"location":"api-reference/chemstation/#validate_method_run","title":"validate_method_run()","text":"<p>Check method started successfully.</p> <pre><code>validation.validate_method_run() -&gt; None\n</code></pre> <p>Raises: - <code>MethodError</code>: If method not running</p>"},{"location":"api-reference/chemstation/#get_vialtable","title":"get_vialtable()","text":"<p>Get all vial positions status.</p> <pre><code>validation.get_vialtable() -&gt; Dict[int, bool]\n</code></pre> <p>Returns: - Dictionary mapping position (1-48) to presence (True/False)</p>"},{"location":"api-reference/chemstation/#list_vial_validation","title":"list_vial_validation()","text":"<p>Validate multiple vials.</p> <pre><code>validation.list_vial_validation(vials: list) -&gt; None\n</code></pre> <p>Raises: - <code>VialError</code>: Lists all missing vials</p>"},{"location":"api-reference/chemstation/#configuration","title":"Configuration","text":""},{"location":"api-reference/chemstation/#communicationconfig","title":"CommunicationConfig","text":"<p>Configuration class for ChemStation communication.</p> <pre><code>@dataclass\nclass CommunicationConfig:\n    comm_dir: str = \"core/communication_files\"\n    command_filename: str = \"command\"\n    response_filename: str = \"response\"\n    max_command_number: int = 256\n    default_timeout: float = 5.0\n    retry_delay: float = 0.1\n    max_retries: int = 10\n    test_on_init: bool = True\n    verbose: bool = False\n</code></pre> <p>Example: <pre><code>config = CommunicationConfig(\n    verbose=True,\n    default_timeout=10.0,\n    test_on_init=False\n)\napi = ChemstationAPI(config)\n</code></pre></p>"},{"location":"api-reference/chemstation/#common-patterns","title":"Common Patterns","text":""},{"location":"api-reference/chemstation/#complete-analysis","title":"Complete Analysis","text":"<pre><code># Standard analysis workflow\ndef analyze_sample(vial, method, name):\n    # Validate\n    api.validation.validate_vial_in_system(vial)\n    api.validation.validate_method_name(method)\n\n    # Load vials\n    api.ce.load_vial_to_position(vial, \"inlet\")\n    api.ce.load_vial_to_position(48, \"outlet\")\n\n    # Condition\n    api.ce.flush_capillary(60)\n\n    # Run\n    api.method.load(method)\n    api.method.run(name)\n\n    # Monitor\n    while api.system.method_on():\n        print(f\"{api.system.get_remaining_analysis_time():.1f} min remaining\")\n        time.sleep(30)\n\n    # Cleanup\n    api.ce.unload_vial_from_position(\"inlet\")\n    api.ce.unload_vial_from_position(\"outlet\")\n</code></pre>"},{"location":"api-reference/chemstation/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept VialError:\n    print(\"Vial not found - check carousel\")\nexcept SystemError:\n    print(\"System busy - wait and retry\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n    api.system.abort_run()\n</code></pre>"},{"location":"api-reference/chemstation/#sequence-creation","title":"Sequence Creation","text":"<pre><code># Create sequence from data\nsamples = [\n    (10, \"Method1\", \"Sample1\"),\n    (11, \"Method2\", \"Sample2\"),\n    (12, \"Method1\", \"Sample3\")\n]\n\nfor row, (vial, method, name) in enumerate(samples, 1):\n    api.sequence.modify_sequence_row(\n        row=row,\n        vial_sample=str(vial),\n        method=method,\n        sample_name=name\n    )\n\napi.sequence.save_sequence(\"MySequence\")\napi.sequence.start()\n</code></pre>"},{"location":"api-reference/error-handling/","title":"Error Handling Reference","text":"<p>Comprehensive guide to exception types and error handling strategies in SIA-CE.</p>"},{"location":"api-reference/error-handling/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>ChemstationError (base)\n\u251c\u2500\u2500 CommunicationError\n\u251c\u2500\u2500 CommandError\n\u251c\u2500\u2500 FileOperationError\n\u251c\u2500\u2500 SequenceError\n\u251c\u2500\u2500 MethodError\n\u251c\u2500\u2500 VialError\n\u251c\u2500\u2500 ConfigurationError\n\u251c\u2500\u2500 ValidationError\n\u2514\u2500\u2500 TimeoutError\n</code></pre>"},{"location":"api-reference/error-handling/#exception-types","title":"Exception Types","text":""},{"location":"api-reference/error-handling/#chemstationerror","title":"ChemstationError","text":"<p>Base exception for all ChemStation-related errors.</p> <pre><code>try:\n    # Any ChemStation operation\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept ChemstationError as e:\n    print(f\"ChemStation error: {e}\")\n    # Catches any ChemStation-related exception\n</code></pre>"},{"location":"api-reference/error-handling/#communicationerror","title":"CommunicationError","text":"<p>File-based communication system failures.</p> <p>Common Causes: - ChemStation macro not running - Communication files not accessible - Protocol synchronization errors</p> <p>Example: <pre><code>try:\n    api = ChemstationAPI()\nexcept CommunicationError as e:\n    print(\"Failed to connect to ChemStation\")\n    print(\"Check that macro is running\")\n    # Start macro: macro \"path\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p>"},{"location":"api-reference/error-handling/#commanderror","title":"CommandError","text":"<p>ChemStation command execution failures.</p> <p>Common Causes: - Invalid command syntax - Wrong parameter values - Instrument state conflicts</p> <p>Example: <pre><code>try:\n    api.send(\"InvalidCommand parameter\")\nexcept CommandError as e:\n    print(f\"Command rejected: {e}\")\n    # Check command syntax in ChemStation documentation\n</code></pre></p>"},{"location":"api-reference/error-handling/#fileoperationerror","title":"FileOperationError","text":"<p>File system operation failures.</p> <p>Common Causes: - Insufficient permissions - Disk space issues - File locked by another process</p> <p>Example: <pre><code>try:\n    api.method.save(\"NewMethod\")\nexcept FileOperationError as e:\n    print(f\"Cannot save file: {e}\")\n    # Check disk space and permissions\n</code></pre></p>"},{"location":"api-reference/error-handling/#sequenceerror","title":"SequenceError","text":"<p>Sequence management failures.</p> <p>Common Causes: - Sequence file not found - Invalid sequence parameters - Excel import issues</p> <p>Example: <pre><code>try:\n    api.sequence.prepare_sequence_table(\"samples.xlsx\")\nexcept SequenceError as e:\n    print(f\"Sequence error: {e}\")\n    # Check Excel file format and accessibility\n</code></pre></p>"},{"location":"api-reference/error-handling/#methoderror","title":"MethodError","text":"<p>CE method operation failures.</p> <p>Common Causes: - Method file not found - Method execution startup failure - Invalid method parameters</p> <p>Example: <pre><code>try:\n    api.method.run(\"Sample001\")\nexcept MethodError as e:\n    print(f\"Method failed: {e}\")\n    # Check instrument status and method parameters\n</code></pre></p>"},{"location":"api-reference/error-handling/#vialerror","title":"VialError","text":"<p>Vial handling failures.</p> <p>Common Causes: - Vial not present in carousel - Mechanical loading failure - Position out of range</p> <p>Example: <pre><code>try:\n    api.ce.load_vial_to_position(99, \"inlet\")\nexcept VialError as e:\n    print(f\"Vial error: {e}\")\n    # Check vial presence and position\n</code></pre></p>"},{"location":"api-reference/error-handling/#configurationerror","title":"ConfigurationError","text":"<p>System configuration failures.</p> <p>Common Causes: - Invalid configuration parameters - Directory creation failure - Missing required files</p> <p>Example: <pre><code>try:\n    config = CommunicationConfig(comm_dir=\"/invalid/path\")\n    api = ChemstationAPI(config)\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n    # Check paths and permissions\n</code></pre></p>"},{"location":"api-reference/error-handling/#validationerror","title":"ValidationError","text":"<p>Input validation failures.</p> <p>Common Causes: - File not found - Invalid parameter values - System not ready</p> <p>Example: <pre><code>try:\n    api.validation.validate_method_name(\"NonexistentMethod\")\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n    # Check file existence and naming\n</code></pre></p>"},{"location":"api-reference/error-handling/#timeouterror","title":"TimeoutError","text":"<p>Operation timeout failures.</p> <p>Common Causes: - ChemStation not responding - Long operations exceeding timeout - Communication delays</p> <p>Example: <pre><code>try:\n    response = api.send(\"LongCommand\", timeout=5.0)\nexcept TimeoutError as e:\n    print(f\"Timeout: {e}\")\n    # Increase timeout or check ChemStation status\n</code></pre></p>"},{"location":"api-reference/error-handling/#error-handling-strategies","title":"Error Handling Strategies","text":""},{"location":"api-reference/error-handling/#1-defensive-programming","title":"1. Defensive Programming","text":"<p>Always validate before operations:</p> <pre><code>def safe_vial_load(api, vial, position):\n    \"\"\"Load vial with validation.\"\"\"\n    try:\n        # Validate first\n        api.validation.validate_vial_in_system(vial)\n        api.validation.validate_use_carousel()\n\n        # Then execute\n        api.ce.load_vial_to_position(vial, position)\n        return True\n\n    except VialError as e:\n        print(f\"Vial {vial} not available: {e}\")\n        return False\n    except SystemError as e:\n        print(f\"System not ready: {e}\")\n        return False\n</code></pre>"},{"location":"api-reference/error-handling/#2-retry-logic","title":"2. Retry Logic","text":"<p>Implement retry for transient failures:</p> <pre><code>def retry_operation(func, max_attempts=3, delay=5):\n    \"\"\"Retry operation with exponential backoff.\"\"\"\n    for attempt in range(max_attempts):\n        try:\n            return func()\n        except (TimeoutError, CommunicationError) as e:\n            if attempt == max_attempts - 1:\n                raise\n            wait_time = delay * (2 ** attempt)\n            print(f\"Attempt {attempt + 1} failed, waiting {wait_time}s\")\n            time.sleep(wait_time)\n\n# Usage\nresult = retry_operation(lambda: api.send(\"response$ = _METHPATH$\"))\n</code></pre>"},{"location":"api-reference/error-handling/#3-context-managers","title":"3. Context Managers","text":"<p>Use context managers for cleanup:</p> <pre><code>class VialLoader:\n    \"\"\"Context manager for vial operations.\"\"\"\n\n    def __init__(self, api, vial, position):\n        self.api = api\n        self.vial = vial\n        self.position = position\n\n    def __enter__(self):\n        self.api.ce.load_vial_to_position(self.vial, self.position)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        # Always unload, even if error occurred\n        try:\n            self.api.ce.unload_vial_from_position(self.position)\n        except:\n            pass  # Best effort cleanup\n\n# Usage\nwith VialLoader(api, 15, \"inlet\") as loader:\n    # Vial operations\n    api.ce.flush_capillary(60)\n# Vial automatically unloaded\n</code></pre>"},{"location":"api-reference/error-handling/#4-error-recovery","title":"4. Error Recovery","text":"<p>Implement recovery procedures:</p> <pre><code>class AnalysisRunner:\n    \"\"\"Run analysis with error recovery.\"\"\"\n\n    def __init__(self, api):\n        self.api = api\n        self.recovery_actions = {\n            VialError: self.recover_from_vial_error,\n            MethodError: self.recover_from_method_error,\n            TimeoutError: self.recover_from_timeout\n        }\n\n    def run_analysis(self, vial, method, sample):\n        try:\n            self.api.method.execution_method_with_parameters(\n                vial=vial,\n                method_name=method,\n                sample_name=sample\n            )\n        except tuple(self.recovery_actions.keys()) as e:\n            # Try recovery\n            recovery_func = self.recovery_actions[type(e)]\n            if recovery_func(e):\n                # Retry after recovery\n                return self.run_analysis(vial, method, sample)\n            else:\n                raise\n\n    def recover_from_vial_error(self, error):\n        print(\"Attempting vial recovery...\")\n        # Check vial presence\n        # Try reloading\n        # Return True if recovered\n        return False\n\n    def recover_from_method_error(self, error):\n        print(\"Attempting method recovery...\")\n        self.api.system.abort_run()\n        time.sleep(30)\n        return True\n\n    def recover_from_timeout(self, error):\n        print(\"Attempting timeout recovery...\")\n        # Check system status\n        # Wait for ready\n        return self.api.system.wait_for_ready(60)\n</code></pre>"},{"location":"api-reference/error-handling/#5-logging-errors","title":"5. Logging Errors","text":"<p>Comprehensive error logging:</p> <pre><code>import logging\nfrom datetime import datetime\n\n# Configure logging\nlogging.basicConfig(\n    filename=f'sia_ce_{datetime.now().strftime(\"%Y%m%d\")}.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\ndef logged_operation(func):\n    \"\"\"Decorator for error logging.\"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            result = func(*args, **kwargs)\n            logging.info(f\"{func.__name__} completed successfully\")\n            return result\n        except Exception as e:\n            logging.error(f\"{func.__name__} failed: {type(e).__name__}: {e}\")\n            raise\n    return wrapper\n\n@logged_operation\ndef critical_analysis(api, vial, method):\n    api.method.execution_method_with_parameters(\n        vial=vial,\n        method_name=method,\n        sample_name=\"Critical_Sample\"\n    )\n</code></pre>"},{"location":"api-reference/error-handling/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"api-reference/error-handling/#scenario-1-chemstation-not-responding","title":"Scenario 1: ChemStation Not Responding","text":"<pre><code>def handle_chemstation_timeout():\n    try:\n        api = ChemstationAPI()\n    except (ConnectionError, TimeoutError):\n        print(\"ChemStation not responding\")\n        print(\"1. Check ChemStation is running\")\n        print(\"2. Execute macro command:\")\n        print('   macro \"path\\\\ChemPyConnect.mac\"; Python_Run')\n        print(\"3. Check communication files accessible\")\n        return None\n    return api\n</code></pre>"},{"location":"api-reference/error-handling/#scenario-2-batch-processing-with-failures","title":"Scenario 2: Batch Processing with Failures","text":"<pre><code>def robust_batch_processing(api, samples):\n    \"\"\"Process batch with failure tracking.\"\"\"\n    results = {\n        'success': [],\n        'failed': [],\n        'errors': []\n    }\n\n    for sample in samples:\n        try:\n            # Process sample\n            api.method.execution_method_with_parameters(**sample)\n            results['success'].append(sample['sample_name'])\n\n        except VialError as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Vial error: {e}\")\n\n        except MethodError as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Method error: {e}\")\n            # Try to recover for next sample\n            api.system.abort_run()\n            time.sleep(60)\n\n        except Exception as e:\n            results['failed'].append(sample['sample_name'])\n            results['errors'].append(f\"Unexpected: {e}\")\n\n    return results\n</code></pre>"},{"location":"api-reference/error-handling/#scenario-3-sia-volume-overflow","title":"Scenario 3: SIA Volume Overflow","text":"<pre><code>def safe_volume_operations(syringe, operations):\n    \"\"\"Execute volume operations with overflow protection.\"\"\"\n\n    for op_type, volume in operations:\n        try:\n            if op_type == 'aspirate':\n                # Check before aspirating\n                if syringe.volume_counter + volume &gt; syringe.syringe_size:\n                    # Dispense first\n                    syringe.dispense()\n                syringe.aspirate(volume)\n\n            elif op_type == 'dispense':\n                if volume &gt; syringe.volume_counter:\n                    raise ValueError(f\"Insufficient volume: {syringe.volume_counter} \u00b5L available\")\n                syringe.dispense(volume)\n\n        except ValueError as e:\n            print(f\"Volume error: {e}\")\n            # Handle based on operation requirements\n            raise\n</code></pre>"},{"location":"api-reference/error-handling/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Specific Exception Handling <pre><code># Good - Specific handling\ntry:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept VialError:\n    # Handle missing vial\nexcept SystemError:\n    # Handle busy system\n\n# Bad - Too broad\ntry:\n    api.ce.load_vial_to_position(15, \"inlet\")\nexcept Exception:\n    # Don't know what went wrong\n</code></pre></p> </li> <li> <p>Always Clean Up <pre><code>try:\n    # Operations\nfinally:\n    # Cleanup always executes\n    api.ce.unload_vial_from_position(\"inlet\")\n</code></pre></p> </li> <li> <p>Fail Fast <pre><code># Validate everything first\napi.validation.validate_vial_in_system(vial)\napi.validation.validate_method_name(method)\napi.validation.validate_use_carousel()\n\n# Then execute\n# ...\n</code></pre></p> </li> <li> <p>Informative Error Messages <pre><code>if not vial_present:\n    raise VialError(\n        f\"Vial {vial} not found in carousel. \"\n        f\"Check position {vial} is occupied.\"\n    )\n</code></pre></p> </li> <li> <p>Document Expected Exceptions <pre><code>def load_vial(vial: int, position: str) -&gt; None:\n    \"\"\"Load vial to position.\n\n    Raises:\n        VialError: If vial not present\n        SystemError: If carousel busy\n        ValueError: If invalid position\n    \"\"\"\n</code></pre></p> </li> </ol>"},{"location":"api-reference/sia/","title":"SIA API Reference","text":"<p>Complete API documentation for Sequential Injection Analysis control.</p>"},{"location":"api-reference/sia/#syringecontroller","title":"SyringeController","text":"<p>Syringe pump control for precise liquid handling.</p>"},{"location":"api-reference/sia/#constructor","title":"Constructor","text":"<pre><code>SyringeController(\n    port: str,\n    syringe_size: int,\n    address: str = \"/1\",\n    prefix: str = \"\",\n    baudrate: int = 9600,\n    print_info: bool = True\n)\n</code></pre> <p>Parameters: - <code>port</code>: COM port (e.g., \"COM3\") - <code>syringe_size</code>: Volume in microliters (100-5000) - <code>address</code>: Device address (default: \"/1\") - <code>prefix</code>: Command prefix for protocols - <code>baudrate</code>: Serial speed (default: 9600) - <code>print_info</code>: Display specifications on init</p> <p>Example: <pre><code>from SIA_API.devices import SyringeController\n\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\n</code></pre></p>"},{"location":"api-reference/sia/#attributes","title":"Attributes","text":"<ul> <li><code>syringe_size</code>: Syringe capacity in \u00b5L</li> <li><code>volume_counter</code>: Current volume in syringe</li> <li><code>VALVE_TYPES_DICT</code>: Supported valve configurations</li> </ul>"},{"location":"api-reference/sia/#methods","title":"Methods","text":""},{"location":"api-reference/sia/#initialize","title":"initialize()","text":"<p>Initialize syringe to home position.</p> <pre><code>syringe.initialize() -&gt; None\n</code></pre> <p>Effects: - Moves to absolute zero position - Resets volume counter to 0 - Uses Z/Z1/Z2 command based on size</p>"},{"location":"api-reference/sia/#aspirate","title":"aspirate()","text":"<p>Draw fluid into syringe.</p> <pre><code>syringe.aspirate(volume: Optional[float] = None, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>volume</code>: Volume in \u00b5L (None = fill completely) - <code>wait</code>: Block until complete</p> <p>Raises: - <code>ValueError</code>: If volume exceeds capacity</p> <p>Example: <pre><code>syringe.aspirate(500)    # Draw 500 \u00b5L\nsyringe.aspirate()       # Fill entire syringe\n</code></pre></p>"},{"location":"api-reference/sia/#dispense","title":"dispense()","text":"<p>Expel fluid from syringe.</p> <pre><code>syringe.dispense(volume: Optional[float] = None, wait: bool = True) -&gt; None\n</code></pre> <p>Parameters: - <code>volume</code>: Volume in \u00b5L (None = empty completely) - <code>wait</code>: Block until complete</p> <p>Raises: - <code>ValueError</code>: If volume exceeds current content</p>"},{"location":"api-reference/sia/#set_speed_ul_min","title":"set_speed_uL_min()","text":"<p>Set flow rate.</p> <pre><code>syringe.set_speed_uL_min(speed: float) -&gt; None\n</code></pre> <p>Parameters: - <code>speed</code>: Flow rate in \u00b5L/min</p> <p>Limits: - Minimum: 0.05 \u00d7 syringe_size - Maximum: 60 \u00d7 syringe_size</p>"},{"location":"api-reference/sia/#configuration_valve_type","title":"configuration_valve_type()","text":"<p>Configure attached valve type.</p> <pre><code>syringe.configuration_valve_type(valve_type: str) -&gt; None\n</code></pre> <p>Parameters: - <code>valve_type</code>: Type from VALVE_TYPES_DICT</p> <p>Options: - 'No', '3-Port', '4-Port', '6-Port distribution', etc.</p>"},{"location":"api-reference/sia/#valve-control","title":"Valve Control","text":"<pre><code>syringe.valve_in() -&gt; None    # Switch to input\nsyringe.valve_out() -&gt; None   # Switch to output  \nsyringe.valve_up() -&gt; None    # Switch to up/bypass\n</code></pre>"},{"location":"api-reference/sia/#utility-methods","title":"Utility Methods","text":"<pre><code>syringe.wait_for_syringe()           # Wait for operation\nsyringe.print_volume_in_syringe()    # Display current volume\n</code></pre>"},{"location":"api-reference/sia/#valveselector","title":"ValveSelector","text":"<p>Multi-position valve control for fluid routing.</p>"},{"location":"api-reference/sia/#constructor_1","title":"Constructor","text":"<pre><code>ValveSelector(\n    port: str,\n    num_positions: int = 8,\n    prefix: str = \"/Z\",\n    address: str = \"\",\n    baudrate: int = 9600\n)\n</code></pre> <p>Parameters: - <code>port</code>: COM port (e.g., \"COM4\") - <code>num_positions</code>: Number of valve positions - <code>prefix</code>: Command prefix (default: \"/Z\") - <code>address</code>: Device address (usually empty) - <code>baudrate</code>: Serial speed</p> <p>Example: <pre><code>from SIA_API.devices import ValveSelector\n\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n</code></pre></p>"},{"location":"api-reference/sia/#methods_1","title":"Methods","text":""},{"location":"api-reference/sia/#position","title":"position()","text":"<p>Move valve to position.</p> <pre><code>valve.position(position: int, num_attempts: int = 3) -&gt; None\n</code></pre> <p>Parameters: - <code>position</code>: Target position (1 to num_positions) - <code>num_attempts</code>: Retry attempts for reliability</p> <p>Raises: - <code>ValueError</code>: If position out of range</p>"},{"location":"api-reference/sia/#preparedsiamethods","title":"PreparedSIAMethods","text":"<p>High-level workflows for automated procedures.</p>"},{"location":"api-reference/sia/#constructor_2","title":"Constructor","text":"<pre><code>PreparedSIAMethods(\n    chemstation_controller,\n    syringe_device: SyringeController,\n    valve_device: ValveSelector,\n    ports_config: Optional[PortConfig] = None\n)\n</code></pre> <p>Parameters: - <code>chemstation_controller</code>: ChemStation API instance - <code>syringe_device</code>: Initialized syringe controller - <code>valve_device</code>: Initialized valve selector - <code>ports_config</code>: Port configuration (default if None)</p> <p>Example: <pre><code>from SIA_API.methods import PreparedSIAMethods\n\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\n</code></pre></p>"},{"location":"api-reference/sia/#system-methods","title":"System Methods","text":""},{"location":"api-reference/sia/#system_initialization_and_cleaning","title":"system_initialization_and_cleaning()","text":"<p>Complete system initialization.</p> <pre><code>workflow.system_initialization_and_cleaning(\n    waste_vial: int = 50,\n    bubble: int = 20,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>waste_vial</code>: Vial for waste collection - <code>bubble</code>: Separating bubble size (\u00b5L) - <code>**port_overrides</code>: Override default ports</p> <p>Process: 1. Syringe initialization 2. Loop flushing 3. Methanol cleaning 4. DI water rinse 5. Transfer line conditioning</p>"},{"location":"api-reference/sia/#continuous-flow-methods","title":"Continuous Flow Methods","text":""},{"location":"api-reference/sia/#prepare_continuous_flow","title":"prepare_continuous_flow()","text":"<p>Setup for continuous dispensing.</p> <pre><code>workflow.prepare_continuous_flow(\n    solvent_port: int,\n    waste_vial: int = 50,\n    bubble_volume: int = 10,\n    solvent_holding_coil_volume: int = 10,\n    transfer_coil_flush: int = 500,\n    holding_coil_flush: int = 1000,\n    speed: int = 1500,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>solvent_port</code>: Port with solvent - <code>waste_vial</code>: Waste collection vial - <code>bubble_volume</code>: Air bubble size - <code>solvent_holding_coil_volume</code>: Solvent at coil end - <code>transfer_coil_flush</code>: Transfer line flush volume - <code>holding_coil_flush</code>: Holding coil flush volume - <code>speed</code>: Flow rate (\u00b5L/min)</p>"},{"location":"api-reference/sia/#continuous_fill","title":"continuous_fill()","text":"<p>Execute continuous filling.</p> <pre><code>workflow.continuous_fill(\n    vial: int,\n    volume: int,\n    solvent_port: int,\n    flush_needle: Optional[int] = None,\n    wash_vial: int = 48,\n    speed: int = 2000,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Target vial (1-50) - <code>volume</code>: Dispensing volume (\u00b5L) - <code>solvent_port</code>: Solvent source port - <code>flush_needle</code>: Needle wash volume - <code>wash_vial</code>: Vial for washing - <code>speed</code>: Dispensing speed</p>"},{"location":"api-reference/sia/#batch-flow-methods","title":"Batch Flow Methods","text":""},{"location":"api-reference/sia/#prepare_batch_flow","title":"prepare_batch_flow()","text":"<p>Setup for batch dispensing.</p> <pre><code>workflow.prepare_batch_flow(\n    solvent_port: int,\n    waste_vial: int = 50,\n    bubble_volume: int = 10,\n    transfer_coil_volume: int = 300,\n    coil_flush: int = 150,\n    speed: int = 1500,\n    **port_overrides\n) -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#batch_fill","title":"batch_fill()","text":"<p>Execute batch filling.</p> <pre><code>workflow.batch_fill(\n    vial: int,\n    volume: int,\n    solvent_port: int,\n    transfer_line_volume: int = 300,\n    bubble_volume: int = 10,\n    flush_needle: Optional[int] = None,\n    speed: int = 2000,\n    unload: bool = True,\n    wait: Optional[int] = None,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Additional Parameters: - <code>transfer_line_volume</code>: Volume of transfer line - <code>unload</code>: Return vial after filling - <code>wait</code>: Wait time after dispensing (seconds)</p>"},{"location":"api-reference/sia/#sample-processing","title":"Sample Processing","text":""},{"location":"api-reference/sia/#homogenize_sample","title":"homogenize_sample()","text":"<p>Mix sample using pneumatic agitation.</p> <pre><code>workflow.homogenize_sample(\n    vial: int,\n    speed: int,\n    homogenization_time: float,\n    flush_needle: Optional[int] = None,\n    unload: bool = True,\n    air_speed: int = 5000,\n    **port_overrides\n) -&gt; None\n</code></pre> <p>Parameters: - <code>vial</code>: Target vial - <code>speed</code>: Bubbling speed (\u00b5L/min) - <code>homogenization_time</code>: Duration (seconds) - <code>flush_needle</code>: Needle wash volume - <code>unload</code>: Return vial when done - <code>air_speed</code>: Air aspiration speed</p>"},{"location":"api-reference/sia/#clean_needle","title":"clean_needle()","text":"<p>Clean dispensing needle.</p> <pre><code>workflow.clean_needle(\n    volume_flush: float,\n    wash_vial: int = 48\n) -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#utility-methods_1","title":"Utility Methods","text":"<pre><code>workflow.load_to_replenishment(vial_number: int) -&gt; None\nworkflow.unload_from_replenishment() -&gt; None\n</code></pre>"},{"location":"api-reference/sia/#configuration","title":"Configuration","text":""},{"location":"api-reference/sia/#portconfig","title":"PortConfig","text":"<p>Port assignment configuration.</p> <pre><code>from SIA_API.methods import PortConfig\n\n@dataclass\nclass PortConfig:\n    waste_port: int = 1\n    air_port: int = 2  \n    di_port: int = 3\n    transfer_port: int = 4\n    meoh_port: int = 5\n</code></pre>"},{"location":"api-reference/sia/#create_custom_config","title":"create_custom_config()","text":"<p>Create custom port configuration.</p> <pre><code>from SIA_API.methods import create_custom_config\n\nconfig = create_custom_config(\n    waste_port=8,\n    air_port=1,\n    di_port=2,\n    transfer_port=3,\n    meoh_port=4\n)\n</code></pre>"},{"location":"api-reference/sia/#commandsender","title":"CommandSender","text":"<p>Base class for serial communication.</p>"},{"location":"api-reference/sia/#constructor_3","title":"Constructor","text":"<pre><code>CommandSender(\n    port: str,\n    prefix: str = \"\",\n    address: str = \"\",\n    baudrate: int = 9600\n)\n</code></pre>"},{"location":"api-reference/sia/#methods_2","title":"Methods","text":""},{"location":"api-reference/sia/#send_command","title":"send_command()","text":"<p>Send command with optional response.</p> <pre><code>send_command(\n    command: str,\n    wait_for_completion: callable = None,\n    get_response: bool = False,\n    response_timeout: float = 3\n) -&gt; Optional[str]\n</code></pre> <p>Parameters: - <code>command</code>: Command string - <code>wait_for_completion</code>: Function to call while waiting - <code>get_response</code>: Capture device response - <code>response_timeout</code>: Response wait time</p>"},{"location":"api-reference/sia/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api-reference/sia/#basic-liquid-transfer","title":"Basic Liquid Transfer","text":"<pre><code># Simple transfer\ndef transfer(source, dest, volume):\n    valve.position(source)\n    syringe.aspirate(volume)\n    valve.position(dest)\n    syringe.dispense(volume)\n\ntransfer(3, 6, 500)  # 500 \u00b5L from port 3 to 6\n</code></pre>"},{"location":"api-reference/sia/#dilution-series","title":"Dilution Series","text":"<pre><code># Create 1:2 dilution series\ndef dilution_series(stock_port, vials, diluent_port=3):\n    for i, vial in enumerate(vials):\n        # Add diluent\n        workflow.batch_fill(\n            vial=vial,\n            volume=500,\n            solvent_port=diluent_port\n        )\n\n        # Add stock (manual or automated)\n        if i == 0:\n            # First vial - add from stock\n            stock_volume = 500\n        else:\n            # Serial dilution from previous\n            stock_volume = 500\n            # Transfer from vials[i-1]\n</code></pre>"},{"location":"api-reference/sia/#multi-solvent-preparation","title":"Multi-Solvent Preparation","text":"<pre><code># Different solvents for different samples\npreparations = [\n    (10, 3, 1000),  # Vial 10: 1000 \u00b5L water\n    (11, 5, 750),   # Vial 11: 750 \u00b5L methanol\n    (12, 6, 500),   # Vial 12: 500 \u00b5L buffer\n]\n\nfor vial, port, volume in preparations:\n    workflow.prepare_batch_flow(solvent_port=port)\n    workflow.batch_fill(vial=vial, volume=volume, solvent_port=port)\n</code></pre>"},{"location":"api-reference/sia/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    syringe.aspirate(1500)  # Too much!\nexcept ValueError as e:\n    print(f\"Volume error: {e}\")\n    # Handle overflow\n\ntry:\n    valve.position(15)  # Invalid position\nexcept ValueError as e:\n    print(f\"Position error: {e}\")\n</code></pre>"},{"location":"api-reference/sia/#system-state-management","title":"System State Management","text":"<pre><code>class SIASystem:\n    def __init__(self):\n        self.syringe = SyringeController(\"COM3\", 1000)\n        self.valve = ValveSelector(\"COM4\", 8)\n        self.current_solvent = None\n\n    def switch_solvent(self, new_solvent_port):\n        if self.current_solvent != new_solvent_port:\n            # Flush system\n            self.flush_line()\n            self.current_solvent = new_solvent_port\n</code></pre>"},{"location":"api-reference/sia/#performance-tips","title":"Performance Tips","text":"<ol> <li>Speed Optimization</li> <li>Air: 5000 \u00b5L/min</li> <li>Water: 3500 \u00b5L/min</li> <li>Organic: 2500 \u00b5L/min</li> <li> <p>Viscous: 1000 \u00b5L/min</p> </li> <li> <p>Volume Efficiency</p> </li> <li>Minimize dead volumes</li> <li>Use air gaps for separation</li> <li> <p>Plan aspiration order</p> </li> <li> <p>Error Prevention</p> </li> <li>Always initialize first</li> <li>Track volume state</li> <li> <p>Validate before operations</p> </li> <li> <p>Maintenance</p> </li> <li>Regular system flush</li> <li>Clean after viscous samples</li> <li>Check for air bubbles</li> </ol>"},{"location":"appendix/faq/","title":"Frequently Asked Questions","text":"<p>Common questions and solutions for SI-CE integration workflows.</p>"},{"location":"appendix/faq/#overview","title":"Overview","text":""},{"location":"appendix/faq/#what-is-si-ce","title":"What is SI-CE?","text":"<p>SI-CE is a comprehensive Python package that seamlessly integrates Sequential Injection (SI) with Capillary Electrophoresis (CE) through Agilent ChemStation. This powerful combination enables complete laboratory automation including:</p> <ul> <li>Automated sample preparation - Streamlined sample handling and preparation workflows</li> <li>CE instrument control - Direct communication with ChemStation for method execution</li> <li>Batch analysis workflows - Process multiple samples with minimal manual intervention  </li> <li>Complete analytical automation - End-to-end automation from sample prep to data analysis</li> </ul>"},{"location":"appendix/faq/#hardware-compatibility","title":"Hardware Compatibility","text":"<p>Supported ChemStation Systems: - Agilent 7100 Capillary Electrophoresis System - All ChemStation-compatible CE instruments - Future support planned for additional Agilent platforms</p> <p>SIA Components: - VICI/Valco valve selectors and switching systems - Compatible third-party devices with similar command protocols - Additional components can be integrated and will be supported in future releases</p>"},{"location":"appendix/faq/#programming-requirements","title":"Programming Requirements","text":"<p>While basic Python knowledge is helpful, extensive programming experience is not required. The package is designed for accessibility:</p> <ul> <li>High-level workflow methods - Simple functions for complex operations</li> <li>Pre-built analytical procedures - Ready-to-use templates for common analyses</li> <li>Copy-paste examples - Working code snippets you can adapt immediately</li> <li>Comprehensive documentation - Detailed guides and tutorials</li> </ul> <p>AI-Assisted Development: You can leverage generative AI tools (ChatGPT, Claude, etc.) by providing them with the repository link. These tools can help you program custom methods tailored to your specific needs. However, always thoroughly test any AI-generated code before implementation in production workflows.</p>"},{"location":"appendix/faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"appendix/faq/#chemstation-connection-issues","title":"ChemStation Connection Issues","text":"<p>Q: ChemStation connection fails on startup</p> <p>A: Follow this troubleshooting sequence:</p> <ol> <li> <p>Verify ChemStation Status <pre><code>ChemStation must be running and fully loaded before attempting connection\n</code></pre></p> </li> <li> <p>Load the Required Macro <pre><code>In ChemStation command line, execute:\nmacro \"C:\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p> </li> <li> <p>Check Communication Files</p> </li> <li>Ensure the communication directory exists</li> <li>Verify file permissions allow read/write access</li> </ol>"},{"location":"appendix/faq/#com-port-access-problems","title":"COM Port Access Problems","text":"<p>Q: Getting \"COM port access denied\" errors</p> <p>A: Systematic troubleshooting approach:</p> <ol> <li>Close Conflicting Applications</li> <li>HyperTerminal or other serial terminal programs</li> <li>Device manufacturer configuration software</li> <li> <p>Other Python scripts using serial ports</p> </li> <li> <p>Verify Port Availability <pre><code>import serial.tools.list_ports\n\nprint(\"Available COM ports:\")\nfor port in serial.tools.list_ports.comports():\n    print(f\"  {port.device}: {port.description}\")\n</code></pre></p> </li> <li> <p>Check Windows Device Manager</p> </li> <li>Ensure drivers are properly installed</li> <li>Look for yellow warning icons on COM ports</li> </ol>"},{"location":"appendix/faq/#communication-and-control","title":"Communication and Control","text":""},{"location":"appendix/faq/#monitoring-chemstation-communication","title":"Monitoring ChemStation Communication","text":"<p>Q: How can I monitor what commands are being sent to ChemStation?</p> <p>A: Enable verbose logging for detailed monitoring:</p> <pre><code># Enable detailed logging to see all commands and responses\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# Alternative: Monitor communication files directly (PowerShell)\nGet-Content \"communication_files\\command\" -Wait\n</code></pre>"},{"location":"appendix/faq/#custom-chemstation-commands","title":"Custom ChemStation Commands","text":"<p>Q: Can I send custom commands directly to ChemStation?</p> <p>A: Yes, use the send() method for any valid ChemStation command:</p> <pre><code># Read current oven temperature\nresponse = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Temperature_actual\"))')\nprint(f\"Current oven temperature: {response}\u00b0C\")\n\n# Get method path\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Active method: {method_path}\")\n</code></pre>"},{"location":"appendix/faq/#capillary-electrophoresis-operations","title":"Capillary Electrophoresis Operations","text":""},{"location":"appendix/faq/#vial-loading-issues","title":"Vial Loading Issues","text":"<p>Q: Unable to load vials into the carousel</p> <p>A: Vial loading failures typically occur for two main reasons:</p> <p>System State Issues: The CE system may not be in a state that allows carousel operation. Vial loading is blocked when the system is in certain states to prevent operational conflicts: - IDLE state: Normal operation - carousel accessible - RUN state: Analysis in progress - carousel may be locked - Other states: Carousel typically locked for safety</p> <p>Solution: Implement state checking in your workflows: <pre><code># Wait for appropriate system state before vial operations\nwhile not api.is_carousel_available():\n    time.sleep(5)  # Wait for system to reach appropriate state\n\n# Then proceed with vial loading\ncarousel.load_vial(position=1)\n</code></pre></p> <p>Missing Vial Validation: The system cannot locate the specified vial in the carousel.</p> <p>Solution: Implement vial validation at workflow start: <pre><code># Validate all required vials are present before starting\nrequired_positions = [1, 2, 3, 5, 8]\nmissing_vials = carousel.validate_vials(required_positions)\nif missing_vials:\n    raise ValueError(f\"Missing vials at positions: {missing_vials}\")\n</code></pre></p>"},{"location":"appendix/faq/#method-configuration","title":"Method Configuration","text":""},{"location":"appendix/faq/#modifying-method-parameters","title":"Modifying Method Parameters","text":"<p>Q: Can I modify method parameters like temperature, voltage, etc. programmatically?</p> <p>A: Yes, method parameters can be modified using ChemStation registry commands:</p> <p>Method parameters are stored in RC{module}Method[1] registers and can be modified directly:</p> <pre><code># Example: Modify separation voltage\napi.send('RCCEMethod[1].Separation.Voltage = 25000')\n\n# Example: Change capillary temperature  \napi.send('RCCEMethod[1].Separation.Temperature = 25')\n\n# Example: Modify injection time\napi.send('RCCEMethod[1].Injection.Time = 5')\n</code></pre> <p>Additional Resources: - See tutorial/chemstation_scripting section on Registry RCNET for comprehensive parameter lists - Reference implementation: HPLC Method Optimization GUI</p>"},{"location":"appendix/faq/#sequential-injection-operations","title":"Sequential Injection Operations","text":""},{"location":"appendix/faq/#syringe-volume-management","title":"Syringe Volume Management","text":"<p>Q: Getting syringe volume tracking errors</p> <p>A: The API automatically tracks syringe volume, but errors can occur:</p> <pre><code># Check current syringe contents\nsyringe.print_volume_in_syringe()\n\n# Reset volume tracking if needed\nsyringe.dispense()  # Empty syringe completely\nsyringe.volume_counter = 0  # Reset internal counter\n\n# Or perform complete reinitialization\nsyringe.initialize()\n</code></pre> <p>Best Practices: - Always initialize the syringe at workflow start - Use <code>syringe.check_volume()</code> before critical operations - Implement volume validation in loops</p>"},{"location":"appendix/faq/#workflow-design","title":"Workflow Design","text":""},{"location":"appendix/faq/#flow-strategy-selection","title":"Flow Strategy Selection","text":"<p>Q: When should I use continuous flow vs. batch flow?</p> <p>A: Choose based on your specific requirements:</p> <p>Continuous Flow - Recommended when: - Processing multiple vials with the same solvent system - Speed and throughput are priorities - Contamination risk between samples is minimal - Running routine analyses with established methods</p> <p>Batch Flow - Recommended when: - Using different solvents or buffer systems per vial - Processing single vials or small sample sets - Maximum contamination prevention is required - Method development or troubleshooting workflows</p> <pre><code># Continuous flow example\nworkflow = ContinuousFlow(\n    samples=['sample1', 'sample2', 'sample3'],\n    solvent='buffer_A',\n    method='routine_analysis'\n)\n\n# Batch flow example  \nworkflow = BatchFlow(\n    samples=[\n        {'name': 'sample1', 'solvent': 'buffer_A'},\n        {'name': 'sample2', 'solvent': 'buffer_B'},\n    ]\n)\n</code></pre>"},{"location":"appendix/faq/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"appendix/faq/#systematic-diagnosis-approach","title":"Systematic Diagnosis Approach","text":"<p>When encountering issues, follow this diagnostic sequence:</p> <p>1. Verify Physical Connections - Confirm power status on all devices - Check cable connections and COM port assignments - Test basic communication with each component</p> <p>2. Validate Software Prerequisites - ChemStation running and responsive - Required macros loaded and active - All specified vials present in carousel - Target methods exist and are accessible</p> <p>3. Analyze Error Messages - Note specific exception types and error codes - Look for recurring error patterns - Enable verbose mode for detailed diagnostics</p> <p>4. Component-Level Testing <pre><code># Test individual components in isolation\ntry:\n    syringe.initialize()\n    print(\"\u2713 Syringe communication OK\")\nexcept Exception as e:\n    print(f\"\u2717 Syringe error: {e}\")\n\ntry:\n    valve.position(1)\n    print(\"\u2713 Valve communication OK\")\nexcept Exception as e:\n    print(f\"\u2717 Valve error: {e}\")\n\ntry:\n    response = api.send(\"response$ = _METHPATH$\")\n    print(f\"\u2713 ChemStation communication OK: {response}\")\nexcept Exception as e:\n    print(f\"\u2717 ChemStation error: {e}\")\n</code></pre></p>"},{"location":"appendix/faq/#common-issues-quick-reference","title":"Common Issues Quick Reference","text":"<p>Most frequent problems and solutions:</p> <ol> <li>ChemStation macro not running \u2192 Reload macro in ChemStation command line</li> <li>Incorrect COM port configuration \u2192 Use device manager to verify port assignments  </li> <li>Missing vials or methods \u2192 Implement validation checks at workflow start</li> <li>Timeout settings too short \u2192 Increase timeout values for complex operations</li> <li>Volume tracking errors \u2192 Reset syringe and reinitialize volume counter</li> </ol>"},{"location":"appendix/faq/#getting-support","title":"Getting Support","text":""},{"location":"appendix/faq/#available-resources","title":"Available Resources","text":"<ul> <li>GitHub Issues: Report bugs, request features, and track development</li> <li>Documentation: Comprehensive guides covering all package functionality</li> <li>Tutorial Examples: Working code examples for common workflows</li> <li>Community Forums: Connect with other users and developers</li> </ul>"},{"location":"appendix/faq/#reporting-issues-effectively","title":"Reporting Issues Effectively","text":"<p>When requesting support, please include:</p> <ul> <li>Environment Details: Python version, package version, operating system</li> <li>Hardware Configuration: CE model, SIA components, COM port assignments  </li> <li>Error Information: Complete error messages and stack traces</li> <li>Minimal Example: Simplified code that reproduces the issue</li> <li>Context: What you were trying to accomplish and what happened instead</li> </ul> <p>Quick Resolution Tips</p> <p>90% of issues stem from these common causes:</p> <ol> <li>ChemStation macro not properly loaded or running</li> <li>COM port conflicts or incorrect assignments </li> <li>Missing physical components (vials, methods)</li> <li>Insufficient timeout values for complex operations</li> </ol> <p>Always check these fundamentals first before diving into complex troubleshooting!</p>"},{"location":"appendix/hardware-setup/","title":"Hardware Setup Guide","text":"<p>Complete guide for setting up and configuring SIA-CE hardware components.</p>"},{"location":"appendix/hardware-setup/#system-requirements","title":"System Requirements","text":""},{"location":"appendix/hardware-setup/#computer-requirements","title":"Computer Requirements","text":"<p>Minimum: - Windows 7 SP1 (64-bit) - 4 GB RAM - 2.0 GHz processor - 10 GB free disk space - 2 available USB/Serial ports</p> <p>Recommended: - Windows 10/11 (64-bit) - 8 GB RAM or more - 3.0 GHz multi-core processor - 50 GB free disk space - Dedicated USB ports (not hub)</p>"},{"location":"appendix/hardware-setup/#software-requirements","title":"Software Requirements","text":"<ul> <li>Agilent ChemStation (version B.04.03 or higher)</li> <li>Python 3.7+ (64-bit recommended)</li> <li>Required Python packages (see installation guide)</li> </ul>"},{"location":"appendix/hardware-setup/#ce-system-setup","title":"CE System Setup","text":""},{"location":"appendix/hardware-setup/#agilent-7100-ce-system","title":"Agilent 7100 CE System","text":""},{"location":"appendix/hardware-setup/#initial-setup","title":"Initial Setup","text":"<ol> <li>Power Connection</li> <li>Connect to appropriate voltage (100-240V)</li> <li>Use surge protector</li> <li> <p>Ensure proper grounding</p> </li> <li> <p>Communication</p> </li> <li>Connect USB cable to PC</li> <li>Install ChemStation drivers</li> <li> <p>Configure in ChemStation</p> </li> <li> <p>Capillary Installation</p> </li> <li>Use proper capillary cutting tool</li> <li>Check window alignment</li> <li>Verify detection path</li> </ol>"},{"location":"appendix/hardware-setup/#configuration-in-chemstation","title":"Configuration in ChemStation","text":"<pre><code>1. Open ChemStation\n2. Go to Instrument \u2192 Configure\n3. Select CE instrument\n4. Set communication parameters:\n   - Connection: USB\n   - Timeout: 30 seconds\n5. Test connection\n</code></pre>"},{"location":"appendix/hardware-setup/#carousel-setup","title":"Carousel Setup","text":"<p>Vial Positions: - Positions 1-48: Sample vials - Position 49: Replenishment parking - Position 50: Often used for waste</p> <p>Vial Types: - 100 \u00b5L microvials (recommended for small volumes) - 1 mL polypropylene vials - 2 mL glass vials</p> <p>Best Practices: - Use same vial type throughout analysis - Check vial seating in carousel - Replace damaged carousel positions</p>"},{"location":"appendix/hardware-setup/#sia-system-setup","title":"SIA System Setup","text":""},{"location":"appendix/hardware-setup/#syringe-pump-installation","title":"Syringe Pump Installation","text":""},{"location":"appendix/hardware-setup/#hamilton-mvp-series","title":"Hamilton MVP Series","text":"<ol> <li> <p>Physical Setup <pre><code>- Mount on stable surface\n- Level the pump\n- Install syringe (finger-tight only)\n- Connect valve assembly\n</code></pre></p> </li> <li> <p>Electrical Connection <pre><code>- Connect power supply (12-24V DC)\n- Connect RS-232 cable to PC\n- Set DIP switches if required\n</code></pre></p> </li> <li> <p>Communication Settings <pre><code>Port: COM3 (typical)\nBaud: 9600\nData bits: 8\nStop bits: 1\nParity: None\nFlow control: None\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#syringe-selection","title":"Syringe Selection","text":"Volume Range Syringe Size Resolution Best For 10-100 \u00b5L 100 \u00b5L 0.03 \u00b5L Precise small volumes 50-500 \u00b5L 500 \u00b5L 0.17 \u00b5L General use 100-1000 \u00b5L 1000 \u00b5L 0.33 \u00b5L Standard operations 500-5000 \u00b5L 5000 \u00b5L 1.67 \u00b5L Large volume prep"},{"location":"appendix/hardware-setup/#valve-selector-installation","title":"Valve Selector Installation","text":""},{"location":"appendix/hardware-setup/#vicivalco-setup","title":"VICI/Valco Setup","text":"<ol> <li> <p>Mounting <pre><code>- Secure to stable platform\n- Align ports horizontally\n- Minimize tubing lengths\n</code></pre></p> </li> <li> <p>Port Connections <pre><code>Port 1: Waste\nPort 2: Air/Gas\nPort 3: DI Water\nPort 4: Transfer to CE\nPort 5-8: Reagents/Solvents\n</code></pre></p> </li> <li> <p>Communication <pre><code>Port: COM4 (typical)\nBaud: 9600\nProtocol: VICI standard\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#tubing-and-connections","title":"Tubing and Connections","text":""},{"location":"appendix/hardware-setup/#tubing-selection","title":"Tubing Selection","text":"Application ID (mm) Material Length Syringe-Valve 0.8 PTFE &lt; 10 cm Valve-Ports 0.5 PEEK &lt; 30 cm To CE 0.25 Fused Silica &lt; 50 cm Waste 1.6 PTFE As needed"},{"location":"appendix/hardware-setup/#connection-best-practices","title":"Connection Best Practices","text":"<ol> <li>Cutting Tubing</li> <li>Use sharp blade</li> <li>Cut perpendicular</li> <li> <p>No burrs or deformation</p> </li> <li> <p>Fittings</p> </li> <li>Finger-tight + 1/4 turn</li> <li>Use appropriate ferrules</li> <li> <p>Check for leaks</p> </li> <li> <p>Dead Volume</p> </li> <li>Minimize connection volume</li> <li>Use zero-dead-volume fittings</li> <li>Flush after installation</li> </ol>"},{"location":"appendix/hardware-setup/#system-integration","title":"System Integration","text":""},{"location":"appendix/hardware-setup/#physical-layout","title":"Physical Layout","text":"<pre><code>Recommended Setup:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CE System \u2502     \u2502 Computer \u2502\n\u2502             \u2502\u2500\u2500\u2500\u2500&gt;\u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       ^                  ^\n       \u2502                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n\u2502   Syringe  \u2502\u2500\u2500\u2500\u2500&gt;\u2502  Valve   \u2502\n\u2502    Pump    \u2502     \u2502 Selector \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"appendix/hardware-setup/#communication-architecture","title":"Communication Architecture","text":"<ol> <li> <p>Serial Ports <pre><code># Find available ports\nimport serial.tools.list_ports\n\nports = serial.tools.list_ports.comports()\nfor port in ports:\n    print(f\"{port.device}: {port.description}\")\n</code></pre></p> </li> <li> <p>Port Assignment</p> </li> <li>Use Device Manager to identify</li> <li>Assign consistent port numbers</li> <li>Document port mapping</li> </ol>"},{"location":"appendix/hardware-setup/#power-management","title":"Power Management","text":"<ol> <li> <p>Power Sequence <pre><code>1. Computer\n2. CE System\n3. Syringe Pump\n4. Valve Selector\n</code></pre></p> </li> <li> <p>UPS Recommendations</p> </li> <li>Minimum 1000 VA</li> <li>Include all components</li> <li>Test monthly</li> </ol>"},{"location":"appendix/hardware-setup/#calibration-and-testing","title":"Calibration and Testing","text":""},{"location":"appendix/hardware-setup/#syringe-pump-calibration","title":"Syringe Pump Calibration","text":"<pre><code>def calibrate_syringe_volume():\n    \"\"\"Calibrate syringe volume delivery.\"\"\"\n\n    # Initialize\n    syringe.initialize()\n\n    # Test volumes\n    test_volumes = [100, 500, 900]\n\n    for volume in test_volumes:\n        # Dispense into tared vial\n        syringe.aspirate(volume)\n        input(f\"Place tared vial at output. Press Enter...\")\n        syringe.dispense(volume)\n\n        actual = float(input(\"Enter measured volume (\u00b5L): \"))\n        error = (actual - volume) / volume * 100\n        print(f\"Volume: {volume} \u00b5L, Error: {error:.2f}%\")\n</code></pre>"},{"location":"appendix/hardware-setup/#valve-position-verification","title":"Valve Position Verification","text":"<pre><code>def verify_valve_positions():\n    \"\"\"Verify each valve position.\"\"\"\n\n    num_positions = 8\n\n    for pos in range(1, num_positions + 1):\n        valve.position(pos)\n        input(f\"Verify position {pos}. Press Enter...\")\n\n    print(\"Valve verification complete\")\n</code></pre>"},{"location":"appendix/hardware-setup/#ce-system-tests","title":"CE System Tests","text":"<ol> <li> <p>Pressure Test <pre><code># Test pressure system\napi.ce.apply_pressure_to_capillary(50, 10)  # 50 mbar, 10 sec\napi.ce.apply_pressure_to_capillary(-50, 10)  # -50 mbar, 10 sec\n</code></pre></p> </li> <li> <p>Carousel Test <pre><code># Test all positions\nfor pos in range(1, 49):\n    try:\n        api.ce.load_vial_to_position(pos, \"inlet\")\n        api.ce.unload_vial_from_position(\"inlet\")\n        print(f\"Position {pos}: OK\")\n    except:\n        print(f\"Position {pos}: FAIL\")\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#maintenance-schedule","title":"Maintenance Schedule","text":""},{"location":"appendix/hardware-setup/#daily","title":"Daily","text":"<ul> <li>Check for leaks</li> <li>Verify communication</li> <li>Clean needle/transfer line</li> </ul>"},{"location":"appendix/hardware-setup/#weekly","title":"Weekly","text":"<ul> <li>Flush all lines</li> <li>Check capillary condition</li> <li>Calibrate if needed</li> </ul>"},{"location":"appendix/hardware-setup/#monthly","title":"Monthly","text":"<ul> <li>Deep clean system</li> <li>Replace worn tubing</li> <li>Check electrical connections</li> </ul>"},{"location":"appendix/hardware-setup/#annually","title":"Annually","text":"<ul> <li>Service syringe pump</li> <li>Replace seals</li> <li>Full system validation</li> </ul>"},{"location":"appendix/hardware-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"appendix/hardware-setup/#communication-issues","title":"Communication Issues","text":"<p>Problem: COM port not found <pre><code>Solution:\n1. Check Device Manager\n2. Reinstall drivers\n3. Try different USB port\n4. Use USB-Serial adapter if needed\n</code></pre></p> <p>Problem: Device not responding <pre><code># Test communication\ntry:\n    syringe.send_command(\"?\", get_response=True)\n    print(\"Syringe communication OK\")\nexcept:\n    print(\"Check connections and power\")\n</code></pre></p>"},{"location":"appendix/hardware-setup/#mechanical-issues","title":"Mechanical Issues","text":"<p>Problem: Syringe stalling <pre><code>Causes:\n- Overpressure\n- Mechanical binding\n- Wrong syringe size configured\n\nSolutions:\n- Check for blockages\n- Reduce speed\n- Verify syringe size setting\n</code></pre></p> <p>Problem: Valve not switching <pre><code>Causes:\n- Mechanical obstruction\n- Communication error\n- Power issue\n\nSolutions:\n- Manual rotation check\n- Increase switching attempts\n- Check power supply\n</code></pre></p>"},{"location":"appendix/hardware-setup/#system-integration-issues","title":"System Integration Issues","text":"<p>Problem: Timing conflicts <pre><code># Add delays between operations\ndef safe_operation_sequence():\n    valve.position(1)\n    time.sleep(0.5)  # Allow valve to settle\n    syringe.aspirate(500)\n    time.sleep(0.2)  # Allow pressure to stabilize\n</code></pre></p>"},{"location":"appendix/hardware-setup/#optimization-tips","title":"Optimization Tips","text":""},{"location":"appendix/hardware-setup/#speed-optimization","title":"Speed Optimization","text":"<ol> <li>Parallel Operations</li> <li>Prepare next sample during CE run</li> <li>Use continuous flow for same solvent</li> <li> <p>Minimize valve switches</p> </li> <li> <p>Flow Rates <pre><code># Optimized speeds\nSPEEDS = {\n    'air': 5000,        # Fast\n    'water': 3500,      # Medium-fast\n    'organic': 2500,    # Medium\n    'viscous': 1000,    # Slow\n    'critical': 500     # Very slow\n}\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#volume-optimization","title":"Volume Optimization","text":"<ol> <li>Minimize Dead Volume</li> <li>Short tubing runs</li> <li>Small ID tubing where possible</li> <li> <p>Zero-dead-volume fittings</p> </li> <li> <p>Efficient Aspiration <pre><code># Aspirate in order of reactivity\n# 1. Buffer/diluent (least reactive)\n# 2. Sample (most reactive)\n# 3. Air gap (separation)\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#reliability-enhancement","title":"Reliability Enhancement","text":"<ol> <li> <p>Error Recovery <pre><code># Implement retry logic\ndef reliable_operation(func, retries=3):\n    for attempt in range(retries):\n        try:\n            return func()\n        except:\n            if attempt == retries - 1:\n                raise\n            time.sleep(1)\n</code></pre></p> </li> <li> <p>State Monitoring <pre><code># Track system state\nclass SystemMonitor:\n    def __init__(self):\n        self.syringe_volume = 0\n        self.valve_position = 1\n        self.last_operation = None\n</code></pre></p> </li> </ol>"},{"location":"appendix/hardware-setup/#safety-considerations","title":"Safety Considerations","text":""},{"location":"appendix/hardware-setup/#chemical-safety","title":"Chemical Safety","text":"<ul> <li>Use fume hood for volatile solvents</li> <li>Proper waste disposal</li> <li>Material compatibility checks</li> </ul>"},{"location":"appendix/hardware-setup/#electrical-safety","title":"Electrical Safety","text":"<ul> <li>Proper grounding</li> <li>No liquid near electronics</li> <li>Emergency stop procedures</li> </ul>"},{"location":"appendix/hardware-setup/#pressure-safety","title":"Pressure Safety","text":"<ul> <li>Maximum 100 mbar for injection</li> <li>Maximum 950 mbar for flushing</li> <li>Pressure relief mechanisms</li> </ul>"},{"location":"appendix/hardware-setup/#validation-protocols","title":"Validation Protocols","text":""},{"location":"appendix/hardware-setup/#iqoqpq","title":"IQ/OQ/PQ","text":"<ol> <li>Installation Qualification (IQ)</li> <li>Document all connections</li> <li>Verify communication</li> <li> <p>Check safety features</p> </li> <li> <p>Operational Qualification (OQ)</p> </li> <li>Test all functions</li> <li>Verify accuracy</li> <li> <p>Document performance</p> </li> <li> <p>Performance Qualification (PQ)</p> </li> <li>Run test methods</li> <li>Verify reproducibility</li> <li>Meet specifications</li> </ol> <p>Setup Complete</p> <p>With proper hardware setup, your SIA-CE system is ready for automated analysis!</p>"},{"location":"appendix/requirements/","title":"Documentation dependencies for MkDocs","text":"<p>mkdocs&gt;=1.5.0 mkdocs-material&gt;=9.0.0 mkdocs-material-extensions&gt;=1.3 mkdocstrings&gt;=0.24.0 mkdocstrings-python&gt;=1.7.0 pymdown-extensions&gt;=10.0 mkdocs-mermaid2-plugin&gt;=1.1.0</p>"},{"location":"appendix/requirements/#for-api-documentation-generation","title":"For API documentation generation","text":"<p>griffe&gt;=0.38.0</p>"},{"location":"appendix/requirements/#for-better-search","title":"For better search","text":"<p>mkdocs-search&gt;=1.0.0</p>"},{"location":"appendix/requirements/#optional-but-recommended","title":"Optional but recommended","text":"<p>mkdocs-git-revision-date-localized-plugin&gt;=1.2.0 mkdocs-minify-plugin&gt;=0.7.0</p>"},{"location":"chemstation-api/basic-operations/","title":"Basic ChemStation Operations","text":"<p>This guide covers the most common operations for chemstation, konkr\u00e9tn\u011b pro CE</p>"},{"location":"chemstation-api/basic-operations/#initializing-the-api","title":"Initializing the API","text":"<pre><code>from ChemstationAPI import ChemstationAPI\n\n# Basic initialization\napi = ChemstationAPI()\n\nrozd\u011blit na 2 okna\n# With custom configuration\nfrom ChemstationAPI.core.communication_config import CommunicationConfig\n\nconfig = CommunicationConfig(verbose=True, test_on_init=False)\napi = ChemstationAPI(config)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#vial-management","title":"Vial Management","text":""},{"location":"chemstation-api/basic-operations/#understanding-vial-positions","title":"Understanding Vial Positions","text":"<p>The CE system has several vial locations:</p> <ul> <li>Carousel: 48 positions for samples (1-48) + special positions</li> <li>Inlet: Sample injection position (positive electrode)</li> <li>Outlet: Waste collection position (negative electrode)</li> <li>Replenishment: Buffer replenishment position</li> </ul>"},{"location":"chemstation-api/basic-operations/#loading-and-unloading-vials","title":"Loading and Unloading Vials","text":"<pre><code># Load vial to inlet for analysis\napi.ce.load_vial_to_position(vial=15, position=\"inlet\")\n\n# Load waste vial to outlet\napi.ce.load_vial_to_position(vial=48, position=\"outlet\")\n\n# Load buffer vial for replenishment\napi.ce.load_vial_to_position(vial=49, position=\"replenishment\")\n\n# Return vial to carousel\napi.ce.unload_vial_from_position(\"inlet\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#checking-vial-status","title":"Checking Vial Status","text":"<pre><code># Check where a vial is located\nstate = api.ce.get_vial_state(15)\nprint(f\"Vial 15 is at: {state}\")\n# Possible states: \"carousel\", \"inlet\", \"outlet\", \"replenishment\", \"out_system\"\n\n# Check all vial positions\nvial_table = api.validation.get_vialtable()\nfor position, present in vial_table.items():\n    if present:\n        print(f\"Vial present at position {position}\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#capillary-operations","title":"Capillary Operations","text":""},{"location":"chemstation-api/basic-operations/#capillary-conditioning","title":"Capillary Conditioning","text":"<pre><code># Standard 1-minute flush at high pressure\napi.ce.flush_capillary(time_flush=60.0)\n\n# Quick bubble removal\napi.ce.flush_capillary(time_flush=10.0)\n\n# Long conditioning for new capillary\napi.ce.flush_capillary(time_flush=300.0)  # 5 minutes\n</code></pre>"},{"location":"chemstation-api/basic-operations/#pressure-operations","title":"Pressure Operations","text":"<pre><code># Hydrodynamic injection (50 mbar for 5 seconds)\napi.ce.apply_pressure_to_capillary(pressure=50.0, time_pressure=5.0)\n\n# Gentle conditioning\napi.ce.apply_pressure_to_capillary(pressure=25.0, time_pressure=30.0)\n\n# Vacuum application\napi.ce.apply_pressure_to_capillary(pressure=-50.0, time_pressure=10.0)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#method-operations","title":"Method Operations","text":""},{"location":"chemstation-api/basic-operations/#loading-methods","title":"Loading Methods","text":"<pre><code># Load method from default directory\napi.method.load(\"CE_Standard_Method\")\n\n# Load from specific directory\napi.method.load(\"TestMethod\", method_path=\"C:\\\\Methods\\\\Development\\\\\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#running-methods","title":"Running Methods","text":"<pre><code># Simple method execution\napi.method.run(\"Sample_001\")\n\n# Run with custom data directory\napi.method.run(\"Sample_001\", data_dir=\"C:\\\\Data\\\\Project_X\\\\\")\n\n# Run with all parameters\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein_Analysis\",\n    sample_name=\"BSA_1mg_ml\",\n    comment=\"pH 8.5 buffer\",\n    subdirectory_name=\"Protein_Study\"\n)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#saving-methods","title":"Saving Methods","text":"<pre><code># Save current method with new name\napi.method.save(\"Modified_Method\", comment=\"Increased voltage to 25kV\")\n\n# Overwrite current method\napi.method.save()\n</code></pre>"},{"location":"chemstation-api/basic-operations/#system-monitoring","title":"System Monitoring","text":""},{"location":"chemstation-api/basic-operations/#check-system-status","title":"Check System Status","text":"<pre><code># Is method running?\nif api.system.method_on():\n    print(\"Analysis in progress\")\nelse:\n    print(\"System idle\")\n\n# Get detailed status\nstatus = api.system.status()\nprint(f\"Current status: {status}\")\n# Returns: \"STANDBY\", \"PRERUN\", \"RUN\", \"POSTRUN\", etc.\n\n# Check CE module status\nrc_status = api.system.RC_status()\nprint(f\"CE module: {rc_status}\")\n# Returns: \"Idle\", \"Run\", \"NotReady\", \"Error\"\n</code></pre>"},{"location":"chemstation-api/basic-operations/#monitor-analysis-progress","title":"Monitor Analysis Progress","text":"<pre><code># Real-time monitoring\nwhile api.system.method_on():\n    elapsed = api.system.get_elapsed_analysis_time()\n    total = api.system.get_analysis_time()\n    remaining = api.system.get_remaining_analysis_time()\n\n    progress = (elapsed / total) * 100 if total &gt; 0 else 0\n    print(f\"Progress: {progress:.1f}% - {remaining:.1f} min remaining\")\n\n    time.sleep(30)  # Update every 30 seconds\n\nprint(\"Analysis complete!\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#validation-operations","title":"Validation Operations","text":""},{"location":"chemstation-api/basic-operations/#pre-flight-checks","title":"Pre-flight Checks","text":"<pre><code># Validate before starting analysis\ndef prepare_for_analysis(sample_vial, waste_vial, method_name):\n    # Check vials are present\n    api.validation.validate_vial_in_system(sample_vial)\n    api.validation.validate_vial_in_system(waste_vial)\n\n    # Check method exists\n    api.validation.validate_method_name(method_name)\n\n    # Check carousel is available\n    api.validation.validate_use_carousel()\n\n    # Check system is ready\n    if api.system.status() != \"STANDBY\":\n        raise SystemError(\"System not ready\")\n\n    print(\"All checks passed - ready for analysis!\")\n\n# Use the validation\nprepare_for_analysis(15, 48, \"CE_Standard_Method\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#batch-validation","title":"Batch Validation","text":"<pre><code># Validate multiple vials for sequence\nsample_vials = [10, 11, 12, 13, 14, 15]\napi.validation.list_vial_validation(sample_vials)\nprint(\"All sample vials present\")\n</code></pre>"},{"location":"chemstation-api/basic-operations/#direct-chemstation-commands","title":"Direct ChemStation Commands","text":"<p>For advanced operations, send commands directly:</p> <pre><code># Get system paths\nmethod_path = api.send(\"response$ = _METHPATH$\")\ndata_path = api.send(\"response$ = _DATAPATH$\")\nprint(f\"Methods: {method_path}\")\nprint(f\"Data: {data_path}\")\n\n# Get current voltage\nvoltage = api.send('response$ = VAL$(ObjHdrVal(RCCE1Status[1], \"Voltage_actual\"))')\nprint(f\"Current voltage: {voltage} kV\")\n\n# Execute custom macro\napi.send('macro \"C:\\\\custom_macro.mac\"; custom_procedure 15, \"parameter\"')\n</code></pre>"},{"location":"chemstation-api/basic-operations/#complete-analysis-example","title":"Complete Analysis Example","text":"<p>Here's a complete workflow for a single sample:</p> <pre><code>def analyze_sample(sample_vial, sample_name, method_name):\n    \"\"\"Complete analysis workflow for a single sample.\"\"\"\n\n    # 1. Validate prerequisites\n    print(\"Validating system...\")\n    api.validation.validate_vial_in_system(sample_vial)\n    api.validation.validate_vial_in_system(48)  # waste vial\n    api.validation.validate_method_name(method_name)\n\n    # 2. Wait for system ready\n    print(\"Waiting for system...\")\n    if not api.system.wait_for_ready(timeout=60):\n        raise TimeoutError(\"System not ready\")\n\n    # 3. Load vials\n    print(\"Loading vials...\")\n    api.ce.load_vial_to_position(sample_vial, \"inlet\")\n    api.ce.load_vial_to_position(48, \"outlet\")\n\n    # 4. Condition capillary\n    print(\"Conditioning capillary...\")\n    api.ce.flush_capillary(30.0)\n\n    # 5. Load and run method\n    print(f\"Running analysis for {sample_name}...\")\n    api.method.load(method_name)\n    api.method.run(sample_name)\n\n    # 6. Monitor progress\n    while api.system.method_on():\n        remaining = api.system.get_remaining_analysis_time()\n        print(f\"  {remaining:.1f} minutes remaining\", end='\\r')\n        time.sleep(10)\n\n    # 7. Return vials\n    print(\"\\nCleaning up...\")\n    api.ce.unload_vial_from_position(\"inlet\")\n    api.ce.unload_vial_from_position(\"outlet\")\n\n    print(f\"Analysis of {sample_name} complete!\")\n\n# Run the analysis\nanalyze_sample(\n    sample_vial=15,\n    sample_name=\"Test_Sample_001\",\n    method_name=\"CE_Standard_Method\"\n)\n</code></pre>"},{"location":"chemstation-api/basic-operations/#tips-for-efficient-operation","title":"Tips for Efficient Operation","text":"<ol> <li> <p>Always validate before operations <pre><code># Good practice\napi.validation.validate_vial_in_system(vial)\napi.ce.load_vial_to_position(vial, \"inlet\")\n</code></pre></p> </li> <li> <p>Monitor system state <pre><code># Wait between operations\nwhile api.system.status() != \"STANDBY\":\n    time.sleep(5)\n</code></pre></p> </li> </ol> <p>je\u0161t\u011b n\u011bco p\u0159idej</p> <p>Next Steps</p> <p>Learn about Methods and Sequences for batch analysis automation.</p>"},{"location":"chemstation-api/file-protocol/","title":"File-Based Communication Protocol","text":"<p>Understanding how Python communicates with ChemStation is essential for troubleshooting, optimization, and advanced usage. This guide explains the robust file-based protocol that enables reliable command execution between Python and ChemStation.</p>"},{"location":"chemstation-api/file-protocol/#protocol-overview","title":"Protocol Overview","text":"<p>The ChemStation API uses a file-based communication protocol to ensure reliable, bidirectional communication between Python and ChemStation. This approach provides superior reliability compared to direct socket connections, especially in Windows environments where COM interfaces can be unstable.</p>"},{"location":"chemstation-api/file-protocol/#design-inspiration","title":"Design Inspiration","text":"<p>This communication protocol is adapted and enhanced from the excellent work by the Cronin Group at the University of Glasgow. The original implementation can be found at: https://github.com/croningp/analyticallabware/tree/master/AnalyticalLabware/devices/Agilent</p> <p>Our implementation extends this foundation with additional error handling, timeout management, and CE-specific optimizations.</p>"},{"location":"chemstation-api/file-protocol/#how-it-works","title":"How It Works","text":""},{"location":"chemstation-api/file-protocol/#communication-architecture","title":"Communication Architecture","text":"<p>The protocol operates through two files that act as communication channels between Python and ChemStation:</p> <ul> <li>Command File - Python writes commands here</li> <li>Response File - ChemStation writes responses here  </li> <li>ChemStation Macro - Monitors and executes commands continuously</li> </ul>"},{"location":"chemstation-api/file-protocol/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Command Writing: Python formats the command with a unique number and writes it to the command file</li> <li>Macro Polling: The ChemStation macro continuously monitors the command file every 200 milliseconds</li> <li>Command Detection: When a new command is detected (higher number than previous), the macro reads it</li> <li>Execution: The macro sends the command to ChemStation's Command Processor for execution</li> <li>Response Writing: Results are written to the response file with the matching command number</li> <li>Response Reading: Python reads the response file and matches the response to the original command</li> </ol>"},{"location":"chemstation-api/file-protocol/#command-format-and-structure","title":"Command Format and Structure","text":""},{"location":"chemstation-api/file-protocol/#basic-commands-no-return-value","title":"Basic Commands (No Return Value)","text":"<p>For commands that perform actions without returning data:</p> <pre><code># Python code\napi.send(\"LoadMethod _METHPATH$, MyMethod.M\")\n\n# Command file content\n123 LoadMethod _METHPATH$, MyMethod.M\n\n# Response file content (indicates successful execution)\n123 None\n</code></pre>"},{"location":"chemstation-api/file-protocol/#commands-with-return-values","title":"Commands with Return Values","text":"<p>To capture return values, prefix the command with <code>response$ =</code>:</p> <pre><code># Python code\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Current method path: {method_path}\")\n\n# Command file content\n124 response$ = _METHPATH$\n\n# Response file content\n124 C:\\Chem32\\1\\Methods\\CE\\Default\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#complex-commands-with-parameters","title":"Complex Commands with Parameters","text":"<pre><code># Setting system variables\napi.send('_SAMPLE$ = \"Sample_001\"')\n\n# Executing methods with parameters  \napi.send('RunMethod _DATAPATH$,, _SAMPLE$')\n\n# Querying instrument status\nstatus = api.send(\"response$ = VAL$(_MethodOn)\")\nis_running = bool(int(status))\n</code></pre>"},{"location":"chemstation-api/file-protocol/#command-numbering-system","title":"Command Numbering System","text":""},{"location":"chemstation-api/file-protocol/#sequential-numbering","title":"Sequential Numbering","text":"<p>The protocol uses sequential command numbers to ensure proper command-response matching:</p> <ul> <li>Range: Numbers increment from 1 to a configurable maximum (default: 256)</li> <li>Wraparound: Automatically resets to 1 after reaching maximum</li> <li>Uniqueness: Each command gets a unique number within the cycle</li> <li>Synchronization: Prevents response mixing from multiple concurrent commands</li> </ul>"},{"location":"chemstation-api/file-protocol/#numbering-example","title":"Numbering Example","text":"<pre><code># Example command sequence\n1 response$ = _METHPATH$                    # Get method path\n2 LoadMethod _METHPATH$, Test.M            # Load method\n3 response$ = VAL$(_MethodOn)              # Check method status\n4 RunMethod _DATAPATH$,, Sample001         # Run analysis\n...\n255 response$ = ACQSTATUS$                 # Check acquisition\n256 Print \"Analysis complete\"               # Final command\n1 response$ = _DATAPATH$                   # Wraps back to 1\n</code></pre>"},{"location":"chemstation-api/file-protocol/#synchronization-benefits","title":"Synchronization Benefits","text":"<ul> <li>Prevents confusion when multiple commands are sent rapidly</li> <li>Enables debugging by tracking specific command execution</li> <li>Supports concurrent operations without response mixing</li> <li>Provides error isolation for failed commands</li> </ul>"},{"location":"chemstation-api/file-protocol/#file-locations-and-structure","title":"File Locations and Structure","text":""},{"location":"chemstation-api/file-protocol/#default-file-structure","title":"Default File Structure","text":"<pre><code>SIA-CE/\n\u2514\u2500\u2500 ChemstationAPI/\n    \u2514\u2500\u2500 core/\n        \u251c\u2500\u2500 ChemPyConnect.mac              # ChemStation macro\n        \u251c\u2500\u2500 communication_config.py        # Configuration module\n        \u2514\u2500\u2500 communication_files/           # Communication directory\n            \u251c\u2500\u2500 command                   # Commands from Python \u2192 ChemStation\n            \u2514\u2500\u2500 response                  # Responses from ChemStation \u2192 Python\n</code></pre>"},{"location":"chemstation-api/file-protocol/#file-content-examples","title":"File Content Examples","text":"<p>Command File Format: <pre><code>125 response$ = _METHPATH$\n</code></pre></p> <p>Response File Format: <pre><code>125 C:\\Chem32\\1\\Methods\\CE\\Migration\\\n</code></pre></p>"},{"location":"chemstation-api/file-protocol/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"chemstation-api/file-protocol/#enable-verbose-communication-logging","title":"Enable Verbose Communication Logging","text":"<pre><code>from ChemstationAPI.core.communication_config import CommunicationConfig\nfrom ChemstationAPI import ChemstationAPI\n\n# Create configuration with verbose output\nconfig = CommunicationConfig(verbose=True)\napi = ChemstationAPI(config)\n\n# All commands and responses will be logged\nmethod_path = api.send(\"response$ = _METHPATH$\")\n\n# Console output:\n# Sending command 1: response$ = _METHPATH$\n# Received response 1: C:\\Chem32\\1\\Methods\\CE\\Migration\\\n</code></pre>"},{"location":"chemstation-api/file-protocol/#error-handling-and-recovery","title":"Error Handling and Recovery","text":""},{"location":"chemstation-api/file-protocol/#timeout-management","title":"Timeout Management","text":"<pre><code># Standard timeout (5 seconds default)\napi.send(\"LoadMethod _METHPATH$, MyMethod.M\")\n\n# Extended timeout for long operations\napi.send(\"RunMethod _DATAPATH$,, Sample001\", timeout=300.0)  # 5 minutes\n\n# Short timeout for quick checks\nstatus = api.send(\"response$ = VAL$(_MethodOn)\", timeout=1.0)\n</code></pre>"},{"location":"chemstation-api/file-protocol/#chemstation-error-detection","title":"ChemStation Error Detection","text":"<p>The API automatically detects and handles ChemStation errors:</p> <pre><code>try:\n    # Attempt to load non-existent method\n    api.send(\"LoadMethod _METHPATH$, NonExistentMethod.M\")\n\nexcept ChemstationError as e:\n    print(f\"ChemStation Error: {e}\")\n    # Output: ChemStation Error: ERROR: Method file 'NonExistentMethod.M' not found\n\ntry:\n    # Invalid command syntax\n    api.send(\"InvalidCommandSyntax parameter1 parameter2\")\n\nexcept ChemstationError as e:\n    print(f\"Command Error: {e}\")\n    # Output: Command Error: ERROR: Command 'InvalidCommandSyntax' not recognized\n</code></pre>"},{"location":"chemstation-api/file-protocol/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"chemstation-api/file-protocol/#no-response-received-timeouterror","title":"No Response Received (TimeoutError)","text":"<p>Symptoms: - Commands timeout without receiving responses - <code>TimeoutError: No response received within X seconds</code></p> <p>Diagnostic Steps: 1. Verify macro status: <pre><code># Test basic communication\ntry:\n    api.send(\"Print 'Test'\", timeout=1.0)\n    print(\"\u2713 Macro is running\")\nexcept TimeoutError:\n    print(\"\u2717 Macro not responding\")\n</code></pre></p> <ol> <li>Check file permissions: <pre><code>import os\n\ncomm_dir = \"core/communication_files\"\ncmd_file = os.path.join(comm_dir, \"command\")\nresp_file = os.path.join(comm_dir, \"response\")\n\nprint(f\"Command file writable: {os.access(cmd_file, os.W_OK)}\")\nprint(f\"Response file readable: {os.access(resp_file, os.R_OK)}\")\n</code></pre></li> </ol>"},{"location":"chemstation-api/file-protocol/#wrong-response-received","title":"Wrong Response Received","text":"<p>Symptoms: - Responses don't match sent commands - Intermittent incorrect data</p> <p>Solutions: 1. Reset command numbering: <pre><code># Force reset communication state\napi = ChemstationAPI()  # Creates fresh instance\n</code></pre></p> <ol> <li>Check for multiple Python instances:</li> <li>Ensure only one Python script is communicating with ChemStation</li> <li>Close other instances that might be interfering</li> </ol>"},{"location":"chemstation-api/file-protocol/#slow-communication-performance","title":"Slow Communication Performance","text":"<p>Symptoms: - Commands take longer than expected - Overall system feels sluggish</p> <p>Optimization Steps: 1. Reduce polling delay: <pre><code>config = CommunicationConfig(retry_delay=0.05)  # Faster polling\n</code></pre></p> <ol> <li>Check system performance:</li> <li>Monitor disk I/O during communication</li> <li>Ensure antivirus isn't scanning communication files</li> <li>Check ChemStation system resource usage</li> </ol>"},{"location":"chemstation-api/file-protocol/#file-access-issues","title":"File Access Issues","text":"<p>Symptoms: - Permission denied errors - Unable to create communication files</p> <p>Solutions: 1. Run as Administrator: Right-click Python IDE and select \"Run as administrator\" 2. Check directory permissions: Ensure communication directory has full read/write access 3. Antivirus exclusion: Add communication directory to antivirus exclusions</p>"},{"location":"chemstation-api/file-protocol/#protocol-best-practices","title":"Protocol Best Practices","text":""},{"location":"chemstation-api/file-protocol/#efficient-command-execution","title":"Efficient Command Execution","text":"<pre><code># Batch related commands together\napi.send(\"LoadMethod _METHPATH$, MyMethod.M\")\napi.send('_SAMPLE$ = \"Sample_001\"')  \napi.send(\"RunMethod _DATAPATH$,, _SAMPLE$\")\n\n# Use appropriate timeouts\nquick_status = api.send(\"response$ = VAL$(_MethodOn)\", timeout=1.0)\nmethod_result = api.send(\"RunMethod _DATAPATH$,, Sample\", timeout=300.0)\n</code></pre>"},{"location":"chemstation-api/file-protocol/#error-prevention","title":"Error Prevention","text":"<pre><code># Always validate before execution\ndef safe_method_execution(api, method_name, sample_name):\n    \"\"\"Safely execute method with validation\"\"\"\n\n    # Check if method exists\n    try:\n        api.send(f\"LoadMethod _METHPATH$, {method_name}\")\n    except ChemstationError:\n        raise ValueError(f\"Method '{method_name}' not found\")\n\n    # Set sample name\n    api.send(f'_SAMPLE$ = \"{sample_name}\"')\n\n    # Execute with extended timeout\n    api.send(\"RunMethod _DATAPATH$,, _SAMPLE$\", timeout=1800.0)\n\n    return True\n</code></pre> <p>Protocol Reliability</p> <p>The file-based protocol is extremely reliable once properly configured. Most communication issues stem from: 1. Macro not running - Always verify macro status first 2. File permission problems - Ensure proper directory access 3. Multiple Python instances - Avoid concurrent communication attempts</p> <p>Performance Considerations</p> <p>While file-based communication adds slight overhead compared to direct connections, the reliability benefits far outweigh the minimal performance impact. Typical command execution times are 50-200ms depending on command complexity.</p>"},{"location":"chemstation-api/introduction/","title":"ChemStation API Introduction","text":""},{"location":"chemstation-api/introduction/#what-is-the-chemstation-api","title":"What is the ChemStation API?","text":"<p>The ChemStation API provides a comprehensive Python interface for controlling Agilent ChemStation software and CE instruments. It enables complete automation of capillary electrophoresis systems, eliminating the need for manual intervention in routine analytical workflows.</p>"},{"location":"chemstation-api/introduction/#communication-architecture","title":"Communication Architecture","text":"<p>The API operates by sending commands directly to ChemStation's Command Processor (CP). This approach provides:</p> <ul> <li>Direct instrument control through ChemStation's native command structure</li> <li>Simplified operation with pre-built command functions for common tasks</li> <li>Reliable communication via file-based protocol between Python and ChemStation</li> </ul>"},{"location":"chemstation-api/introduction/#development-focus-and-compatibility","title":"Development Focus and Compatibility","text":"<p>While the API is designed as a general ChemStation interface, it has been specifically developed and optimized for Capillary Electrophoresis applications. Many commands and workflows are tailored for CE operations, though the underlying architecture supports broader ChemStation functionality.</p> <p>Testing and Compatibility: - Tested on: ChemStation version B.04.03-SP2 and B.04.03-SP3 - Expected compatibility: Other ChemStation versions should work but have not been extensively tested - Requirements: ChemStation must be running with the specialized communication macro loaded</p> <p>Prerequisites</p> <p>The API requires ChemStation to be running with a special communication macro. See the Getting Started guide for setup instructions.</p>"},{"location":"chemstation-api/introduction/#key-capabilities","title":"Key Capabilities","text":""},{"location":"chemstation-api/introduction/#ce-instrument-control","title":"CE Instrument Control","text":"<p>Vial and Sample Management: - Load and unload vials from carousel to analysis positions (inlet/outlet) - Control vial positioning with precision and error checking - Monitor vial presence and validate positions before operations</p> <p>Capillary Operations: - Automated capillary conditioning and flushing protocols - Pressure-based sample injection with customizable parameters - Rinse cycles and maintenance procedures</p> <p>System Monitoring: - Real-time instrument status monitoring - Position tracking for all moveable components - System readiness validation before operations</p>"},{"location":"chemstation-api/introduction/#method-management","title":"Method Management","text":"<p>Method Operations: - Load existing methods from ChemStation method database - Execute methods with sample-specific information and parameters - Save modified methods with custom settings - Validate method existence before execution</p> <p>Parameter Control: - Modify injection parameters (time, pressure, volume) - Adjust separation conditions (voltage, temperature) - Configure detection settings and data acquisition parameters</p>"},{"location":"chemstation-api/introduction/#sequence-operations","title":"Sequence Operations","text":"<p>Sequence Management: - Load and save sequence files from ChemStation database - Modify sequence tables programmatically - Import sequence tables from Excel spreadsheets with validation - Export results and sequence data for external processing</p> <p>Execution Control: - Start, pause, and resume sequence execution - Monitor sequence progress with real-time updates - Handle sequence interruptions and error recovery - Generate execution reports and logs</p>"},{"location":"chemstation-api/introduction/#system-monitoring-and-control","title":"System Monitoring and Control","text":"<p>Real-Time Status: - Continuous monitoring of instrument status and health - Analysis progress tracking with time estimates - Temperature, pressure, and voltage monitoring - Error detection with detailed diagnostic information</p> <p>State Management: - System readiness validation before starting operations - Automatic state recovery after interruptions - Preventive checks to avoid operational conflicts</p>"},{"location":"chemstation-api/introduction/#how-it-works","title":"How It Works","text":"<p>The ChemStation API uses a sophisticated communication protocol to bridge Python and ChemStation:</p>"},{"location":"chemstation-api/introduction/#communication-flow","title":"Communication Flow","text":"<ol> <li>Command Initiation: Python sends a command through the API</li> <li>Protocol Translation: The command is formatted for ChemStation's Command Processor</li> <li>File-Based Transfer: Commands are written to communication files monitored by ChemStation</li> <li>Macro Processing: A specialized macro in ChemStation reads commands and executes them</li> <li>Response Generation: ChemStation writes responses back to communication files</li> <li>Python Integration: The API reads responses and returns results to Python</li> </ol>"},{"location":"chemstation-api/introduction/#architecture-benefits","title":"Architecture Benefits","text":"<ul> <li>Reliability: File-based communication eliminates connection timeouts</li> <li>Bidirectional: Full command and response capabilities</li> <li>Error Handling: Comprehensive error detection and reporting</li> <li>State Synchronization: Maintains consistent state between Python and ChemStation</li> </ul>"},{"location":"chemstation-api/introduction/#core-components","title":"Core Components","text":""},{"location":"chemstation-api/introduction/#chemstationapi-class","title":"ChemstationAPI Class","text":"<p>The main entry point providing organized access to all functionality:</p> <pre><code>from ChemstationAPI import ChemstationAPI\n\n# Initialize connection to ChemStation\napi = ChemstationAPI()\n\n# Access specialized modules\nce_operations = api.ce\nmethod_control = api.method\nsequence_management = api.sequence\n</code></pre>"},{"location":"chemstation-api/introduction/#functional-modules","title":"Functional Modules","text":"<p>CE Module (<code>api.ce</code>) - Vial handling operations (load, unload, positioning) - Capillary conditioning and maintenance procedures - Pressure control for injection and flushing - Position monitoring and validation</p> <p>Methods Module (<code>api.method</code>) - Method loading from ChemStation database - Method execution with custom parameters - Method saving and modification - Parameter validation and error checking</p> <p>Sequence Module (<code>api.sequence</code>) - Sequence table management and editing - Excel integration for batch import/export - Sequence execution control (start/pause/resume) - Progress monitoring and reporting</p> <p>System Module (<code>api.system</code>) - Real-time status monitoring and health checks - Analysis progress tracking with time estimates - System control (start/stop operations) - Error detection and diagnostic reporting</p> <p>Validation Module (<code>api.validation</code>) - Pre-operation checks for vials, methods, and files - System state verification before critical operations - File existence validation for methods and sequences - Comprehensive error prevention</p>"},{"location":"chemstation-api/introduction/#typical-workflow-example","title":"Typical Workflow Example","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nimport time\n\n# Initialize ChemStation connection\napi = ChemstationAPI()\n\n# Pre-operation validation\nprint(\"Validating prerequisites...\")\napi.validation.validate_vial_in_system(15)         # Check sample vial\napi.validation.validate_vial_in_system(48)         # Check buffer vial  \napi.validation.validate_method_name(\"CE_Analysis\") # Verify method exists\n\n# Prepare instrument for analysis\nprint(\"Preparing instrument...\")\napi.ce.load_vial_to_position(15, \"inlet\")   # Load sample to inlet\napi.ce.load_vial_to_position(48, \"outlet\")  # Load buffer to outlet\n\n# Condition capillary\nprint(\"Conditioning capillary...\")\napi.ce.flush_capillary(duration=60.0, pressure=950)  # 60-second flush\n\n# Execute analysis\nprint(\"Starting analysis...\")\napi.method.execute_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Analysis\", \n    sample_name=\"Sample_001\",\n    injection_time=5.0\n)\n\n# Monitor progress\nprint(\"Monitoring analysis progress...\")\nwhile api.system.method_on():\n    remaining = api.system.get_remaining_analysis_time()\n    current_step = api.system.get_current_method_step()\n    print(f\"Step: {current_step}, Time remaining: {remaining:.1f} minutes\")\n    time.sleep(30)  # Update every 30 seconds\n\nprint(\"Analysis complete!\")\n\n# Optional: Retrieve results\nresults = api.system.get_analysis_results()\nprint(f\"Analysis completed successfully. Peak count: {results.peak_count}\")\n</code></pre>"},{"location":"chemstation-api/introduction/#key-benefits","title":"Key Benefits","text":""},{"location":"chemstation-api/introduction/#complete-automation","title":"Complete Automation","text":"<p>Eliminate Manual Operations: - No manual vial loading or positioning required - Automated capillary conditioning and maintenance - Hands-free method execution and monitoring</p> <p>Large-Scale Processing: - Process hundreds of samples with minimal supervision - Batch operations with error recovery and resume capabilities - Parallel sample preparation while analysis is running</p>"},{"location":"chemstation-api/introduction/#enhanced-reproducibility","title":"Enhanced Reproducibility","text":"<p>Standardized Workflows: - Consistent method execution across all analyses - Identical conditioning and preparation procedures - Traceable operations with comprehensive logging</p> <p>Quality Control: - Pre-operation validation prevents common errors - Automated checks ensure optimal system conditions - Detailed error reporting for troubleshooting</p>"},{"location":"chemstation-api/introduction/#flexible-integration","title":"Flexible Integration","text":"<p>System Connectivity: - Integrate with SIA systems for sample preparation - Connect to external pumps and preparation equipment - Interface with LIMS and data management systems</p> <p>Custom Workflows: - Create specialized analytical procedures - Implement adaptive methods based on sample properties - Develop method optimization routines</p>"},{"location":"chemstation-api/introduction/#operational-efficiency","title":"Operational Efficiency","text":"<p>Increased Throughput: - Parallel sample preparation during analysis - Reduced setup and transition times - Optimized instrument utilization</p> <p>Resource Optimization: - Minimized reagent consumption through precise control - Reduced analyst time requirements - Lower operational costs per sample</p>"},{"location":"chemstation-api/introduction/#getting-started","title":"Getting Started","text":"<p>Ready to implement automated CE analysis? Follow these steps:</p> <ol> <li>Installation Setup - Configure your system and install required components</li> <li>File Protocol Overview - Understand the communication mechanism</li> <li>Basic Operations - Learn fundamental CE control functions</li> <li>Advanced Workflows - Explore sophisticated automation patterns</li> </ol> <p>Development Approach</p> <p>Start with simple operations like vial loading and method execution before implementing complex batch workflows. The modular design allows incremental automation development.</p> <p>Support and Community</p> <p>For technical support, feature requests, or to share your automation workflows, visit the project repository or check the troubleshooting guide.</p>"},{"location":"chemstation-api/methods-sequences/","title":"Methods and Sequences","text":"<p>Learn how to work with CE methods and create automated sequences for batch analysis.</p>"},{"location":"chemstation-api/methods-sequences/#understanding-methods","title":"Understanding Methods","text":"<p>CE methods define all analytical parameters: - Voltage and current settings - Temperature control - Injection parameters - Detection wavelengths - Time programs - Data acquisition settings</p>"},{"location":"chemstation-api/methods-sequences/#method-management","title":"Method Management","text":""},{"location":"chemstation-api/methods-sequences/#listing-available-methods","title":"Listing Available Methods","text":"<pre><code># Get method directory path\nmethod_path = api.send(\"response$ = _METHPATH$\")\nprint(f\"Method directory: {method_path}\")\n\n# List methods using Python\nimport os\nmethods = [f for f in os.listdir(method_path) if f.endswith('.M')]\nprint(\"Available methods:\", methods)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#loading-methods","title":"Loading Methods","text":"<pre><code># Load from default directory\napi.method.load(\"CE_Standard_Method\")\n\n# Load with full validation\ntry:\n    api.validation.validate_method_name(\"CE_Protein_Analysis\")\n    api.method.load(\"CE_Protein_Analysis\")\n    print(\"Method loaded successfully\")\nexcept ValidationError:\n    print(\"Method not found!\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#modifying-method-parameters","title":"Modifying Method Parameters","text":"<p>While the API doesn't directly modify method parameters, you can:</p> <ol> <li>Load a template method</li> <li>Save with modifications via ChemStation</li> <li>Use the modified method</li> </ol> <pre><code># Load template\napi.method.load(\"Template_Method\")\n\n# Make changes in ChemStation UI...\n\n# Save as new method\napi.method.save(\"Modified_Method\", comment=\"Voltage increased to 30kV\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#running-methods-with-custom-parameters","title":"Running Methods with Custom Parameters","text":"<pre><code># Simple run - uses current loaded method\napi.method.run(\"Sample_001\")\n\n# Run specific method with all parameters\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein_Analysis\",\n    sample_name=\"BSA_Standard_1mg\",\n    comment=\"Validation run, fresh buffer\",\n    subdirectory_name=\"Validation_2024\"\n)\n\n# The method creates a temporary register for custom parameters\n# without modifying the original method file\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#understanding-sequences","title":"Understanding Sequences","text":"<p>Sequences automate the analysis of multiple samples with different parameters:</p>"},{"location":"chemstation-api/methods-sequences/#sequence-structure","title":"Sequence Structure","text":"Column Description Example Vial Carousel position 15 Method Method name CE_Protein.M SampleName Sample identifier BSA_001 SampleInfo Additional info 1 mg/mL, pH 7.4 DataFileName Custom filename Project_X_001 InjVial Injection parameters 1"},{"location":"chemstation-api/methods-sequences/#creating-sequences-manually","title":"Creating Sequences Manually","text":"<pre><code># Load existing sequence\napi.sequence.load_sequence(\"Daily_QC\")\n\n# Modify specific row\napi.sequence.modify_sequence_row(\n    row=1,\n    vial_sample=\"10\",\n    method=\"CE_Standard\",\n    sample_name=\"QC_Standard_001\",\n    sample_info=\"Fresh preparation\"\n)\n\n# Add more samples\nfor i in range(2, 6):\n    api.sequence.modify_sequence_row(\n        row=i,\n        vial_sample=str(10 + i),\n        method=\"CE_Standard\",\n        sample_name=f\"QC_Standard_{i:03d}\",\n        sample_info=\"Replicate analysis\"\n    )\n\n# Save sequence\napi.sequence.save_sequence(\"Daily_QC_Modified\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#excel-integration","title":"Excel Integration","text":""},{"location":"chemstation-api/methods-sequences/#preparing-excel-file","title":"Preparing Excel File","text":"<p>Create an Excel file with columns matching your needs:</p> Vial Method Sample Info Replicate 10 CE_Standard STD_001 1 mg/mL 1 11 CE_Standard STD_002 2 mg/mL 1 12 CE_Modified TEST_001 Unknown 1"},{"location":"chemstation-api/methods-sequences/#importing-from-excel","title":"Importing from Excel","text":"<pre><code># Basic import\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"sample_list.xlsx\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample\"\n)\n\n# Full import with all columns\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"complex_sequence.xlsx\",\n    sequence_name=\"Research_Project_2024\",  # Load this sequence first\n    sheet_name=0,  # First worksheet\n    vial_column=\"Vial_Position\",\n    method_column=\"CE_Method\",\n    sample_name_column=\"Sample_ID\",\n    sample_info_column=\"Description\",\n    filename_column=\"Data_Name\",\n    replicate_column=\"Rep_Number\"\n)\n</code></pre> <p>Excel Requirements</p> <ul> <li>Excel must be installed on the system</li> <li>File should not be open during import</li> <li>Column names must match exactly (case-sensitive)</li> </ul>"},{"location":"chemstation-api/methods-sequences/#sequence-execution","title":"Sequence Execution","text":""},{"location":"chemstation-api/methods-sequences/#starting-a-sequence","title":"Starting a Sequence","text":"<pre><code># Load and start sequence\napi.sequence.load_sequence(\"Daily_Analysis\")\napi.sequence.start()\n\n# Monitor progress\nwhile api.system.method_on():\n    status = api.system.status()\n    print(f\"Status: {status}\")\n    time.sleep(60)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-control","title":"Sequence Control","text":"<pre><code># Pause after current sample\napi.sequence.pause()\nprint(\"Sequence paused - current sample will complete\")\n\n# Resume sequence\napi.sequence.resume()\nprint(\"Sequence resumed\")\n\n# Emergency stop\napi.system.abort_run()\nprint(\"Sequence aborted!\")\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#advanced-sequence-workflows","title":"Advanced Sequence Workflows","text":""},{"location":"chemstation-api/methods-sequences/#validation-sequence-with-standards","title":"Validation Sequence with Standards","text":"<pre><code>def create_validation_sequence(standard_vials, sample_vials):\n    \"\"\"Create sequence with bracketing standards.\"\"\"\n\n    row = 1\n\n    # Initial standards\n    for vial in standard_vials[:2]:\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Standard\",\n            sample_name=f\"STD_{row:03d}\",\n            sample_info=\"System suitability\"\n        )\n        row += 1\n\n    # Samples with bracketing standards\n    for i, vial in enumerate(sample_vials):\n        # Sample\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Analysis\",\n            sample_name=f\"Sample_{i+1:03d}\",\n            sample_info=\"Test sample\"\n        )\n        row += 1\n\n        # Bracket standard every 5 samples\n        if (i + 1) % 5 == 0:\n            api.sequence.modify_sequence_row(\n                row=row,\n                vial_sample=str(standard_vials[0]),\n                method=\"CE_Standard\",\n                sample_name=f\"STD_B{row:03d}\",\n                sample_info=\"Bracket standard\"\n            )\n            row += 1\n\n    # Final standards\n    for vial in standard_vials[:2]:\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=\"CE_Standard\",\n            sample_name=f\"STD_F{row:03d}\",\n            sample_info=\"Final check\"\n        )\n        row += 1\n\n    api.sequence.save_sequence(\"Validation_Sequence\")\n\n# Create the sequence\ncreate_validation_sequence(\n    standard_vials=[1, 2],\n    sample_vials=list(range(10, 25))\n)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#multi-method-sequence","title":"Multi-Method Sequence","text":"<pre><code>def create_screening_sequence(samples_info):\n    \"\"\"Create sequence with different methods for screening.\"\"\"\n\n    for row, (vial, sample_type, sample_name) in enumerate(samples_info, 1):\n        # Select method based on sample type\n        if sample_type == \"protein\":\n            method = \"CE_Protein_SDS\"\n        elif sample_type == \"small_molecule\":\n            method = \"MEKC_General\"\n        elif sample_type == \"anion\":\n            method = \"CE_Anions\"\n        else:\n            method = \"CE_Screening\"\n\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=method,\n            sample_name=sample_name,\n            sample_info=f\"Type: {sample_type}\"\n        )\n\n    api.sequence.save_sequence(\"Screening_Sequence\")\n\n# Define samples\nsamples = [\n    (10, \"protein\", \"BSA_Test\"),\n    (11, \"small_molecule\", \"Caffeine_Std\"),\n    (12, \"anion\", \"Chloride_Mix\"),\n    (13, \"protein\", \"Antibody_001\"),\n    (14, \"unknown\", \"Customer_Sample_X\")\n]\n\ncreate_screening_sequence(samples)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-data-management","title":"Sequence Data Management","text":""},{"location":"chemstation-api/methods-sequences/#organizing-data-files","title":"Organizing Data Files","text":"<pre><code># Set up data organization\nfrom datetime import datetime\n\n# Create project-specific subdirectory\nproject_name = \"Protein_Stability_Study\"\ndate_stamp = datetime.now().strftime(\"%Y%m%d\")\n\n# Use in sequence\napi.method.execution_method_with_parameters(\n    vial=15,\n    method_name=\"CE_Protein\",\n    sample_name=\"BSA_T0\",\n    subdirectory_name=f\"{project_name}_{date_stamp}\"\n)\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#sequence-templates","title":"Sequence Templates","text":"<p>Create reusable sequence templates:</p> <pre><code>def create_qc_sequence_template():\n    \"\"\"Create standard QC sequence template.\"\"\"\n\n    qc_positions = {\n        1: (\"System_Suitability\", \"CE_QC\"),\n        2: (\"Blank\", \"CE_QC\"),\n        3: (\"Standard_Low\", \"CE_QC\"),\n        4: (\"Standard_Mid\", \"CE_QC\"),\n        5: (\"Standard_High\", \"CE_QC\"),\n    }\n\n    for row, (vial, (sample_type, method)) in enumerate(qc_positions.items(), 1):\n        api.sequence.modify_sequence_row(\n            row=row,\n            vial_sample=str(vial),\n            method=method,\n            sample_name=f\"QC_{sample_type}\",\n            sample_info=\"Daily QC\"\n        )\n\n    api.sequence.save_sequence(\"QC_Template\")\n    print(\"QC template created - modify dates/info before running\")\n\ncreate_qc_sequence_template()\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#best-practices","title":"Best Practices","text":""},{"location":"chemstation-api/methods-sequences/#1-validate-before-execution","title":"1. Validate Before Execution","text":"<pre><code>def validate_sequence_ready(sequence_name):\n    \"\"\"Validate all sequence requirements before starting.\"\"\"\n\n    # Load sequence\n    api.sequence.load_sequence(sequence_name)\n\n    # Get vial list from sequence (manual check needed)\n    # For now, validate known vials\n    required_vials = [1, 2, 3, 10, 11, 12]  # Example\n\n    try:\n        # Check all vials present\n        api.validation.list_vial_validation(required_vials)\n\n        # Check all methods exist\n        methods = [\"CE_QC\", \"CE_Analysis\"]  # Example\n        for method in methods:\n            api.validation.validate_method_name(method)\n\n        # Check system ready\n        if api.system.status() != \"STANDBY\":\n            raise SystemError(\"System not in standby\")\n\n        print(f\"Sequence {sequence_name} ready to run!\")\n        return True\n\n    except Exception as e:\n        print(f\"Sequence validation failed: {e}\")\n        return False\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#2-error-recovery","title":"2. Error Recovery","text":"<pre><code>def run_sequence_with_recovery(sequence_name):\n    \"\"\"Run sequence with error recovery.\"\"\"\n\n    try:\n        api.sequence.load_sequence(sequence_name)\n        api.sequence.start()\n\n        while api.system.method_on():\n            status = api.system.status()\n\n            if status == \"ERROR\":\n                print(\"Error detected - attempting recovery\")\n                api.system.abort_run()\n                time.sleep(30)\n\n                # Try to resume\n                api.sequence.resume()\n\n            time.sleep(30)\n\n    except Exception as e:\n        print(f\"Sequence failed: {e}\")\n        api.system.abort_run()\n</code></pre>"},{"location":"chemstation-api/methods-sequences/#3-progress-tracking","title":"3. Progress Tracking","text":"<pre><code>def track_sequence_progress():\n    \"\"\"Track and log sequence progress.\"\"\"\n\n    sample_count = 0\n    start_time = time.time()\n\n    while api.system.method_on():\n        if api.system.status() == \"RUN\":\n            sample_count += 1\n            elapsed = (time.time() - start_time) / 60\n            remaining = api.system.get_remaining_analysis_time()\n\n            print(f\"Sample {sample_count} - \"\n                  f\"Elapsed: {elapsed:.1f} min - \"\n                  f\"Current remaining: {remaining:.1f} min\")\n\n        time.sleep(60)\n\n    total_time = (time.time() - start_time) / 60\n    print(f\"Sequence complete! {sample_count} samples in {total_time:.1f} minutes\")\n</code></pre> <p>You're ready!</p> <p>You now know how to create and run complex analytical sequences. Check out the Tutorials for complete workflow examples.</p>"},{"location":"chemstation-api/troubleshooting/","title":"ChemStation Troubleshooting Guide","text":"<p>Detailed troubleshooting for ChemStation-specific issues.</p>"},{"location":"chemstation-api/troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"chemstation-api/troubleshooting/#macro-not-running","title":"Macro Not Running","text":"<p>Symptoms: - <code>ConnectionError: Failed to establish communication with ChemStation</code> - No response to commands - Timeout errors on initialization</p> <p>Solutions:</p> <ol> <li> <p>Load the macro manually: <pre><code>In ChemStation command line:\nmacro \"C:\\full\\path\\to\\ChemPyConnect.mac\"; Python_Run\n</code></pre></p> </li> <li> <p>Verify macro is running: <pre><code>Check ChemStation command line for:\n\"Start Python communication\"\n</code></pre></p> </li> <li> <p>Auto-load macro on startup:</p> </li> <li>Edit ChemStation's <code>user.mac</code> file</li> <li>Add macro load command</li> <li>Restart ChemStation</li> </ol>"},{"location":"chemstation-api/troubleshooting/#file-access-issues","title":"File Access Issues","text":"<p>Symptoms: - <code>FileOperationError: Failed to write command</code> - Permission denied errors - Communication files not created</p> <p>Solutions:</p> <ol> <li> <p>Check directory permissions: <pre><code>import os\ncomm_dir = r\"...\\ChemstationAPI\\core\\communication_files\"\nprint(f\"Exists: {os.path.exists(comm_dir)}\")\nprint(f\"Writable: {os.access(comm_dir, os.W_OK)}\")\n</code></pre></p> </li> <li> <p>Run as Administrator:</p> </li> <li>Right-click Python/IDE</li> <li> <p>Select \"Run as administrator\"</p> </li> <li> <p>Antivirus interference:</p> </li> <li>Add communication directory to exclusions</li> <li>Disable real-time scanning temporarily</li> </ol>"},{"location":"chemstation-api/troubleshooting/#command-syntax-errors","title":"Command Syntax Errors","text":"<p>Symptoms: - <code>ChemstationError: Command failed: ERROR: ...</code> - Invalid command messages - Unexpected responses</p> <p>Solutions:</p> <ol> <li> <p>Check command syntax: <pre><code># Correct: Quotes around string parameters\napi.send('LoadMethod _METHPATH$, \"Method.M\"')\n\n# Wrong: Missing quotes\napi.send('LoadMethod _METHPATH$, Method.M')\n</code></pre></p> </li> <li> <p>Verify response variable: <pre><code># For return values, use response$\nvalue = api.send(\"response$ = _METHPATH$\")\n\n# Without response$, returns None\napi.send(\"LoadMethod ...\")  # No return value\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#method-issues","title":"Method Issues","text":""},{"location":"chemstation-api/troubleshooting/#method-not-found","title":"Method Not Found","text":"<p>Symptoms: - <code>ValidationError: Method 'X' not found</code> - Method loading fails - Case sensitivity issues</p> <p>Solutions:</p> <ol> <li> <p>Check exact filename: <pre><code>import os\nmethod_path = api.send(\"response$ = _METHPATH$\")\nmethods = [f for f in os.listdir(method_path) if f.endswith('.M')]\nprint(\"Available methods:\", methods)\n</code></pre></p> </li> <li> <p>Case-insensitive validation: <pre><code># The API handles case-insensitive matching\napi.validation.validate_method_name(\"method_name\")  # Without .M\n</code></pre></p> </li> <li> <p>Path issues: <pre><code># Use full path if needed\napi.method.load(\"MyMethod\", method_path=\"C:\\\\Methods\\\\Special\\\\\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#method-execution-failures","title":"Method Execution Failures","text":"<p>Symptoms: - <code>MethodError: Method failed to start</code> - Analysis doesn't begin - System remains in STANDBY</p> <p>Solutions:</p> <ol> <li> <p>Check prerequisites: <pre><code># Verify system ready\nprint(f\"Status: {api.system.status()}\")\nprint(f\"Method on: {api.system.method_on()}\")\n\n# Check vials loaded\napi.validation.vial_in_position(\"inlet\")\napi.validation.vial_in_position(\"outlet\")\n</code></pre></p> </li> <li> <p>Clear previous errors: <pre><code># Abort any stuck operations\napi.system.abort_run()\ntime.sleep(5)\n\n# Wait for ready\napi.system.wait_for_ready(60)\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#sequence-problems","title":"Sequence Problems","text":""},{"location":"chemstation-api/troubleshooting/#excel-import-failures","title":"Excel Import Failures","text":"<p>Symptoms: - <code>SequenceError: Failed to import from Excel</code> - Empty sequence after import - Column mapping errors</p> <p>Solutions:</p> <ol> <li> <p>Verify Excel format: <pre><code>import pandas as pd\n\n# Check your Excel file\ndf = pd.read_excel(\"samples.xlsx\")\nprint(\"Columns:\", df.columns.tolist())\nprint(\"First row:\", df.iloc[0].to_dict())\n</code></pre></p> </li> <li> <p>Column name matching: <pre><code># Exact column names required\napi.sequence.prepare_sequence_table(\n    excel_file_path=\"samples.xlsx\",\n    vial_column=\"Vial\",         # Must match exactly\n    method_column=\"Method\",     # Case sensitive\n    sample_name_column=\"Name\"   # No extra spaces\n)\n</code></pre></p> </li> <li> <p>Excel application issues:</p> </li> <li>Close Excel before import</li> <li>Ensure Excel is installed</li> <li>Try saving as .xlsx (not .xls)</li> </ol>"},{"location":"chemstation-api/troubleshooting/#sequence-execution-issues","title":"Sequence Execution Issues","text":"<p>Symptoms: - Sequence stops unexpectedly - Skips samples - Wrong vial loaded</p> <p>Solutions:</p> <ol> <li> <p>Monitor sequence state: <pre><code># Check sequence progress\nwhile api.system.method_on():\n    status = api.system.status()\n    rc_status = api.system.RC_status()\n    print(f\"Status: {status}, RC: {rc_status}\")\n    time.sleep(30)\n</code></pre></p> </li> <li> <p>Validate all vials: <pre><code># Before starting sequence\nvials_needed = [1, 2, 3, 10, 11, 12]  # Your vial list\napi.validation.list_vial_validation(vials_needed)\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#system-status-issues","title":"System Status Issues","text":""},{"location":"chemstation-api/troubleshooting/#incorrect-status-reporting","title":"Incorrect Status Reporting","text":"<p>Symptoms: - Status doesn't update - Wrong remaining time - Method appears stuck</p> <p>Solutions:</p> <ol> <li> <p>Force status update: <pre><code># Multiple status checks\nfor _ in range(3):\n    status = api.system.status()\n    print(f\"Status: {status}\")\n    time.sleep(1)\n</code></pre></p> </li> <li> <p>Direct register access: <pre><code># Get status from RC registers\nrc_state = api.send('response$ = ObjHdrText$(RCCE1Status[1], \"RunState\")')\nprint(f\"RC State: {rc_state}\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#timing-discrepancies","title":"Timing Discrepancies","text":"<p>Symptoms: - Incorrect analysis time - Progress calculation wrong - Early termination</p> <p>Solutions:</p> <pre><code># Robust time monitoring\ndef monitor_with_validation():\n    last_remaining = float('inf')\n    stuck_count = 0\n\n    while api.system.method_on():\n        remaining = api.system.get_remaining_analysis_time()\n\n        # Check if time is updating\n        if remaining == last_remaining:\n            stuck_count += 1\n            if stuck_count &gt; 10:\n                print(\"Warning: Time not updating\")\n        else:\n            stuck_count = 0\n\n        last_remaining = remaining\n        time.sleep(10)\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"chemstation-api/troubleshooting/#complete-system-reset","title":"Complete System Reset","text":"<pre><code>def full_system_reset():\n    \"\"\"Complete reset procedure.\"\"\"\n\n    print(\"Performing full system reset...\")\n\n    # 1. Abort any running operations\n    try:\n        api.system.abort_run()\n    except:\n        pass\n\n    # 2. Unload all vials\n    for position in [\"inlet\", \"outlet\", \"replenishment\"]:\n        try:\n            api.ce.unload_vial_from_position(position)\n        except:\n            pass\n\n    # 3. Reinitialize communication\n    time.sleep(5)\n    api = ChemstationAPI()\n\n    # 4. Verify ready state\n    if api.system.wait_for_ready(60):\n        print(\"System reset complete\")\n    else:\n        print(\"System reset failed - manual intervention required\")\n\n    return api\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#communication-recovery","title":"Communication Recovery","text":"<pre><code>def recover_communication():\n    \"\"\"Recover from communication failures.\"\"\"\n\n    # 1. Clear communication files\n    import os\n    comm_dir = \"path/to/communication_files\"\n\n    for filename in [\"command\", \"response\"]:\n        filepath = os.path.join(comm_dir, filename)\n        try:\n            os.remove(filepath)\n        except:\n            pass\n\n    # 2. Restart macro in ChemStation\n    print(\"In ChemStation, execute:\")\n    print('macro \"path\\\\ChemPyConnect.mac\"; Python_Stop')\n    print('macro \"path\\\\ChemPyConnect.mac\"; Python_Run')\n    input(\"Press Enter when complete...\")\n\n    # 3. Reconnect\n    try:\n        api = ChemstationAPI()\n        print(\"Communication restored\")\n        return api\n    except:\n        print(\"Communication recovery failed\")\n        return None\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"chemstation-api/troubleshooting/#slow-command-response","title":"Slow Command Response","text":"<p>Solutions:</p> <ol> <li> <p>Reduce retry delay: <pre><code>config = CommunicationConfig(\n    retry_delay=0.05,  # 50ms instead of 100ms\n    max_retries=20     # More retries with shorter delay\n)\n</code></pre></p> </li> <li> <p>Batch commands: <pre><code># Instead of multiple calls\n# api.send(\"command1\")\n# api.send(\"command2\")\n\n# Use macro for batch operations\napi.send('macro \"batch_commands.mac\"; execute_all')\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Solutions:</p> <ol> <li> <p>Clear old data: <pre><code># Periodically reinitialize\nif command_count &gt; 1000:\n    api = ChemstationAPI()  # Fresh connection\n</code></pre></p> </li> <li> <p>Monitor file sizes: <pre><code>import os\n\ndef check_comm_files():\n    for file in [\"command\", \"response\"]:\n        path = f\"communication_files/{file}\"\n        size = os.path.getsize(path) / 1024  # KB\n        if size &gt; 100:\n            print(f\"Warning: {file} is {size:.1f} KB\")\n</code></pre></p> </li> </ol>"},{"location":"chemstation-api/troubleshooting/#diagnostic-tools","title":"Diagnostic Tools","text":""},{"location":"chemstation-api/troubleshooting/#communication-monitor","title":"Communication Monitor","text":"<pre><code>def monitor_communication(duration=60):\n    \"\"\"Monitor communication for specified duration.\"\"\"\n\n    import time\n    from datetime import datetime\n\n    start = time.time()\n    command_count = 0\n    error_count = 0\n\n    while time.time() - start &lt; duration:\n        try:\n            # Test command\n            result = api.send(\"response$ = ACQSTATUS$\")\n            command_count += 1\n            print(f\"\\r{datetime.now()}: {result}\", end=\"\")\n        except Exception as e:\n            error_count += 1\n            print(f\"\\nError: {e}\")\n\n        time.sleep(1)\n\n    print(f\"\\n\\nSummary: {command_count} commands, {error_count} errors\")\n    print(f\"Success rate: {(command_count/(command_count+error_count))*100:.1f}%\")\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#register-browser","title":"Register Browser","text":"<pre><code># Add register browser to ChemStation menu\napi.system.add_register_reader()\n\n# Then in ChemStation:\n# Menu \u2192 Debug \u2192 Show Registers\n# Browse all system registers and values\n</code></pre>"},{"location":"chemstation-api/troubleshooting/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate before operations</li> <li>Use appropriate timeouts for different operations</li> <li>Implement retry logic for critical operations</li> <li>Monitor system state during long operations</li> <li>Keep communication files clean</li> <li>Document any custom macros or modifications</li> </ol> <p>When All Else Fails</p> <p>If persistent issues: 1. Restart ChemStation 2. Reboot computer 3. Check for ChemStation updates 4. Verify hardware connections 5. Contact Agilent support</p>"},{"location":"sia-api/basic-operations/","title":"Basic Operations","text":""},{"location":"sia-api/basic-operations/#device-initialization","title":"Device Initialization","text":""},{"location":"sia-api/basic-operations/#initial-setup","title":"Initial Setup","text":"<pre><code>from SIA_API.devices import SyringeController, ValveSelector\n\n# Initialize syringe pump\nsyringe = SyringeController(\n    port=\"COM3\",           # Serial port\n    syringe_size=1000,     # 1000 \u00b5L syringe\n    address=\"/1\",          # Device address (default)\n    baudrate=9600          # Communication speed (default)\n)\n\n# Initialize valve selector\nvalve = ValveSelector(\n    port=\"COM4\",          # Serial port\n    num_positions=8,      # 8-position valve\n    prefix=\"/Z\",          # Command prefix (VICI standard)\n    baudrate=9600         # Communication speed (default)\n)\n</code></pre>"},{"location":"sia-api/basic-operations/#testing-communication","title":"Testing Communication","text":"<pre><code># Test syringe communication\nresponse = syringe.send_command(\"?\", get_response=True)\nprint(f\"Syringe response: {response}\")\n\n# Test valve communication - move to position 1\nvalve.position(1)\nprint(\"Valve moved to position 1\")\n</code></pre>"},{"location":"sia-api/basic-operations/#syringe-control","title":"Syringe Control","text":""},{"location":"sia-api/basic-operations/#initialization","title":"Initialization","text":"<p>Always initialize the syringe before operations:</p> <pre><code># Move syringe to home position\nsyringe.initialize()\nprint(\"Syringe initialized\")\n\n# Check current volume tracking\nsyringe.print_volume_in_syringe()\n# Output: The current volume in the syringe is: 0 \u00b5l\n</code></pre>"},{"location":"sia-api/basic-operations/#flow-rate-settings","title":"Flow Rate Settings","text":"<pre><code># Set flow rate in \u00b5L/min\nsyringe.set_speed_uL_min(1500)    # 1.5 mL/min\n\n# Common speed settings\nsyringe.set_speed_uL_min(500)     # Slow/precise operations\nsyringe.set_speed_uL_min(2000)    # Normal operations  \nsyringe.set_speed_uL_min(5000)    # Fast transfers/air\n\n# Get current speed setting\ncurrent_speed = syringe.get_actual_set_speed()\nprint(f\"Current speed: {current_speed:.1f} \u00b5L/min\")\n</code></pre>"},{"location":"sia-api/basic-operations/#aspiration-drawing-fluid","title":"Aspiration (Drawing Fluid)","text":"<pre><code># Aspirate specific volume\nsyringe.aspirate(500)             # Draw 500 \u00b5L\n\n# Aspirate entire syringe capacity\nsyringe.aspirate()                # Fill to maximum\n\n# Non-blocking aspiration\nsyringe.aspirate(300, wait=False) # Returns immediately\n\n# Aspiration with progress bar\nsyringe.aspirate(800, show_progress=True)\n</code></pre>"},{"location":"sia-api/basic-operations/#dispensing","title":"Dispensing","text":"<pre><code># Dispense specific volume\nsyringe.dispense(250)             # Dispense 250 \u00b5L\n\n# Dispense all contents\nsyringe.dispense()                # Empty syringe completely\n\n# Non-blocking dispense\nsyringe.dispense(100, wait=False) # Returns immediately\n\n# Dispensing with progress bar\nsyringe.dispense(500, show_progress=True)\n</code></pre>"},{"location":"sia-api/basic-operations/#volume-tracking","title":"Volume Tracking","text":"<p>The API automatically tracks syringe contents:</p> <pre><code># Example sequence\nsyringe.initialize()              # Volume: 0 \u00b5L\nsyringe.aspirate(600)             # Volume: 600 \u00b5L\nsyringe.dispense(200)             # Volume: 400 \u00b5L\n\n# Current volume status\nsyringe.print_volume_in_syringe()\n# Output: The current volume in the syringe is: 400 \u00b5l\n\n# Attempting to exceed capacity raises error\ntry:\n    syringe.aspirate(800)         # Would exceed 1000 \u00b5L capacity!\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"sia-api/basic-operations/#valve-control","title":"Valve Control","text":""},{"location":"sia-api/basic-operations/#basic-positioning","title":"Basic Positioning","text":"<pre><code># Move to specific port\nvalve.position(1)                 # Move to port 1\nvalve.position(5)                 # Move to port 5\n\n# Reliable positioning with retry attempts\nvalve.position(3, num_attempts=5) # Try up to 5 times for reliability\n</code></pre>"},{"location":"sia-api/basic-operations/#position-validation","title":"Position Validation","text":"<pre><code># Systematic position testing\nprint(\"Testing valve positions...\")\nfor position in range(1, 9):     # Test positions 1-8\n    valve.position(position)\n    print(f\"Moved to position {position}\")\n    input(\"Confirm position and press Enter...\")\n</code></pre>"},{"location":"sia-api/basic-operations/#syringe-mounted-valve-control","title":"Syringe-Mounted Valve Control","text":"<p>For 3-way valves mounted directly on syringe:</p> <pre><code># Configure valve type\nsyringe.configuration_valve_type('3-Port')\n\n# Control valve positions\nsyringe.valve_in()                # Input position\nsyringe.valve_out()               # Output position  \nsyringe.valve_up()                # Up/bypass position\n</code></pre>"},{"location":"sia-api/basic-operations/#emergency-operations","title":"Emergency Operations","text":""},{"location":"sia-api/basic-operations/#emergency-stop","title":"Emergency Stop","text":"<pre><code># Immediate stop of all syringe operations\nsyringe.emergency_stop()\n</code></pre>"},{"location":"sia-api/basic-operations/#system-reset","title":"System Reset","text":"<pre><code># Complete system reset\nsyringe.initialize()              # Reset syringe to home\nvalve.position(1)                 # Move valve to safe position\n</code></pre>"},{"location":"sia-api/basic-operations/#basic-parameter-configuration","title":"Basic Parameter Configuration","text":""},{"location":"sia-api/basic-operations/#backlash-compensation","title":"Backlash Compensation","text":"<pre><code># Set backlash steps (0-31 standard mode, 0-248 high resolution)\nsyringe.set_backlash(15)          # Adjust for mechanical play\n</code></pre>"},{"location":"sia-api/basic-operations/#communication-timeouts","title":"Communication Timeouts","text":"<pre><code># Custom timeout for slow operations\nresponse = syringe.send_command(\n    \"Z\", \n    get_response=True, \n    response_timeout=10.0         # 10 second timeout\n)\n</code></pre>"},{"location":"sia-api/basic-operations/#error-handling","title":"Error Handling","text":""},{"location":"sia-api/basic-operations/#communication-errors","title":"Communication Errors","text":"<pre><code>import serial\n\ntry:\n    syringe.initialize()\nexcept serial.SerialException as e:\n    print(f\"Communication error: {e}\")\n    # Check COM port, cable connection, device power\n</code></pre>"},{"location":"sia-api/basic-operations/#volume-validation-errors","title":"Volume Validation Errors","text":"<pre><code>try:\n    syringe.aspirate(2000)        # Exceeds 1000 \u00b5L capacity\nexcept ValueError as e:\n    print(f\"Volume error: {e}\")\n    # Adjust volume or use multiple cycles\n</code></pre>"},{"location":"sia-api/basic-operations/#valve-position-errors","title":"Valve Position Errors","text":"<pre><code>try:\n    valve.position(15)            # Exceeds 8 positions\nexcept ValueError as e:\n    print(f\"Position error: {e}\")\n    # Check valve configuration\n</code></pre>"},{"location":"sia-api/basic-operations/#quick-reference","title":"Quick Reference","text":""},{"location":"sia-api/basic-operations/#essential-commands","title":"Essential Commands","text":"<pre><code># Syringe\nsyringe.initialize()                    # Required first step\nsyringe.set_speed_uL_min(speed)        # Set flow rate\nsyringe.aspirate(volume)               # Draw fluid\nsyringe.dispense(volume)               # Eject fluid\n\n# Valve  \nvalve.position(port_number)            # Select port\n\n# Status\nsyringe.print_volume_in_syringe()      # Check volume\nsyringe.get_actual_set_speed()         # Check speed\n</code></pre>"},{"location":"sia-api/basic-operations/#typical-operating-sequence","title":"Typical Operating Sequence","text":"<pre><code># 1. Initialize devices\nsyringe.initialize()\nvalve.position(1)\n\n# 2. Set operating parameters  \nsyringe.set_speed_uL_min(2000)\n\n# 3. Perform operations\nvalve.position(3)                      # Select source\nsyringe.aspirate(500)                  # Draw fluid\nvalve.position(6)                      # Select destination  \nsyringe.dispense(500)                  # Deliver fluid\n</code></pre> <p>For complex automated workflows and analytical procedures, see SI Workflows.</p>"},{"location":"sia-api/introduction/","title":"SI API Introduction","text":"<p>This SI implementation is based on concepts from the CoCoSoft framework developed for analytical automation (Horstkotte et al., 2015).</p>"},{"location":"sia-api/introduction/#what-is-sequential-injection-si","title":"What is Sequential Injection (SI)?","text":"<p>Sequential Injection is an automated liquid handling technique that provides:</p> <ul> <li>Precise volume control - Accurate aspiration and dispensing of exact volumes</li> <li>Automated sample preparation - Dilution, mixing, reagent addition</li> <li>Minimal reagent consumption - Microliter-scale operations</li> <li>High reproducibility - Computer-controlled operations eliminate manual errors</li> </ul> <p>Sequential Injection is an automated liquid handling technique that enables precise sample preparation before analysis by other analytical instruments.</p>"},{"location":"sia-api/introduction/#si-system-components","title":"SI System Components","text":""},{"location":"sia-api/introduction/#1-syringe-pump","title":"1. Syringe Pump","text":"<p>The precision liquid handling device with bidirectional operation:</p> <ul> <li>Variable volumes: 100-5000 \u00b5L capacity</li> <li>High resolution: Stepper motor provides precise control (e.g., 0.33 \u00b5L resolution for 1000 \u00b5L syringe)</li> <li>Bidirectional flow: Both aspiration and dispensing operations</li> </ul>"},{"location":"sia-api/introduction/#2-multi-position-valve","title":"2. Multi-Position Valve","text":"<p>Selector valve that routes fluids between different lines:</p> <ul> <li>Multiple positions: Typically 6, 8, 10, or 12 ports</li> <li>Low dead volume: Minimizes sample carryover</li> <li>Fast switching: Computer-controlled position changes</li> </ul>"},{"location":"sia-api/introduction/#3-holding-coil","title":"3. Holding Coil","text":"<p>Critical component connecting syringe and valve:</p> <ul> <li>Purpose: Tube between syringe and valve preventing contamination of syringe with fluids from valve ports</li> <li>Function: Contains carrier medium that transfers force from syringe to valve without direct fluid contact</li> <li>Typical volume: 500-2000 \u00b5L</li> </ul>"},{"location":"sia-api/introduction/#4-flow-lines","title":"4. Flow Lines","text":"<p>Connection tubing that links valve ports to:</p> <ul> <li>Sample containers and reagent reservoirs  </li> <li>Waste collection and air supply</li> <li>Analytical instruments (CE, HPLC, etc.)</li> <li>Various buffers and cleaning solutions</li> </ul> <p>Small air bubbles can be used to separate different liquids within the holding coil and transfer lines, preventing unwanted mixing of solutions.</p>"},{"location":"sia-api/introduction/#how-si-works","title":"How SI Works","text":"<pre><code>graph LR\n    A[Syringe Pump] &lt;---&gt; B[Holding Coil] &lt;---&gt; C[Selection Valve]\n    C ---&gt; D[Port 1: Waste]\n    C &lt;---&gt; E[Port 2: Air]\n    C &lt;--- F[Port 3: DI Water] \n    C &lt;--- G[Port 4: Sample]\n    C &lt;--- H[Port 5: Reagent]\n    C &lt;---&gt; I[Port 6: To CE]</code></pre> <p>Flow Direction Legend: - Dispense only: Waste, To CE (outbound flow) - Aspirate only: Air, Reagents, DI water (inbound flow) - Bidirectional: Samples (can be aspirated and returned)</p>"},{"location":"sia-api/introduction/#basic-operation-principles","title":"Basic Operation Principles","text":"<p>Simple Transfer Process: 1. Valve selects source port (e.g., reagent reservoir) 2. Syringe aspirates desired volume  3. Valve switches to destination port (e.g., sample vial) 4. Syringe dispenses the volume</p> <p>Fluid Isolation: Air bubbles can separate different liquids to prevent cross-contamination during complex operations.</p>"},{"location":"sia-api/introduction/#holding-coil-function","title":"Holding Coil Function","text":"<p>The holding coil serves as an intermediary between the syringe and valve:</p> <pre><code>[Syringe] \u2190 [Pushing Liquid] \u2190 [Air Bubble] \u2190 [Sample/Reagent] \u2190 [Valve Port]\n</code></pre> <ul> <li>Pushing liquid (typically air or inert solution) remains in holding coil</li> <li>Air bubble separates pushing liquid from aspirated fluid</li> <li>Sample/reagent flows from valve port without contaminating syringe</li> </ul>"},{"location":"sia-api/introduction/#key-advantages","title":"Key Advantages","text":""},{"location":"sia-api/introduction/#contamination-prevention","title":"Contamination Prevention","text":"<ul> <li>Holding coil prevents sample-to-syringe contamination</li> <li>Air bubbles separate incompatible solutions</li> <li>Easy cleaning protocols between different samples</li> </ul>"},{"location":"sia-api/introduction/#precision-and-reproducibility","title":"Precision and Reproducibility","text":"<ul> <li>Computer-controlled volumes (\u00b10.1% accuracy)</li> <li>Consistent flow rates and timing</li> <li>Eliminates manual pipetting errors</li> </ul>"},{"location":"sia-api/introduction/#automation-capability","title":"Automation Capability","text":"<ul> <li>Unattended operation for multiple samples</li> <li>Integration with analytical instruments</li> <li>Programmable sequences for complex preparations</li> </ul>"},{"location":"sia-api/introduction/#when-to-use-si","title":"When to Use SI","text":"<p>SI is ideal for:</p> <p>\u2705 Sample preparation - Serial dilutions, matrix matching, buffer exchange \u2705 Reagent addition - Internal standards, derivatization, precipitation \u2705 Sample introduction - Controlled injection, sample stacking \u2705 System maintenance - Automated cleaning, line conditioning</p>"},{"location":"sia-api/port-configuration/","title":"System Configuration","text":""},{"location":"sia-api/port-configuration/#overview","title":"Overview","text":"<p>System configuration centralizes all operational parameters - port assignments, volumes, flow rates, and vial positions - in one place for consistent settings across all workflow methods.</p>"},{"location":"sia-api/port-configuration/#default-configuration","title":"Default Configuration","text":"<pre><code>@dataclass\nclass SystemConfig:\n    # Port assignments\n    waste_port: int = 1\n    air_port: int = 2\n    di_port: int = 3\n    transfer_port: int = 4\n    meoh_port: int = 5\n\n    # System volumes (\u00b5L)\n    holding_coil_volume: int = 1000\n    transfer_line_volume: int = 550\n    bubble_volume: int = 15\n\n    # Flow rates (\u00b5L/min)\n    speed_air: int = 5000\n    speed_fast: int = 3500\n    speed_normal: int = 2000\n    speed_slow: int = 1500\n\n    # Standard vial positions\n    wash_vial: int = 48\n    dry_vial: int = 49\n    waste_vial: int = 50\n</code></pre>"},{"location":"sia-api/port-configuration/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from SIA_API.methods import create_custom_config\n\n# Override specific parameters\ncustom_config = create_custom_config(\n    waste_port=8,\n    transfer_port=1,\n    holding_coil_volume=1500,\n    speed_normal=1800,\n    wash_vial=47\n)\n\n# Use in workflow\nworkflow = PreparedSIAMethods(\n    chemstation_controller=ce_api,\n    syringe_device=syringe,\n    valve_device=valve,\n    ports_config=custom_config\n)\n</code></pre>"},{"location":"sia-api/port-configuration/#key-parameters","title":"Key Parameters","text":"<p>Ports:     - waste_port: Most frequent access (position 1 recommended)     - air_port: Segmentation and cleaning     - transfer_port: Connection to analytical instrument     - di_port/meoh_port: Primary solvents</p> <p>Volumes: - holding_coil_volume: Tube between syringe and valve (500-2000 \u00b5L) - transfer_line_volume: Dead volume to dispensing point (measure experimentally) - bubble_volume: Air separation bubbles (10-50 \u00b5L)</p> <p>Speeds: - speed_air: Fast air operations (5000 \u00b5L/min) - speed_fast: Rapid transfers (3500 \u00b5L/min)  - speed_normal: Standard dispensing (2000 \u00b5L/min) - speed_slow: Precise operations (1500 \u00b5L/min)</p> <p>Vials: - wash_vial: Needle cleaning (typically 48) - waste_vial: System waste collection (typically 50)</p>"},{"location":"sia-api/port-configuration/#configuration-validation","title":"Configuration Validation","text":"<pre><code>from SIA_API.methods import validate_config\n\ntry:\n    validate_config(custom_config)\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre> <p>Checks for duplicate ports, valid ranges, and parameter consistency.</p>"},{"location":"sia-api/troubleshooting/","title":"Troubleshooting","text":""},{"location":"sia-api/troubleshooting/#communication-errors","title":"Communication Errors","text":""},{"location":"sia-api/troubleshooting/#serialexception-could-not-open-port","title":"SerialException: Could not open port","text":"<p>Cause: COM port access issues <pre><code># Error message\nSerialException: could not open port 'COM3': Access is denied\n</code></pre></p> <p>Solutions:     - Close other applications using the port (HyperTerminal, Arduino IDE)     - Run Python as Administrator     - Check Device Manager for port conflicts     - Verify correct COM port number     - Check cable connections and device power</p>"},{"location":"sia-api/troubleshooting/#timeouterror-no-response-from-device","title":"TimeoutError: No response from device","text":"<p>Cause: Device not responding within timeout period</p> <p>Solutions: - Check device power and connections - Verify baud rate settings (9600 vs 19200) - Increase timeout in send_command() - Test with device manufacturer software - Check for loose serial connections</p>"},{"location":"sia-api/troubleshooting/#communication-test","title":"Communication Test","text":"<pre><code># Test syringe communication\ntry:\n    response = syringe.send_command(\"?\", get_response=True)\n    print(f\"Syringe OK: {response}\")\nexcept Exception as e:\n    print(f\"Syringe error: {e}\")\n\n# Test valve communication  \ntry:\n    valve.position(1)\n    print(\"Valve OK\")\nexcept Exception as e:\n    print(f\"Valve error: {e}\")\n</code></pre>"},{"location":"sia-api/troubleshooting/#volume-tracking-issues","title":"Volume Tracking Issues","text":""},{"location":"sia-api/troubleshooting/#volume-counter-mismatch","title":"Volume Counter Mismatch","text":"<p>Problem: Syringe contains liquid but volume counter shows 0 after initialization</p> <p>Cause: Manual operations or interrupted sequences leave liquid in syringe, but initialization resets counter to 0</p> <p>How initialization works: <pre><code>syringe.initialize()  # Automatically sets valve to position 1 (waste)\n                     # Dispenses any existing content to waste\n                     # Moves syringe to home position\n                     # Resets volume counter to 0\n</code></pre></p> <p>Solutions:</p> <p>Option 1: Normal initialization (recommended) <pre><code>valve.position(1)     # Ensure waste position (done automatically)\nsyringe.initialize()  # This handles everything automatically\n</code></pre></p> <p>Option 2: Manual pre-emptying if unsure <pre><code>valve.position(1)     # Waste port\nsyringe.dispense()    # Empty completely first\n</code></pre></p> <p>Option 3: Manual volume correction (if known) <pre><code># If you know actual contents, manually set counter\nsyringe.volume_counter = actual_volume  # Set to known value\n</code></pre></p>"},{"location":"sia-api/troubleshooting/#volume-overflow-errors","title":"Volume Overflow Errors","text":"<pre><code># Error message\nValueError: The drawn volume in the syringe would be 1200 \u00b5l, which exceeds the syringe capacity of 1000 \u00b5l!\n</code></pre> <p>Solutions: - Check current volume: <code>syringe.print_volume_in_syringe()</code> - Use multiple cycles for large volumes - Empty syringe before large aspiration: <code>syringe.dispense()</code></p>"},{"location":"sia-api/troubleshooting/#volume-underflow-errors","title":"Volume Underflow Errors","text":"<pre><code># Error message  \nValueError: The expelled volume in the syringe would be negative!\n</code></pre> <p>Solutions: - Check actual syringe contents - Re-initialize if counter is wrong: <code>syringe.initialize()</code> - Use <code>syringe.dispense()</code> without volume to empty completely</p>"},{"location":"sia-api/troubleshooting/#flow-rate-errors","title":"Flow Rate Errors","text":""},{"location":"sia-api/troubleshooting/#speed-out-of-range","title":"Speed Out of Range","text":"<pre><code># Error messages\nValueError: Set flow rate too small! Minimum allowed rate is 50.0 \u00b5L/min\nValueError: Set flow rate too large! Maximum allowed rate is 60000.0 \u00b5L/min\n</code></pre> <p>Solutions: - Check syringe size - limits depend on capacity - Use appropriate speed for syringe size:   - 100 \u00b5L syringe: 5-6000 \u00b5L/min   - 1000 \u00b5L syringe: 50-60000 \u00b5L/min   - 5000 \u00b5L syringe: 250-300000 \u00b5L/min</p>"},{"location":"sia-api/troubleshooting/#valve-position-errors","title":"Valve Position Errors","text":""},{"location":"sia-api/troubleshooting/#invalid-position","title":"Invalid Position","text":"<pre><code># Error message\nValueError: Position 10 is out of range (1-8)\n</code></pre> <p>Solutions: - Check valve configuration: number of positions - Verify position commands are within range - Use <code>valve.position(pos, num_attempts=5)</code> for reliability</p>"},{"location":"sia-api/troubleshooting/#valve-not-moving","title":"Valve Not Moving","text":"<p>Symptoms: No error but valve doesn't change position</p> <p>Solutions: - Increase number of attempts: <code>valve.position(1, num_attempts=5)</code> - Check valve power supply - Test with manufacturer software - Verify command protocol (prefix/suffix)</p>"},{"location":"sia-api/troubleshooting/#system-performance-issues","title":"System Performance Issues","text":""},{"location":"sia-api/troubleshooting/#slow-operations","title":"Slow Operations","text":"<p>Causes: </p> <ul> <li>Transfer lines too long (air compression)</li> <li>Speed set too low</li> <li>Air bubbles in liquid lines</li> </ul> <p>Solutions:</p> <ul> <li>Minimize air in transfer lines</li> <li>Replace air with liquid for long lines  </li> <li>Increase speed for non-critical operations</li> <li>Use shorter tubing when possible</li> </ul>"},{"location":"sia-api/troubleshooting/#inaccurate-volumes","title":"Inaccurate Volumes","text":"<p>Causes:</p> <ul> <li>Air compression in long lines</li> <li>Dead volume not accounted for</li> <li>Speed too fast for viscous liquids</li> </ul> <p>Solutions: - Measure actual transfer volumes experimentally - Use appropriate speeds for liquid viscosity - Account for dead volumes in calculations - Minimize air gaps in liquid lines</p>"},{"location":"sia-api/troubleshooting/#cross-contamination","title":"Cross-Contamination","text":"<p>Causes: - Insufficient cleaning between samples - Air bubbles not separating liquids properly - Inadequate flushing volumes</p> <p>Solutions: - Increase bubble sizes between incompatible liquids - Use adequate cleaning volumes - Clean needle between sample types - Sequence from cleanest to dirtiest samples</p>"},{"location":"sia-api/troubleshooting/#quick-fixes","title":"Quick Fixes","text":"<p>Emergency Reset <pre><code># Complete system reset\nsyringe.emergency_stop()  # Stop all operations\nvalve.position(1)         # Safe position\nsyringe.initialize()      # Reset to home\n</code></pre></p>"},{"location":"sia-api/workflows/","title":"SI Workflows","text":""},{"location":"sia-api/workflows/#overview","title":"Overview","text":"<p>SI Workflows provide high-level automation through the <code>PreparedSIAMethods</code> class. These pre-built methods combine syringe and valve operations into complete procedures and integrate with ChemStation CE systems.</p>"},{"location":"sia-api/workflows/#setup","title":"Setup","text":"<pre><code>from ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize components\nce_api = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\n\n# Create workflow controller\nworkflow = PreparedSIAMethods(\n    chemstation_controller=ce_api,\n    syringe_device=syringe,\n    valve_device=valve\n)\n</code></pre>"},{"location":"sia-api/workflows/#available-methods","title":"Available Methods","text":""},{"location":"sia-api/workflows/#system-operations","title":"System Operations","text":"<p><code>system_initialization_and_cleaning(waste_vial=50, bubble=20)</code> Complete system preparation and cleaning procedure: - Syringe initialization to home position - Loop flushing with air - Methanol cleaning cycle followed by DI water rinsing - Transfer line conditioning - Creation of separating bubbles for contamination prevention</p> <p><code>load_to_replenishment(vial_number)</code> Load specified vial from carousel to CE replenishment position for filling operations. Essential for automated vial handling.</p> <p><code>unload_from_replenishment()</code> Return vial from replenishment position back to carousel after processing is complete.</p> <p><code>clean_needle(volume_flush, wash_vial=48)</code> Clean dispensing needle to prevent cross-contamination: - Partial dispensing in wash vial to remove sample residue - Remainder dispensed in air to clear needle completely - Critical for preventing carryover between different samples</p>"},{"location":"sia-api/workflows/#continuous-flow-operations","title":"Continuous Flow Operations","text":"<p><code>prepare_continuous_flow(solvent_port, waste_vial=50, bubble_volume=10, transfer_coil_flush=500, speed=1500)</code> Prepare system for continuous flow operations: - Fill holding coil and transfer line with solvent - Create separating bubbles to prevent contamination - Optimize system for rapid sequential dispensing of same solvent - One-time setup for processing multiple vials</p> <p><code>continuous_fill(vial, volume, solvent_port, flush_needle=None, speed=2000)</code> Execute continuous flow filling operation: - Fast dispensing through pre-filled solvent line - Automatic volume management with multiple cycles for large volumes - Optional needle cleaning between vials - Ideal for high-throughput operations</p> <p>Key advantages: Fastest method for multiple vials with same solvent. Transfer line pre-filled with solvent eliminates air compression issues and enables rapid sequential dispensing.</p>"},{"location":"sia-api/workflows/#batch-flow-operations","title":"Batch Flow Operations","text":"<p><code>prepare_batch_flow(solvent_port, waste_vial=50, bubble_volume=10, transfer_coil_volume=550, speed=1500)</code> Prepare system for batch operations: - Fill transfer line with air instead of solvent - Set up for independent, air-driven dispensing operations - Each operation is completely separate from previous ones - Easy solvent changeover between operations</p> <p><code>batch_fill(vial, volume, solvent_port, transfer_line_volume=550, bubble_volume=10, flush_needle=None, unload=True, wait=None)</code> Execute single batch filling operation: - Air-driven dispensing where air pushes solvent through transfer line - Complete independence between operations - Automatic air bubble creation for solvent isolation - Optional wait time after dispensing for settling</p> <p><code>batch_fill_multiple_solvents(vial, solvent_ports, volumes, air_push_volume=15, solvent_speeds=None, flush_needle=None)</code> Fill single vial with multiple solvents in sequence:</p> <ul> <li>Sequential aspiration of different solvents from multiple ports</li> <li>Air bubbles automatically separate each solvent in holding coil</li> <li>Final high-speed air push delivers complete mixture to vial</li> <li>Individual speed control for each solvent type (viscosity compensation)</li> </ul> <p>Key advantages: Complete contamination prevention, easy solvent changeover, ideal for different solvents per vial or single operations.</p>"},{"location":"sia-api/workflows/#sample-processing","title":"Sample Processing","text":"<p><code>homogenize_sample(vial, speed, homogenization_time, flush_needle=None, air_speed=5000)</code> Pneumatic mixing of sample in vial: - Controlled air bubbling through sample for thorough mixing - Adjustable speed (bubbling rate) and duration - Particularly effective for viscous samples or protein solutions - Air-driven mixing prevents mechanical contamination - Optional needle cleaning after mixing</p> <p>Parameters: - <code>speed</code>: Bubbling rate in \u00b5L/min (typically 500-2000) - <code>homogenization_time</code>: Duration in seconds (typically 15-60) - <code>air_speed</code>: Rate for air aspiration (typically 5000 \u00b5L/min for fast air handling)</p>"},{"location":"sia-api/workflows/#ce-integration","title":"CE Integration","text":"<p>Carousel Control: - Automatic vial loading/unloading - Precise positioning for filling - Collision avoidance</p> <p>Analysis Control: - Start CE analysis after sample preparation - Method selection and sample tracking - Automated sequence execution</p>"},{"location":"sia-api/workflows/#method-selection","title":"Method Selection","text":"Operation Continuous Flow Batch Flow Multiple vials, same solvent \u2713 Fast \u2717 Slower Different solvents \u2717 Difficult \u2713 Easy Contamination sensitive \u2717 Higher risk \u2713 Lower risk Single vial \u2717 Overkill \u2713 Ideal"},{"location":"tutorials/batch-processing/","title":"Batch Processing Tutorial","text":"<p>Learn how to analyze multiple samples automatically using sequences and SIA sample preparation.</p>"},{"location":"tutorials/batch-processing/#overview","title":"Overview","text":"<p>In this tutorial, we'll: - Prepare multiple samples with different dilutions - Create a sequence from Excel data - Run automated batch analysis - Handle different sample types - Monitor batch progress</p>"},{"location":"tutorials/batch-processing/#scenario","title":"Scenario","text":"<p>We'll analyze 10 protein samples: - 2 standards (known concentration) - 6 unknown samples - 2 QC samples - Each requires different dilution factors</p>"},{"location":"tutorials/batch-processing/#step-1-prepare-excel-file","title":"Step 1: Prepare Excel File","text":"<p>Create <code>batch_samples.xlsx</code> with this structure:</p> Vial Method Sample_Name Dilution Type 10 CE_Protein STD_Low 5 Standard 11 CE_Protein STD_High 20 Standard 12 CE_Protein Sample_001 10 Unknown 13 CE_Protein Sample_002 10 Unknown 14 CE_Protein Sample_003 15 Unknown 15 CE_Protein QC_001 10 QC 16 CE_Protein Sample_004 10 Unknown 17 CE_Protein Sample_005 12 Unknown 18 CE_Protein Sample_006 8 Unknown 19 CE_Protein QC_002 10 QC"},{"location":"tutorials/batch-processing/#step-2-initialize-system","title":"Step 2: Initialize System","text":"<pre><code>import pandas as pd\nimport time\nfrom datetime import datetime\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\n# Initialize all components\nprint(\"=== Batch Processing Tutorial ===\\n\")\nprint(f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\")\n\n# Connect to devices\nce_api = ChemstationAPI()\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n# System initialization\nprint(\"\\nInitializing system...\")\nworkflow.system_initialization_and_cleaning()\nprint(\"\u2713 System ready\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-3-load-and-validate-sample-data","title":"Step 3: Load and Validate Sample Data","text":"<pre><code># Load sample information\nprint(\"\\nLoading sample data...\")\nsamples_df = pd.read_excel(\"batch_samples.xlsx\")\nprint(f\"\u2713 Loaded {len(samples_df)} samples\")\n\n# Display sample summary\nprint(\"\\nSample Summary:\")\nprint(f\"Standards: {len(samples_df[samples_df['Type'] == 'Standard'])}\")\nprint(f\"Unknowns: {len(samples_df[samples_df['Type'] == 'Unknown'])}\")\nprint(f\"QC: {len(samples_df[samples_df['Type'] == 'QC'])}\")\n\n# Validate all vials are present\nprint(\"\\nValidating vials...\")\nmissing_vials = []\nfor vial in samples_df['Vial']:\n    try:\n        ce_api.validation.validate_vial_in_system(int(vial))\n    except:\n        missing_vials.append(vial)\n\nif missing_vials:\n    print(f\"\u2717 Missing vials: {missing_vials}\")\n    print(\"Please load all vials before continuing\")\n    exit(1)\nelse:\n    print(\"\u2713 All vials present\")\n\n# Validate method\nmethod_name = samples_df['Method'].iloc[0]\nce_api.validation.validate_method_name(method_name)\nprint(f\"\u2713 Method '{method_name}' validated\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-4-automated-sample-preparation","title":"Step 4: Automated Sample Preparation","text":"<pre><code>def prepare_samples(samples_df):\n    \"\"\"Prepare all samples with specified dilutions.\"\"\"\n\n    print(\"\\n=== Sample Preparation ===\")\n\n    # Prepare for continuous flow with DI water\n    workflow.prepare_continuous_flow(solvent_port=3, speed=2000)\n\n    preparation_log = []\n\n    for idx, row in samples_df.iterrows():\n        vial = int(row['Vial'])\n        dilution = int(row['Dilution'])\n        sample_name = row['Sample_Name']\n        sample_type = row['Type']\n\n        print(f\"\\nPreparing {sample_name} (Vial {vial})\")\n        print(f\"Type: {sample_type}, Dilution: 1:{dilution}\")\n\n        # Calculate volumes (1500 \u00b5L final volume)\n        final_volume = 1500\n        sample_volume = final_volume / dilution\n        diluent_volume = final_volume - sample_volume\n\n        # Add diluent\n        workflow.continuous_fill(\n            vial=vial,\n            volume=diluent_volume,\n            solvent_port=3,\n            flush_needle=None  # No wash between same solvent\n        )\n\n        # Log preparation\n        prep_info = {\n            'vial': vial,\n            'sample': sample_name,\n            'sample_vol': sample_volume,\n            'diluent_vol': diluent_volume,\n            'time': datetime.now()\n        }\n        preparation_log.append(prep_info)\n\n        print(f\"\u2713 Added {diluent_volume:.0f} \u00b5L diluent\")\n        print(f\"  \u2192 Add {sample_volume:.0f} \u00b5L sample manually\")\n\n    # Clean needle after all dilutions\n    workflow.clean_needle(volume_flush=100, wash_vial=48)\n\n    return preparation_log\n\n# Prepare all samples\nprep_log = prepare_samples(samples_df)\n\nprint(\"\\n\u26a0 Add samples to vials according to the volumes shown above\")\ninput(\"Press Enter when all samples are added...\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-5-mix-all-samples","title":"Step 5: Mix All Samples","text":"<pre><code># Homogenize all samples\nprint(\"\\n=== Sample Mixing ===\")\n\nfor idx, row in samples_df.iterrows():\n    vial = int(row['Vial'])\n    sample_name = row['Sample_Name']\n\n    print(f\"Mixing {sample_name}...\", end='')\n\n    workflow.homogenize_sample(\n        vial=vial,\n        speed=1000,\n        homogenization_time=20,\n        flush_needle=None,  # Wash at end\n        unload=True\n    )\n\n    print(\" \u2713\")\n\n# Final needle wash\nworkflow.clean_needle(volume_flush=100, wash_vial=48)\nprint(\"\\n\u2713 All samples prepared and mixed\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-6-create-ce-sequence","title":"Step 6: Create CE Sequence","text":"<pre><code># Create sequence in ChemStation\nprint(\"\\n=== Creating CE Sequence ===\")\n\n# Import sequence from Excel\nce_api.sequence.prepare_sequence_table(\n    excel_file_path=\"batch_samples.xlsx\",\n    sequence_name=\"Batch_Tutorial\",\n    vial_column=\"Vial\",\n    method_column=\"Method\",\n    sample_name_column=\"Sample_Name\"\n)\n\nprint(\"\u2713 Sequence created from Excel\")\n\n# Add sample info to sequence\nfor idx, row in samples_df.iterrows():\n    ce_api.sequence.modify_sequence_row(\n        row=idx + 1,\n        sample_info=f\"Type: {row['Type']}, Dilution: 1:{row['Dilution']}\"\n    )\n\n# Save sequence\nsequence_name = f\"Batch_{datetime.now().strftime('%Y%m%d_%H%M')}\"\nce_api.sequence.save_sequence(sequence_name)\nprint(f\"\u2713 Sequence saved as: {sequence_name}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-7-pre-analysis-setup","title":"Step 7: Pre-Analysis Setup","text":"<pre><code># Condition system before batch run\nprint(\"\\n=== Pre-Analysis Setup ===\")\n\n# Load buffer vials\nprint(\"Loading buffer vials...\")\nce_api.ce.load_vial_to_position(1, \"inlet\")  # Running buffer\nce_api.ce.load_vial_to_position(48, \"outlet\")  # Waste\n\n# Extended conditioning for batch run\nprint(\"Conditioning capillary (3 minutes)...\")\nce_api.ce.flush_capillary(time_flush=180.0)\n\n# Return vials\nce_api.ce.unload_vial_from_position(\"inlet\")\nce_api.ce.unload_vial_from_position(\"outlet\")\n\nprint(\"\u2713 System conditioned and ready\")\n</code></pre>"},{"location":"tutorials/batch-processing/#step-8-run-batch-analysis","title":"Step 8: Run Batch Analysis","text":"<pre><code># Start batch analysis\nprint(\"\\n=== Starting Batch Analysis ===\")\nprint(f\"Sequence: {sequence_name}\")\nprint(f\"Samples: {len(samples_df)}\")\nprint(f\"Estimated time: {len(samples_df) * 15} minutes\")\n\n# Start sequence\nce_api.sequence.start()\nprint(\"\u2713 Sequence started\")\n\n# Create analysis log\nanalysis_log = {\n    'start_time': datetime.now(),\n    'samples_completed': 0,\n    'current_sample': '',\n    'errors': []\n}\n</code></pre>"},{"location":"tutorials/batch-processing/#step-9-monitor-batch-progress","title":"Step 9: Monitor Batch Progress","text":"<pre><code>def monitor_batch_analysis(ce_api, samples_df, analysis_log):\n    \"\"\"Monitor batch analysis with progress tracking.\"\"\"\n\n    print(\"\\n=== Monitoring Progress ===\")\n    print(\"Press Ctrl+C to stop monitoring (analysis continues)\\n\")\n\n    try:\n        last_status = \"\"\n        sample_start_time = time.time()\n\n        while True:\n            # Get current status\n            status = ce_api.system.status()\n            rc_status = ce_api.system.RC_status()\n\n            # Detect sample changes\n            if status == \"RUN\" and last_status != \"RUN\":\n                analysis_log['samples_completed'] += 1\n                sample_start_time = time.time()\n\n                if analysis_log['samples_completed'] &lt;= len(samples_df):\n                    current_sample = samples_df.iloc[\n                        analysis_log['samples_completed'] - 1\n                    ]['Sample_Name']\n                    analysis_log['current_sample'] = current_sample\n                    print(f\"\\n\u2192 Analyzing {current_sample}\")\n\n            # Display progress\n            if ce_api.system.method_on():\n                remaining = ce_api.system.get_remaining_analysis_time()\n                elapsed = (time.time() - sample_start_time) / 60\n\n                print(f\"\\r[{analysis_log['samples_completed']}/{len(samples_df)}] \"\n                      f\"{analysis_log['current_sample']} - \"\n                      f\"Status: {status} - \"\n                      f\"Remaining: {remaining:.1f} min\", end='')\n            else:\n                # Check if sequence is complete\n                if analysis_log['samples_completed'] &gt;= len(samples_df):\n                    print(\"\\n\\n\u2713 Batch analysis complete!\")\n                    break\n                else:\n                    print(f\"\\rWaiting for next sample...\", end='')\n\n            last_status = status\n            time.sleep(5)\n\n    except KeyboardInterrupt:\n        print(\"\\n\\nMonitoring stopped (analysis continues)\")\n\n    return analysis_log\n\n# Monitor the batch\nanalysis_log = monitor_batch_analysis(ce_api, samples_df, analysis_log)\n</code></pre>"},{"location":"tutorials/batch-processing/#step-10-post-analysis-summary","title":"Step 10: Post-Analysis Summary","text":"<pre><code># Generate analysis summary\nprint(\"\\n=== Analysis Summary ===\")\n\nanalysis_log['end_time'] = datetime.now()\ntotal_time = (analysis_log['end_time'] - analysis_log['start_time']).seconds / 60\n\nprint(f\"Start Time: {analysis_log['start_time'].strftime('%H:%M')}\")\nprint(f\"End Time: {analysis_log['end_time'].strftime('%H:%M')}\")\nprint(f\"Total Duration: {total_time:.1f} minutes\")\nprint(f\"Samples Completed: {analysis_log['samples_completed']}/{len(samples_df)}\")\n\n# Calculate statistics\navg_time = total_time / analysis_log['samples_completed'] if analysis_log['samples_completed'] &gt; 0 else 0\nprint(f\"Average Time per Sample: {avg_time:.1f} minutes\")\n\n# Sample type breakdown\nif analysis_log['samples_completed'] == len(samples_df):\n    print(\"\\nSamples Analyzed:\")\n    for sample_type in samples_df['Type'].unique():\n        count = len(samples_df[samples_df['Type'] == sample_type])\n        print(f\"  {sample_type}: {count}\")\n\n# Save summary report\nreport_filename = f\"batch_report_{datetime.now().strftime('%Y%m%d_%H%M')}.txt\"\nwith open(report_filename, 'w') as f:\n    f.write(\"Batch Analysis Report\\n\")\n    f.write(\"=\" * 50 + \"\\n\")\n    f.write(f\"Date: {datetime.now().strftime('%Y-%m-%d')}\\n\")\n    f.write(f\"Sequence: {sequence_name}\\n\")\n    f.write(f\"Total Samples: {len(samples_df)}\\n\")\n    f.write(f\"Duration: {total_time:.1f} minutes\\n\")\n    f.write(\"\\nSample Details:\\n\")\n    for _, row in samples_df.iterrows():\n        f.write(f\"  {row['Sample_Name']} - Vial {row['Vial']} - \"\n                f\"Dilution 1:{row['Dilution']}\\n\")\n\nprint(f\"\\n\u2713 Report saved as: {report_filename}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#complete-batch-processing-script","title":"Complete Batch Processing Script","text":"<pre><code># Complete Batch Processing Script\nimport pandas as pd\nimport time\nfrom datetime import datetime\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\ndef run_batch_analysis(excel_file=\"batch_samples.xlsx\"):\n    \"\"\"Complete batch analysis with SIA preparation.\"\"\"\n\n    # Initialize\n    ce_api = ChemstationAPI()\n    syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n    valve = ValveSelector(port=\"COM4\", num_positions=8)\n    workflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n    # System preparation\n    workflow.system_initialization_and_cleaning()\n\n    # Load samples\n    samples_df = pd.read_excel(excel_file)\n\n    # Validate\n    for vial in samples_df['Vial']:\n        ce_api.validation.validate_vial_in_system(int(vial))\n\n    # Prepare samples\n    workflow.prepare_continuous_flow(solvent_port=3)\n\n    for _, row in samples_df.iterrows():\n        vial = int(row['Vial'])\n        dilution = int(row['Dilution'])\n        diluent_volume = 1500 * (dilution - 1) / dilution\n\n        workflow.continuous_fill(\n            vial=vial,\n            volume=diluent_volume,\n            solvent_port=3\n        )\n\n    input(\"\\nAdd samples and press Enter...\")\n\n    # Mix all samples\n    for vial in samples_df['Vial']:\n        workflow.homogenize_sample(\n            vial=int(vial),\n            speed=1000,\n            homogenization_time=20\n        )\n\n    # Create and run sequence\n    ce_api.sequence.prepare_sequence_table(\n        excel_file_path=excel_file,\n        vial_column=\"Vial\",\n        method_column=\"Method\",\n        sample_name_column=\"Sample_Name\"\n    )\n\n    ce_api.sequence.start()\n\n    # Monitor\n    samples_done = 0\n    while samples_done &lt; len(samples_df):\n        if ce_api.system.method_on():\n            remaining = ce_api.system.get_remaining_analysis_time()\n            print(f\"\\r[{samples_done + 1}/{len(samples_df)}] \"\n                  f\"Remaining: {remaining:.1f} min\", end='')\n        time.sleep(10)\n\n    print(\"\\n\u2713 Batch complete!\")\n\nif __name__ == \"__main__\":\n    run_batch_analysis()\n</code></pre>"},{"location":"tutorials/batch-processing/#advanced-batch-processing","title":"Advanced Batch Processing","text":""},{"location":"tutorials/batch-processing/#intelligent-sample-grouping","title":"Intelligent Sample Grouping","text":"<pre><code>def group_samples_by_dilution(samples_df):\n    \"\"\"Group samples by dilution to optimize preparation.\"\"\"\n\n    grouped = samples_df.groupby('Dilution')\n\n    for dilution, group in grouped:\n        print(f\"\\nDilution 1:{dilution} ({len(group)} samples):\")\n\n        # Prepare all samples with same dilution together\n        workflow.prepare_continuous_flow(solvent_port=3)\n\n        for _, sample in group.iterrows():\n            vial = int(sample['Vial'])\n            volume = 1500 * (dilution - 1) / dilution\n\n            workflow.continuous_fill(\n                vial=vial,\n                volume=volume,\n                solvent_port=3,\n                flush_needle=None\n            )\n\n        # Wash between dilution groups\n        workflow.clean_needle(100)\n</code></pre>"},{"location":"tutorials/batch-processing/#error-recovery","title":"Error Recovery","text":"<pre><code>def batch_with_error_recovery():\n    \"\"\"Run batch with automatic error recovery.\"\"\"\n\n    max_retries = 3\n    failed_samples = []\n\n    for _, sample in samples_df.iterrows():\n        retry_count = 0\n        success = False\n\n        while retry_count &lt; max_retries and not success:\n            try:\n                ce_api.method.execution_method_with_parameters(\n                    vial=int(sample['Vial']),\n                    method_name=sample['Method'],\n                    sample_name=sample['Sample_Name']\n                )\n\n                # Wait for completion\n                while ce_api.system.method_on():\n                    time.sleep(30)\n\n                success = True\n\n            except Exception as e:\n                retry_count += 1\n                print(f\"\\nError with {sample['Sample_Name']}: {e}\")\n\n                if retry_count &lt; max_retries:\n                    print(f\"Retrying ({retry_count}/{max_retries})...\")\n                    ce_api.system.abort_run()\n                    time.sleep(60)\n                else:\n                    failed_samples.append(sample['Sample_Name'])\n\n    if failed_samples:\n        print(f\"\\nFailed samples: {failed_samples}\")\n</code></pre>"},{"location":"tutorials/batch-processing/#tips-for-efficient-batch-processing","title":"Tips for Efficient Batch Processing","text":"<ol> <li>Group Similar Samples</li> <li>Process samples with same dilution together</li> <li> <p>Minimize solvent changes</p> </li> <li> <p>Optimize Timing</p> </li> <li>Prepare next samples during current analysis</li> <li> <p>Use parallel operations when possible</p> </li> <li> <p>Quality Control</p> </li> <li>Include QC samples at regular intervals</li> <li> <p>Monitor system suitability</p> </li> <li> <p>Error Handling</p> </li> <li>Plan for sample failures</li> <li> <p>Include retry logic</p> </li> <li> <p>Documentation</p> </li> <li>Log all preparation steps</li> <li>Generate comprehensive reports</li> </ol> <p>Batch Processing Mastered!</p> <p>You can now process multiple samples efficiently. Continue to SIA-CE Integration for advanced workflows.</p>"},{"location":"tutorials/chemstation-macros/","title":"ChemStation Scripting and Macros - Complete Guide","text":"<p>This comprehensive guide covers the practical fundamentals of scripting in Agilent ChemStation, including detailed registry operations and RC.NET module interactions.</p>"},{"location":"tutorials/chemstation-macros/#overview","title":"Overview","text":"<p>ChemStation's built-in scripting capabilities enable powerful automation of analytical workflows. This guide provides hands-on examples and best practices for creating automation solutions.</p>"},{"location":"tutorials/chemstation-macros/#1-chemstation-commands","title":"1. ChemStation Commands","text":"<p>ChemStation includes a command processor (CP) that interprets and executes commands interactively or through scripts.</p>"},{"location":"tutorials/chemstation-macros/#basic-command-syntax","title":"Basic Command Syntax","text":"<p>Display Messages: <pre><code>Print \"This is a message\"\n</code></pre></p> <p>Multiple Commands per Line: Separate commands with semicolons (<code>;</code>): <pre><code>Print \"Starting\"; Sleep 2; Print \"Complete\"\n</code></pre></p> <p>Comments: Text after <code>!</code> is ignored: <pre><code>! This is a comment\nPrint \"Active command\"  ! End-of-line comment\n</code></pre></p> <p>Command History: Use <code>\u2191</code> and <code>\u2193</code> arrow keys to navigate through previous commands in the command processor.</p>"},{"location":"tutorials/chemstation-macros/#2-macro-structure-and-parameters","title":"2. Macro Structure and Parameters","text":"<p>Macros are named collections of commands that automate repetitive tasks and complex workflows.</p>"},{"location":"tutorials/chemstation-macros/#basic-macro-structure","title":"Basic Macro Structure","text":"<pre><code>Name MyMessage\n    Print \"Hello World!\"\nEndMacro\n</code></pre>"},{"location":"tutorials/chemstation-macros/#macro-parameters","title":"Macro Parameters","text":"<p>Macros can accept parameters for flexible operation. Parameters are declared using the <code>Parameter</code> statement:</p> <pre><code>Name InjectSample\n    Parameter SampleName$, VialPos, InjVol\n    Print \"Sample=\", SampleName$, \", Vial=\", VialPos, \", InjVol=\", InjVol\nEndMacro\n</code></pre> <p>Calling the macro: <pre><code>InjectSample \"Std_1\", 5, 10\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#local-variables","title":"Local Variables","text":"<p>Define local variables within macros using the <code>Local</code> statement:</p> <pre><code>Name CalculateVolume\n    Local Area, Volume, Concentration\n    Area = 2.5\n    Concentration = 0.1\n    Volume = Area * Concentration * 10\n    Print \"Calculated Volume =\", Volume\nEndMacro\n</code></pre> <p>Variable Scope: - Local variables exist only within the macro - Global variables persist throughout the ChemStation session - Use local variables to prevent naming conflicts</p>"},{"location":"tutorials/chemstation-macros/#3-loading-and-managing-macros","title":"3. Loading and Managing Macros","text":""},{"location":"tutorials/chemstation-macros/#loading-macros","title":"Loading Macros","text":"<p>Load from relative path: <pre><code>Macro \"mymacro.mac\"\n</code></pre></p> <p>Load from absolute path: <pre><code>Macro \"D:\\projects\\chem\\automation\\mymacro.mac\"\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#executing-macros","title":"Executing Macros","text":"<p>Run without parameters: <pre><code>MyMessage\n</code></pre></p> <p>Run with parameters: <pre><code>InjectSample \"Sample_A\", 3, 5.0\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#macro-management","title":"Macro Management","text":"<p>Remove macro from memory: <pre><code>Remove MyMessage\n</code></pre></p> <p>List loaded macros: <pre><code>Show Macros\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#4-variables-and-data-types","title":"4. Variables and Data Types","text":"<p>ChemStation supports several variable types for different data handling needs.</p>"},{"location":"tutorials/chemstation-macros/#variable-types","title":"Variable Types","text":"<p>String Variables: <pre><code>Sample$ = \"Test_Sample_001\"\nDataPath$ = \"C:\\ChemStation\\Data\\\"\n</code></pre></p> <p>Numeric Variables: <pre><code>Flow = 1.5\nTemperature = 25.0\nInjectionVolume = 10\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#system-variables","title":"System Variables","text":"<p>ChemStation provides built-in system variables for accessing current state information:</p> <p>Common System Variables: - <code>_DataFile$</code> - Current data file name - <code>_MethodOn</code> - Method status (0=off, 1=on) - <code>_SequenceOn</code> - Sequence status (0=off, 1=on) - <code>_AutoPath$</code> - Automatic data path - <code>_Instrument$</code> - Current instrument configuration</p> <p>Display all system variables: <pre><code>Show Variables\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#5-registry-operations","title":"5. Registry Operations","text":"<p>Registries are ChemStation's primary data containers, storing complex information about analyses, methods, chromatograms, and spectra.</p>"},{"location":"tutorials/chemstation-macros/#understanding-registry-structure","title":"Understanding Registry Structure","text":"<p>Registry Hierarchy: - Registry - Top-level container (e.g., ChromReg for chromatograms) - Objects - Individual data items within registry (e.g., ChromReg[1]) - Headers - Metadata about objects - Data Blocks - Raw analytical data - Tables - Processed results (peaks, quantification)</p>"},{"location":"tutorials/chemstation-macros/#basic-registry-operations","title":"Basic Registry Operations","text":"<p>Check registry size: <pre><code>Print RegSize(ChromReg)\n</code></pre></p> <p>List registry contents: <pre><code>Print RegCont$(ChromReg)\n</code></pre></p> <p>Access specific registry object: <pre><code>ChromReg[1]  ! Access first chromatogram\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#reading-data-from-registries","title":"Reading Data from Registries","text":"<p>Extract raw data points: <pre><code>Data(ChromReg[1], 0, 10)  ! X-axis value at point 10\nData(ChromReg[1], 1, 10)  ! Y-axis value at point 10\n</code></pre></p> <p>Read header information: <pre><code>Print ObjHdrVal$(ChromReg[1], \"SampleName\")\nPrint ObjHdrVal(ChromReg[1], \"InjectionVolume\")\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#working-with-tables","title":"Working with Tables","text":"<p>Read text from tables: <pre><code>TabText$(ChromRes[1], \"Peak\", 2, \"Name\")    ! Peak name for peak #2\n</code></pre></p> <p>Read numeric values from tables: <pre><code>TabVal(ChromRes[1], \"Peak\", 2, \"Area\")      ! Peak area for peak #2\nTabVal(ChromRes[1], \"Peak\", 2, \"RT\")        ! Retention time for peak #2\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#modifying-registry-data","title":"Modifying Registry Data","text":"<p>Update header values: <pre><code>SetObjHdrVal ChromReg[1], \"Title\", \"My Custom Chromatogram\"\nSetObjHdrVal ChromReg[1], \"SampleInfo\", \"Batch_2024_001\"\n</code></pre></p> <p>Modify data points: <pre><code>SetData ChromReg[1], 1, 10, 1500.5  ! Set Y-value at point 10\n</code></pre></p> <p>Advanced Registry Exploration: For comprehensive registry exploration, use the <code>register_reader.mac</code> utility to examine all available registry structures and data.</p>"},{"location":"tutorials/chemstation-macros/#6-rcnet-module-control","title":"6. RC.NET Module Control","text":"<p>RC.NET provides standardized communication with ChemStation modules like pumps, detectors, and autosamplers.</p>"},{"location":"tutorials/chemstation-macros/#rcnet-registry-structure","title":"RC.NET Registry Structure","text":"<p>Each module maintains three primary registries:</p> <p>Registry Types: - <code>RC&lt;ModID&gt;&lt;#&gt;Method</code> - Method parameters and settings - <code>RC&lt;ModID&gt;&lt;#&gt;Status</code> - Real-time status information (pressures, temperatures) - <code>RC&lt;ModID&gt;&lt;#&gt;Config</code> - Module configuration (type, firmware version, serial number)</p> <p>Example Module Identifiers: - <code>PMP1</code> - Quaternary Pump - <code>WLS1</code> - UV-Vis Detector - <code>ALS1</code> - Autosampler - <code>CE1</code> - Capillary Electrophoresis</p>"},{"location":"tutorials/chemstation-macros/#method-parameter-modification","title":"Method Parameter Modification","text":"<p>Standard method parameter workflow: <pre><code>! Upload current method to memory\nUploadRCMethod PMP1\n\n! Modify parameters\nSetObjHdrVal RCPMP1Method[1], \"StopTime_Time\", 10\nSetObjHdrVal RCPMP1Method[1], \"Flow\", 1.0\n\n! Download modified method to instrument\nDownloadRCMethod PMP1\n</code></pre></p> <p>Common Method Parameters: - Flow rates: <code>\"Flow\"</code>, <code>\"Flow_A\"</code>, <code>\"Flow_B\"</code> - Temperatures: <code>\"Temperature\"</code>, <code>\"ColTemp\"</code> - Times: <code>\"StopTime_Time\"</code>, <code>\"PostTime\"</code> - Volumes: <code>\"InjVol\"</code>, <code>\"MaxInjVol\"</code></p>"},{"location":"tutorials/chemstation-macros/#reading-module-status","title":"Reading Module Status","text":"<p>Current operational parameters: <pre><code>Print ObjHdrVal(RCPMP1Status[1], \"Pressure\")     ! Current pressure\nPrint ObjHdrVal(RCPMP1Status[1], \"Flow_actual\")  ! Actual flow rate\nPrint ObjHdrVal(RCWLS1Status[1], \"Lamp\")         ! Lamp status\n</code></pre></p> <p>Module configuration information: <pre><code>Print ObjHdrVal(RCPMP1Config[1], \"SerialNumber\")   ! Serial number\nPrint ObjHdrVal(RCPMP1Config[1], \"FirmwareRev\")    ! Firmware version\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#direct-module-communication","title":"Direct Module Communication","text":"<p>Send command without response: <pre><code>WriteModule \"WLS1\", \"LRPL 10\"  ! Set reference wavelength\n</code></pre></p> <p>Send command and get response: <pre><code>Response$ = SendModule$(\"WLS1\", \"LIFTER:OCCUPIED? 3\")  ! Check vial position\nPrint \"Vial occupied:\", Response$\n</code></pre></p> <p>Advanced module interrogation: <pre><code>Print SendModule$(\"PMP1\", \"PRES?\")     ! Query current pressure\nPrint SendModule$(\"ALS1\", \"INJ:STAT?\")  ! Query injection status\n</code></pre></p>"},{"location":"tutorials/chemstation-macros/#7-discovering-module-commands-through-trace-logs","title":"7. Discovering Module Commands Through Trace Logs","text":"<p>Module-specific commands can be discovered by monitoring ChemStation's communication logs.</p>"},{"location":"tutorials/chemstation-macros/#practical-example-vial-loading","title":"Practical Example - Vial Loading","text":"<p>Sample log entry for loading vial 50 to replenishment position: <pre><code>EventId: 228808;Timestamp: 22/07/2025 8:21:16.851;Thread Id: 25;\nMessage: LDT SendInstruction: Module:[G7150A:DEDAD01310]; \nInstruction:[RRPL]; Reply:[[G7150A:DEDAD01310:IN]: RA 00000 RRPL];\nCategory: Agilent.LCDrivers.Common.ModuleAccess, Debug;Priority: 3;\nProcess Name: C:\\Chem32\\CORE\\ChemMain.exe;\nExtended Properties: ModuleShortname - Agilent.LCDrivers.Common.ModuleAccess;\n</code></pre></p> <p>Key Information:</p> <ul> <li>Module ID: <code>G7150A:DEDAD01310</code> (CE1)</li> <li>Command: <code>LRPL 50</code> (Load Replenishment Position 50)</li> <li>Response: <code>RA 00000</code> (Response Acknowledge - Success)</li> </ul>"},{"location":"tutorials/chemstation-macros/#trace-analysis-workflow","title":"Trace Analysis Workflow","text":"<ol> <li>Monitor during operations:</li> <li>Perform action in ChemStation interface (load vial, change parameter)</li> <li> <p>Check <code>C:\\Chem32\\1\\TEMP\\rcdriver.trc</code></p> </li> <li> <p>Extract commands:</p> </li> <li>Look for <code>Instruction:</code> entries</li> <li> <p>Note the exact module ID and command syntax</p> </li> <li> <p>Test in Command Processor: <pre><code>WriteModule \"CE1\", \"LRPL 50\"  ! Load vial 50 to replenishment\n</code></pre></p> </li> </ol> <p>Common Commands Discovered: - <code>LRPL n</code> - Load replenishment position - <code>LIFTER:OCCUPIED? n</code> - Check if vial n is present</p>"},{"location":"tutorials/chemstation-macros/#10-quick-troubleshooting","title":"10. Quick Troubleshooting","text":""},{"location":"tutorials/chemstation-macros/#common-issues","title":"Common Issues","text":"<p>Module communication fails: - Verify module is online: <code>Print RCModuleReady(\"PMP1\")</code> - Restart ChemStation if persistent errors</p> <p>Registry errors: - Check registry exists: <code>Print RegSize(ChromReg)</code> - Verify object number: <code>Print RegCont$(ChromReg)</code></p> <p>Command not working: - Test in Command Processor first - Check trace logs for exact syntax - Verify module ID matches your system</p>"},{"location":"tutorials/chemstation-macros/#quick-reference-commands","title":"Quick Reference Commands","text":"<pre><code>Show                          ! List all variables\nRCListDevices$()             ! List RC.NET modules  \nPrint RegCont$(ChromReg)     ! Show registry contents\nRemove MacroName             ! Unload macro\n</code></pre> <p>For detailed registry exploration, use the provided <code>register_reader.mac</code> utility.</p>"},{"location":"tutorials/first-analysis/","title":"Your First Automated Analysis","text":"<p>This tutorial will guide you through your first automated CE analysis using the SIA-CE system. We'll analyze a single sample with automated sample preparation.</p>"},{"location":"tutorials/first-analysis/#what-well-do","title":"What We'll Do","text":"<ol> <li>Initialize the SIA system</li> <li>Prepare a sample with automated dilution</li> <li>Load the sample for CE analysis</li> <li>Run the separation</li> <li>Monitor the analysis progress</li> </ol>"},{"location":"tutorials/first-analysis/#prerequisites","title":"Prerequisites","text":"<ul> <li>ChemStation is running with the macro loaded</li> <li>SIA devices are connected and powered on</li> <li>You have identified your COM ports</li> <li>Sample and reagents are prepared</li> </ul>"},{"location":"tutorials/first-analysis/#step-1-system-setup","title":"Step 1: System Setup","text":"<pre><code># Import required modules\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\n# Initialize ChemStation connection\nprint(\"Connecting to ChemStation...\")\nce_api = ChemstationAPI()\nprint(\"\u2713 ChemStation connected\")\n\n# Initialize SIA devices\nprint(\"Initializing SIA devices...\")\nsyringe = SyringeController(port=\"COM3\", syringe_size=1000)\nvalve = ValveSelector(port=\"COM4\", num_positions=8)\nprint(\"\u2713 SIA devices connected\")\n\n# Create workflow controller\nworkflow = PreparedSIAMethods(ce_api, syringe, valve)\nprint(\"\u2713 Workflow controller ready\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-2-system-initialization","title":"Step 2: System Initialization","text":"<pre><code># Perform complete system initialization\nprint(\"\\nInitializing and cleaning system...\")\nprint(\"This will take about 2 minutes\")\n\nworkflow.system_initialization_and_cleaning(\n    waste_vial=50,  # Vial 50 for waste collection\n    bubble=20       # 20 \u00b5L separating bubble\n)\n\nprint(\"\u2713 System initialized and ready\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-3-sample-information","title":"Step 3: Sample Information","text":"<pre><code># Define our sample parameters\nsample_info = {\n    'vial': 15,\n    'name': 'Protein_Sample_001',\n    'method': 'CE_Protein_Analysis',\n    'dilution': 10,  # 1:10 dilution\n    'volume': 1500   # \u00b5L final volume\n}\n\nprint(f\"\\nSample: {sample_info['name']}\")\nprint(f\"Location: Vial {sample_info['vial']}\")\nprint(f\"Dilution: 1:{sample_info['dilution']}\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-4-validate-prerequisites","title":"Step 4: Validate Prerequisites","text":"<pre><code># Check everything is ready\nprint(\"\\nValidating system...\")\n\ntry:\n    # Check sample vial exists\n    ce_api.validation.validate_vial_in_system(sample_info['vial'])\n    print(\"\u2713 Sample vial present\")\n\n    # Check waste vials\n    ce_api.validation.validate_vial_in_system(48)  # Wash vial\n    ce_api.validation.validate_vial_in_system(50)  # Waste vial\n    print(\"\u2713 Wash and waste vials present\")\n\n    # Check method exists\n    ce_api.validation.validate_method_name(sample_info['method'])\n    print(\"\u2713 CE method found\")\n\n    # Check system is ready\n    if ce_api.system.status() == \"STANDBY\":\n        print(\"\u2713 CE system ready\")\n    else:\n        print(\"\u26a0 Waiting for system...\")\n        ce_api.system.wait_for_ready(timeout=60)\n\nexcept Exception as e:\n    print(f\"\u2717 Validation failed: {e}\")\n    print(\"Please fix the issue and restart\")\n    exit(1)\n\nprint(\"\\nAll checks passed!\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-5-automated-sample-preparation","title":"Step 5: Automated Sample Preparation","text":"<pre><code># Prepare for sample dilution\nprint(f\"\\nPreparing 1:{sample_info['dilution']} dilution...\")\n\n# Calculate volumes\nsample_volume = sample_info['volume'] / sample_info['dilution']\ndiluent_volume = sample_info['volume'] - sample_volume\n\nprint(f\"Sample volume: {sample_volume:.0f} \u00b5L\")\nprint(f\"Diluent volume: {diluent_volume:.0f} \u00b5L\")\n\n# Prepare for continuous flow with DI water\nworkflow.prepare_continuous_flow(\n    solvent_port=3,  # DI water port\n    speed=2000       # 2 mL/min\n)\n\n# Note: In a real workflow, you would add the sample first,\n# then diluent. For this demo, we'll add diluent to an empty vial\nprint(\"\\nAdding diluent to vial...\")\nworkflow.continuous_fill(\n    vial=sample_info['vial'],\n    volume=diluent_volume,\n    solvent_port=3,\n    flush_needle=50\n)\n\nprint(\"\u2713 Diluent added\")\n\n# In practice, you would now add your sample\nprint(\"\\n\u26a0 Add sample to vial manually or use liquid handling robot\")\ninput(\"Press Enter when sample is added...\")\n\n# Homogenize the diluted sample\nprint(\"\\nMixing sample...\")\nworkflow.homogenize_sample(\n    vial=sample_info['vial'],\n    speed=1000,              # 1 mL/min bubbling\n    homogenization_time=30,  # 30 seconds\n    flush_needle=50\n)\n\nprint(\"\u2713 Sample prepared and mixed\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-6-ce-analysis-setup","title":"Step 6: CE Analysis Setup","text":"<pre><code># Load vials for CE analysis\nprint(\"\\nSetting up CE analysis...\")\n\n# Load sample vial to inlet\nce_api.ce.load_vial_to_position(sample_info['vial'], \"inlet\")\nprint(\"\u2713 Sample loaded to inlet\")\n\n# Load waste vial to outlet\nce_api.ce.load_vial_to_position(48, \"outlet\")\nprint(\"\u2713 Waste vial loaded to outlet\")\n\n# Condition capillary\nprint(\"\\nConditioning capillary...\")\nce_api.ce.flush_capillary(time_flush=60.0)\nprint(\"\u2713 Capillary conditioned\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-7-run-analysis","title":"Step 7: Run Analysis","text":"<pre><code># Start the CE analysis\nprint(f\"\\nStarting analysis: {sample_info['name']}\")\nprint(f\"Method: {sample_info['method']}\")\n\nce_api.method.execution_method_with_parameters(\n    vial=sample_info['vial'],\n    method_name=sample_info['method'],\n    sample_name=sample_info['name'],\n    comment=\"Tutorial first analysis\",\n    subdirectory_name=\"Tutorial_Runs\"\n)\n\nprint(\"\u2713 Analysis started\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-8-monitor-progress","title":"Step 8: Monitor Progress","text":"<pre><code># Monitor the running analysis\nprint(\"\\nMonitoring analysis...\")\nprint(\"Press Ctrl+C to stop monitoring (analysis will continue)\")\n\ntry:\n    start_time = time.time()\n\n    while ce_api.system.method_on():\n        # Get progress information\n        elapsed = ce_api.system.get_elapsed_analysis_time()\n        total = ce_api.system.get_analysis_time()\n        remaining = ce_api.system.get_remaining_analysis_time()\n        status = ce_api.system.status()\n\n        # Calculate percentage\n        if total &gt; 0:\n            progress = (elapsed / total) * 100\n        else:\n            progress = 0\n\n        # Display progress\n        print(f\"\\rStatus: {status} | Progress: {progress:.1f}% | \"\n              f\"Remaining: {remaining:.1f} min\", end='')\n\n        time.sleep(10)  # Update every 10 seconds\n\nexcept KeyboardInterrupt:\n    print(\"\\n\\nStopped monitoring (analysis continues)\")\n\n# Analysis complete\ntotal_time = (time.time() - start_time) / 60\nprint(f\"\\n\\n\u2713 Analysis complete! Total time: {total_time:.1f} minutes\")\n</code></pre>"},{"location":"tutorials/first-analysis/#step-9-cleanup","title":"Step 9: Cleanup","text":"<pre><code># Return vials to carousel\nprint(\"\\nCleaning up...\")\n\nce_api.ce.unload_vial_from_position(\"inlet\")\nce_api.ce.unload_vial_from_position(\"outlet\")\n\nprint(\"\u2713 Vials returned to carousel\")\nprint(\"\\nFirst analysis tutorial complete!\")\n</code></pre>"},{"location":"tutorials/first-analysis/#complete-script","title":"Complete Script","text":"<p>Here's the complete script in one block:</p> <pre><code># First Analysis Tutorial - Complete Script\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\nimport time\n\ndef first_analysis():\n    \"\"\"Run your first automated CE analysis with SIA sample prep.\"\"\"\n\n    # Initialize all systems\n    print(\"=== SIA-CE First Analysis Tutorial ===\\n\")\n\n    ce_api = ChemstationAPI()\n    syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n    valve = ValveSelector(port=\"COM4\", num_positions=8)\n    workflow = PreparedSIAMethods(ce_api, syringe, valve)\n\n    # Sample parameters\n    sample_vial = 15\n    sample_name = \"Tutorial_Sample_001\"\n    ce_method = \"CE_Protein_Analysis\"\n\n    # Initialize system\n    print(\"Initializing system...\")\n    workflow.system_initialization_and_cleaning()\n\n    # Validate prerequisites\n    print(\"\\nValidating...\")\n    ce_api.validation.validate_vial_in_system(sample_vial)\n    ce_api.validation.validate_method_name(ce_method)\n\n    # Prepare sample (dilution)\n    print(\"\\nPreparing sample...\")\n    workflow.prepare_continuous_flow(solvent_port=3)\n    workflow.continuous_fill(vial=sample_vial, volume=900, solvent_port=3)\n\n    input(\"\\nAdd 100 \u00b5L sample to vial and press Enter...\")\n\n    workflow.homogenize_sample(vial=sample_vial, speed=1000, \n                               homogenization_time=30)\n\n    # Setup CE\n    print(\"\\nSetting up CE...\")\n    ce_api.ce.load_vial_to_position(sample_vial, \"inlet\")\n    ce_api.ce.load_vial_to_position(48, \"outlet\")\n    ce_api.ce.flush_capillary(60.0)\n\n    # Run analysis\n    print(\"\\nStarting analysis...\")\n    ce_api.method.execution_method_with_parameters(\n        vial=sample_vial,\n        method_name=ce_method,\n        sample_name=sample_name\n    )\n\n    # Monitor\n    while ce_api.system.method_on():\n        remaining = ce_api.system.get_remaining_analysis_time()\n        print(f\"\\r{remaining:.1f} minutes remaining...\", end='')\n        time.sleep(30)\n\n    # Cleanup\n    print(\"\\n\\nCleaning up...\")\n    ce_api.ce.unload_vial_from_position(\"inlet\")\n    ce_api.ce.unload_vial_from_position(\"outlet\")\n\n    print(\"\\n\u2713 Analysis complete!\")\n\nif __name__ == \"__main__\":\n    first_analysis()\n</code></pre>"},{"location":"tutorials/first-analysis/#what-you-learned","title":"What You Learned","text":"<p>In this tutorial, you:</p> <ol> <li>\u2713 Connected to ChemStation and SIA devices</li> <li>\u2713 Initialized the complete system</li> <li>\u2713 Validated all prerequisites</li> <li>\u2713 Performed automated sample dilution</li> <li>\u2713 Mixed samples using pneumatic homogenization</li> <li>\u2713 Set up and ran a CE analysis</li> <li>\u2713 Monitored analysis progress</li> <li>\u2713 Cleaned up after analysis</li> </ol>"},{"location":"tutorials/first-analysis/#next-steps","title":"Next Steps","text":"<ul> <li>Try modifying the dilution ratio</li> <li>Run multiple samples in sequence</li> <li>Explore different CE methods</li> <li>Add more complex sample preparation</li> </ul>"},{"location":"tutorials/first-analysis/#troubleshooting","title":"Troubleshooting","text":"<p>ChemStation Connection Failed - Is ChemStation running? - Is the macro loaded? (<code>macro \"path\\ChemPyConnect.mac\"; Python_Run</code>)</p> <p>SIA Device Not Responding - Check COM port numbers in Device Manager - Verify power and cable connections - Try <code>syringe.send_command(\"?\", get_response=True)</code></p> <p>Vial Not Found - Check vial is properly seated in carousel - Verify vial number is correct (1-50)</p> <p>Method Not Found - Check method name spelling (case-sensitive) - Verify method exists in ChemStation method directory</p> <p>Congratulations!</p> <p>You've completed your first automated analysis! Continue to Batch Processing to learn about analyzing multiple samples.</p>"},{"location":"tutorials/sia-ce-integration/","title":"SIA-CE Integration Tutorial","text":"<p>Learn how to create sophisticated analytical workflows combining SIA sample preparation with CE analysis.</p>"},{"location":"tutorials/sia-ce-integration/#overview","title":"Overview","text":"<p>This tutorial demonstrates advanced integration scenarios: - Multi-step sample preparation - Parallel processing during CE runs - Automated method development - Complex decision trees - Real-time optimization</p>"},{"location":"tutorials/sia-ce-integration/#scenario-protein-stability-study","title":"Scenario: Protein Stability Study","text":"<p>We'll analyze protein samples under different conditions: - pH variations (5.0, 6.0, 7.0, 8.0) - Temperature stress (native, heated) - Time points (0h, 24h, 48h) - Automated sample preparation and analysis</p>"},{"location":"tutorials/sia-ce-integration/#workflow-architecture","title":"Workflow Architecture","text":"<pre><code>graph LR\n    A[Sample Preparation] --&gt; B[CE Analysis]\n    B --&gt; C[Data Collection]\n    C --&gt; D[Decision Logic]\n    D --&gt; A\n    D --&gt; E[Report Generation]</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-1-system-architecture","title":"Step 1: System Architecture","text":"<pre><code>import time\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom ChemstationAPI import ChemstationAPI\nfrom SIA_API.devices import SyringeController, ValveSelector\nfrom SIA_API.methods import PreparedSIAMethods\n\nclass IntegratedAnalysisSystem:\n    \"\"\"Complete SIA-CE integration for automated analysis.\"\"\"\n\n    def __init__(self):\n        # Initialize all components\n        print(\"Initializing Integrated Analysis System...\")\n\n        self.ce = ChemstationAPI()\n        self.syringe = SyringeController(port=\"COM3\", syringe_size=1000)\n        self.valve = ValveSelector(port=\"COM4\", num_positions=8)\n        self.sia = PreparedSIAMethods(self.ce, self.syringe, self.valve)\n\n        # System configuration\n        self.config = {\n            'ports': {\n                'waste': 1,\n                'air': 2,\n                'water': 3,\n                'transfer': 4,\n                'buffer_ph5': 5,\n                'buffer_ph6': 6,\n                'buffer_ph7': 7,\n                'buffer_ph8': 8\n            },\n            'vials': {\n                'samples': list(range(10, 34)),  # 24 sample positions\n                'standards': [1, 2],\n                'blanks': [3, 4],\n                'wash': 48,\n                'waste': 50\n            },\n            'methods': {\n                'native': 'CE_Protein_Native',\n                'denatured': 'CE_Protein_Denatured',\n                'fast_screen': 'CE_Protein_Fast'\n            }\n        }\n\n        # Analysis tracking\n        self.analysis_log = []\n        self.results_cache = {}\n\n        print(\"\u2713 System initialized\")\n\n    def initialize_system(self):\n        \"\"\"Complete system initialization.\"\"\"\n        self.sia.system_initialization_and_cleaning()\n        return self\n\n# Create system instance\nsystem = IntegratedAnalysisSystem()\nsystem.initialize_system()\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-2-sample-preparation-workflows","title":"Step 2: Sample Preparation Workflows","text":"<pre><code>class SamplePreparationWorkflows:\n    \"\"\"Advanced sample preparation methods.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.sia = system.sia\n        self.ce = system.ce\n\n    def prepare_ph_series(self, sample_vial, target_vials, volumes):\n        \"\"\"Prepare pH series from single sample.\"\"\"\n\n        print(f\"\\nPreparing pH series from vial {sample_vial}\")\n\n        ph_buffers = {\n            5.0: self.system.config['ports']['buffer_ph5'],\n            6.0: self.system.config['ports']['buffer_ph6'],\n            7.0: self.system.config['ports']['buffer_ph7'],\n            8.0: self.system.config['ports']['buffer_ph8']\n        }\n\n        preparations = []\n\n        for (target_vial, ph), (sample_vol, buffer_vol) in zip(\n            target_vials.items(), volumes\n        ):\n            print(f\"  pH {ph} \u2192 Vial {target_vial}\")\n\n            # Add buffer first\n            self.sia.prepare_batch_flow(solvent_port=ph_buffers[ph])\n            self.sia.batch_fill(\n                vial=target_vial,\n                volume=buffer_vol,\n                solvent_port=ph_buffers[ph],\n                unload=False\n            )\n\n            # Add sample (manual or automated)\n            print(f\"    Add {sample_vol} \u00b5L from vial {sample_vial}\")\n\n            # Mix thoroughly\n            self.sia.homogenize_sample(\n                vial=target_vial,\n                speed=800,\n                homogenization_time=30\n            )\n\n            preparations.append({\n                'vial': target_vial,\n                'ph': ph,\n                'sample_vol': sample_vol,\n                'buffer_vol': buffer_vol,\n                'time': datetime.now()\n            })\n\n        return preparations\n\n    def thermal_stress_preparation(self, sample_vials, temperature=60, duration=30):\n        \"\"\"Prepare thermally stressed samples.\"\"\"\n\n        print(f\"\\nThermal stress: {temperature}\u00b0C for {duration} min\")\n        print(\"Remove samples for heating\")\n\n        # Log sample removal\n        removal_time = datetime.now()\n\n        # Wait for thermal treatment\n        print(f\"Heating samples...\")\n        time.sleep(duration * 60)  # In real scenario, use external heating\n\n        print(\"Return heated samples to carousel\")\n        return_time = datetime.now()\n\n        # Quick-cool samples\n        for vial in sample_vials:\n            # Add cold buffer for quenching\n            self.sia.batch_fill(\n                vial=vial,\n                volume=100,\n                solvent_port=self.system.config['ports']['water'],\n                transfer_line_volume=300,\n                speed=3000  # Fast for quick cooling\n            )\n\n        stress_log = {\n            'vials': sample_vials,\n            'temperature': temperature,\n            'duration': duration,\n            'removed': removal_time,\n            'returned': return_time\n        }\n\n        return stress_log\n\n    def automated_dilution_series(self, stock_vial, target_vials, dilution_factors):\n        \"\"\"Create dilution series with mixing.\"\"\"\n\n        print(f\"\\nCreating dilution series from vial {stock_vial}\")\n\n        # Use continuous flow for efficiency\n        self.sia.prepare_continuous_flow(\n            solvent_port=self.system.config['ports']['water']\n        )\n\n        dilutions = []\n\n        for vial, factor in zip(target_vials, dilution_factors):\n            # Calculate volumes\n            final_volume = 1000  # \u00b5L\n            stock_volume = final_volume / factor\n            diluent_volume = final_volume - stock_volume\n\n            print(f\"  1:{factor} dilution \u2192 Vial {vial}\")\n\n            # Add diluent\n            self.sia.continuous_fill(\n                vial=vial,\n                volume=diluent_volume,\n                solvent_port=self.system.config['ports']['water']\n            )\n\n            dilutions.append({\n                'vial': vial,\n                'factor': factor,\n                'stock_vol': stock_volume,\n                'diluent_vol': diluent_volume\n            })\n\n        print(f\"Add stock solution volumes as indicated\")\n        return dilutions\n\n# Add workflows to system\nsystem.prep = SamplePreparationWorkflows(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-3-intelligent-ce-control","title":"Step 3: Intelligent CE Control","text":"<pre><code>class IntelligentCEControl:\n    \"\"\"Smart CE control with decision logic.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.ce = system.ce\n\n    def adaptive_method_selection(self, sample_info):\n        \"\"\"Select optimal method based on sample properties.\"\"\"\n\n        # Decision tree for method selection\n        if sample_info.get('screening', False):\n            method = self.system.config['methods']['fast_screen']\n\n        elif sample_info.get('denatured', False):\n            method = self.system.config['methods']['denatured']\n\n        else:\n            method = self.system.config['methods']['native']\n\n        # Adjust parameters based on pH\n        ph = sample_info.get('ph', 7.0)\n        if ph &lt; 6.0:\n            # Low pH modifications\n            print(f\"Adjusting for pH {ph}\")\n            # In practice, modify method parameters here\n\n        return method\n\n    def parallel_sample_prep(self, current_vial, next_vial):\n        \"\"\"Prepare next sample during current analysis.\"\"\"\n\n        print(f\"\\nParallel processing: Current={current_vial}, Next={next_vial}\")\n\n        # Start CE analysis\n        self.ce.method.execution_method_with_parameters(\n            vial=current_vial,\n            method_name=\"CE_Protein_Analysis\",\n            sample_name=f\"Sample_{current_vial}\"\n        )\n\n        # While CE is running, prepare next sample\n        print(\"CE running - preparing next sample...\")\n\n        # Monitor CE and prepare when safe\n        while self.ce.system.method_on():\n            status = self.ce.system.status()\n            remaining = self.ce.system.get_remaining_analysis_time()\n\n            # Start prep when 5 minutes remaining\n            if remaining &lt; 5 and remaining &gt; 0:\n                print(\"Starting next sample preparation\")\n\n                # Safe to use SIA during separation\n                self.system.sia.batch_fill(\n                    vial=next_vial,\n                    volume=500,\n                    solvent_port=self.system.config['ports']['water']\n                )\n\n                self.system.sia.homogenize_sample(\n                    vial=next_vial,\n                    speed=1000,\n                    homogenization_time=20\n                )\n\n                break\n\n            time.sleep(30)\n\n        # Wait for CE completion\n        while self.ce.system.method_on():\n            time.sleep(10)\n\n        return True\n\n    def automated_system_suitability(self):\n        \"\"\"Run system suitability before batch.\"\"\"\n\n        print(\"\\n=== System Suitability Test ===\")\n\n        # Load standard\n        self.ce.ce.load_vial_to_position(1, \"inlet\")\n        self.ce.ce.load_vial_to_position(48, \"outlet\")\n\n        # Condition with method-specific parameters\n        self.ce.ce.flush_capillary(120)  # 2 min conditioning\n\n        # Run suitability standard\n        self.ce.method.execution_method_with_parameters(\n            vial=1,\n            method_name=\"CE_System_Suitability\",\n            sample_name=\"SST_Standard\"\n        )\n\n        # Monitor and evaluate\n        while self.ce.system.method_on():\n            time.sleep(30)\n\n        # In practice, evaluate peak parameters here\n        print(\"\u2713 System suitability passed\")\n\n        # Return vials\n        self.ce.ce.unload_vial_from_position(\"inlet\")\n        self.ce.ce.unload_vial_from_position(\"outlet\")\n\n        return True\n\n# Add intelligent control\nsystem.smart_ce = IntelligentCEControl(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-4-complete-stability-study-workflow","title":"Step 4: Complete Stability Study Workflow","text":"<pre><code>def run_protein_stability_study(system):\n    \"\"\"Execute complete protein stability study.\"\"\"\n\n    print(\"\\n=== Protein Stability Study ===\")\n    print(f\"Start: {datetime.now()}\")\n\n    # Study design\n    study_design = {\n        'time_points': [0, 24, 48],  # hours\n        'ph_values': [5.0, 6.0, 7.0, 8.0],\n        'conditions': ['native', 'heat_stressed'],\n        'replicates': 2\n    }\n\n    # Calculate total samples\n    total_samples = (len(study_design['time_points']) * \n                    len(study_design['ph_values']) * \n                    len(study_design['conditions']) * \n                    study_design['replicates'])\n\n    print(f\"Total samples: {total_samples}\")\n\n    # Run system suitability\n    system.smart_ce.automated_system_suitability()\n\n    # Time point 0 - Baseline\n    print(\"\\n--- Time Point 0h ---\")\n\n    # Prepare pH series for native\n    native_vials = {10: 5.0, 11: 6.0, 12: 7.0, 13: 8.0}\n    system.prep.prepare_ph_series(\n        sample_vial=1,  # Original sample\n        target_vials=native_vials,\n        volumes=[(100, 900), (100, 900), (100, 900), (100, 900)]\n    )\n\n    # Prepare heat stressed samples\n    stressed_vials = [14, 15, 16, 17]\n    system.prep.thermal_stress_preparation(\n        sample_vials=stressed_vials,\n        temperature=60,\n        duration=30\n    )\n\n    # Analyze all T0 samples\n    all_t0_vials = list(native_vials.keys()) + stressed_vials\n\n    for i, vial in enumerate(all_t0_vials):\n        # Determine sample info\n        if vial in native_vials:\n            ph = native_vials[vial]\n            condition = 'native'\n        else:\n            idx = stressed_vials.index(vial)\n            ph = list(native_vials.values())[idx]\n            condition = 'stressed'\n\n        sample_info = {\n            'vial': vial,\n            'time_point': 0,\n            'ph': ph,\n            'condition': condition,\n            'denatured': condition == 'stressed'\n        }\n\n        # Select method adaptively\n        method = system.smart_ce.adaptive_method_selection(sample_info)\n\n        # Run with parallel prep if not last sample\n        if i &lt; len(all_t0_vials) - 1:\n            system.smart_ce.parallel_sample_prep(\n                current_vial=vial,\n                next_vial=all_t0_vials[i + 1]\n            )\n        else:\n            # Last sample - no parallel prep\n            system.ce.method.execution_method_with_parameters(\n                vial=vial,\n                method_name=method,\n                sample_name=f\"T0_{condition}_pH{ph}\"\n            )\n\n            while system.ce.system.method_on():\n                time.sleep(30)\n\n    print(\"\\n\u2713 Time point 0h complete\")\n\n    # Store samples for next time points\n    print(\"\\nStore remaining samples at 4\u00b0C\")\n    print(\"Continue with 24h and 48h time points...\")\n\n    # Generate report\n    generate_study_report(system, study_design)\n\ndef generate_study_report(system, study_design):\n    \"\"\"Generate comprehensive study report.\"\"\"\n\n    report = f\"\"\"\nProtein Stability Study Report\n==============================\nGenerated: {datetime.now()}\n\nStudy Design:\n- Time Points: {study_design['time_points']}\n- pH Values: {study_design['ph_values']}\n- Conditions: {study_design['conditions']}\n- Replicates: {study_design['replicates']}\n\nAnalysis Summary:\n- Total Samples: {len(system.analysis_log)}\n- Methods Used: {set([log.get('method') for log in system.analysis_log])}\n\nPreparation Log:\n{pd.DataFrame(system.analysis_log).to_string()}\n\nSystem Performance:\n- Average Analysis Time: X minutes\n- Total Runtime: Y hours\n- Success Rate: Z%\n\"\"\"\n\n    filename = f\"stability_study_{datetime.now().strftime('%Y%m%d')}.txt\"\n    with open(filename, 'w') as f:\n        f.write(report)\n\n    print(f\"\\n\u2713 Report saved: {filename}\")\n\n# Execute study\nrun_protein_stability_study(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#step-5-advanced-integration-patterns","title":"Step 5: Advanced Integration Patterns","text":""},{"location":"tutorials/sia-ce-integration/#real-time-method-optimization","title":"Real-time Method Optimization","text":"<pre><code>class RealTimeOptimization:\n    \"\"\"Optimize methods based on real-time results.\"\"\"\n\n    def __init__(self, system):\n        self.system = system\n        self.optimization_history = []\n\n    def analyze_separation_quality(self, data_file):\n        \"\"\"Analyze separation metrics.\"\"\"\n        # In practice, parse ChemStation data file\n        # For demo, return mock metrics\n        return {\n            'resolution': 1.8,\n            'peak_symmetry': 1.1,\n            'runtime': 12.5,\n            'baseline_noise': 0.02\n        }\n\n    def optimize_next_run(self, current_metrics):\n        \"\"\"Adjust parameters for next run.\"\"\"\n\n        adjustments = {}\n\n        # Resolution optimization\n        if current_metrics['resolution'] &lt; 1.5:\n            adjustments['voltage'] = '+2kV'\n            adjustments['temperature'] = '-2\u00b0C'\n\n        # Speed optimization\n        if current_metrics['resolution'] &gt; 2.0:\n            adjustments['voltage'] = '+5kV'\n            adjustments['runtime'] = '-20%'\n\n        # Noise reduction\n        if current_metrics['baseline_noise'] &gt; 0.05:\n            adjustments['filter'] = 'increase'\n\n        self.optimization_history.append({\n            'metrics': current_metrics,\n            'adjustments': adjustments,\n            'timestamp': datetime.now()\n        })\n\n        return adjustments\n\n# Add optimization capability\nsystem.optimizer = RealTimeOptimization(system)\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#conditional-workflow-branching","title":"Conditional Workflow Branching","text":"<pre><code>def intelligent_workflow_routing(system, sample_info):\n    \"\"\"Route samples based on previous results.\"\"\"\n\n    # Check if screening is needed\n    if 'initial_screen' not in sample_info:\n        # Run fast screening\n        result = quick_screen_analysis(system, sample_info['vial'])\n\n        if result['complexity'] == 'high':\n            # Complex sample - full analysis\n            sample_info['method'] = 'comprehensive'\n            sample_info['prep'] = 'extensive'\n\n        elif result['complexity'] == 'medium':\n            # Standard analysis\n            sample_info['method'] = 'standard'\n            sample_info['prep'] = 'normal'\n\n        else:\n            # Simple sample - fast method\n            sample_info['method'] = 'rapid'\n            sample_info['prep'] = 'minimal'\n\n    # Execute appropriate workflow\n    execute_sample_workflow(system, sample_info)\n\ndef quick_screen_analysis(system, vial):\n    \"\"\"5-minute screening analysis.\"\"\"\n\n    system.ce.method.execution_method_with_parameters(\n        vial=vial,\n        method_name=\"CE_Quick_Screen\",\n        sample_name=f\"Screen_{vial}\"\n    )\n\n    # Wait and analyze\n    while system.ce.system.method_on():\n        time.sleep(10)\n\n    # Mock complexity assessment\n    complexity = np.random.choice(['low', 'medium', 'high'], p=[0.3, 0.5, 0.2])\n\n    return {'vial': vial, 'complexity': complexity}\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#automated-troubleshooting","title":"Automated Troubleshooting","text":"<pre><code>def automated_troubleshooting(system, error_type):\n    \"\"\"Automated error recovery procedures.\"\"\"\n\n    recovery_procedures = {\n        'high_current': [\n            lambda: system.ce.ce.flush_capillary(300),  # Extended flush\n            lambda: system.ce.ce.apply_pressure_to_capillary(-50, 60),  # Vacuum\n            lambda: replace_buffer_vials(system)\n        ],\n        'no_peaks': [\n            lambda: check_sample_preparation(system),\n            lambda: verify_injection_parameters(system),\n            lambda: system.sia.homogenize_sample(vial=current_vial, speed=1500, time=60)\n        ],\n        'baseline_drift': [\n            lambda: system.ce.ce.flush_capillary(180),\n            lambda: equilibrate_temperature(system, duration=15),\n            lambda: check_buffer_levels(system)\n        ]\n    }\n\n    if error_type in recovery_procedures:\n        print(f\"\\nTroubleshooting: {error_type}\")\n\n        for i, procedure in enumerate(recovery_procedures[error_type]):\n            print(f\"  Step {i+1}: {procedure.__name__}\")\n            procedure()\n\n            # Test if resolved\n            if test_system_recovery(system):\n                print(\"\u2713 Issue resolved\")\n                return True\n\n    return False\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#best-practices-for-integration","title":"Best Practices for Integration","text":""},{"location":"tutorials/sia-ce-integration/#1-modular-design","title":"1. Modular Design","text":"<pre><code># Separate concerns into modules\nclass AnalysisModule:\n    def __init__(self, system):\n        self.system = system\n\n    def execute(self, samples):\n        raise NotImplementedError\n\nclass ProteinModule(AnalysisModule):\n    def execute(self, samples):\n        # Protein-specific workflow\n        pass\n\nclass SmallMoleculeModule(AnalysisModule):\n    def execute(self, samples):\n        # Small molecule workflow\n        pass\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#2-state-management","title":"2. State Management","text":"<pre><code>class WorkflowState:\n    \"\"\"Track workflow state for recovery.\"\"\"\n\n    def __init__(self):\n        self.current_step = None\n        self.completed_samples = []\n        self.pending_samples = []\n        self.errors = []\n\n    def checkpoint(self):\n        \"\"\"Save state for recovery.\"\"\"\n        state_file = f\"workflow_state_{datetime.now().strftime('%Y%m%d_%H%M')}.json\"\n        # Save state to file\n\n    def recover(self, state_file):\n        \"\"\"Restore from checkpoint.\"\"\"\n        # Load and resume from saved state\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<pre><code>class PerformanceMonitor:\n    \"\"\"Monitor system performance metrics.\"\"\"\n\n    def __init__(self):\n        self.metrics = {\n            'sample_prep_time': [],\n            'analysis_time': [],\n            'total_throughput': 0,\n            'error_rate': 0\n        }\n\n    def log_operation(self, operation, duration):\n        \"\"\"Log operation timing.\"\"\"\n        self.metrics[f'{operation}_time'].append(duration)\n\n    def generate_dashboard(self):\n        \"\"\"Create performance dashboard.\"\"\"\n        # Calculate statistics and trends\n        pass\n</code></pre>"},{"location":"tutorials/sia-ce-integration/#conclusion","title":"Conclusion","text":"<p>You've learned advanced SIA-CE integration including: - Multi-component system architecture - Parallel processing strategies - Intelligent method selection - Real-time optimization - Error recovery procedures - Complex workflow design</p> <p>These patterns enable fully automated analytical workflows with minimal manual intervention.</p> <p>Further Reading</p> <ul> <li>Explore the API Reference for detailed function documentation</li> <li>Review Hardware Setup for optimization tips</li> <li>Check FAQ for common integration questions</li> </ul>"}]}